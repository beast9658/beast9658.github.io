<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老禽兽的闲言碎语</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-09T14:21:32.490Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Beast</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 重要知识点学习笔记（下）</title>
    <link href="http://yoursite.com/2020/08/03/2020-8-3/"/>
    <id>http://yoursite.com/2020/08/03/2020-8-3/</id>
    <published>2020-08-03T14:13:10.000Z</published>
    <updated>2020-09-09T14:21:32.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、从JS基础知识到JS-Web-API"><a href="#一、从JS基础知识到JS-Web-API" class="headerlink" title="一、从JS基础知识到JS Web API"></a>一、从JS基础知识到JS Web API</h2><h4 id="DOM节点的property"><a href="#DOM节点的property" class="headerlink" title="DOM节点的property"></a>DOM节点的property</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const pList &#x3D; document.querySelectorAll(&#39;p&#39;)</span><br><span class="line">p1 &#x3D; pList[0]</span><br><span class="line">p1.style.width &#x3D; &#39;100px&#39;</span><br><span class="line">console.log(p1.style.width)</span><br><span class="line">p1.className &#x3D; &#39;red&#39;</span><br><span class="line">console.log(p1.className)</span><br><span class="line">console.log(p1.nodeName)</span><br><span class="line">console.log(p1.nodeType)</span><br></pre></td></tr></table></figure><h4 id="DOM节点的attribute"><a href="#DOM节点的attribute" class="headerlink" title="DOM节点的attribute"></a>DOM节点的attribute</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p1.setAttribute(&#39;data-name&#39;, &#39;tangyuan&#39;)</span><br><span class="line">console.log(p1.getAttribute(&#39;data-name&#39;)) &#x2F;&#x2F; tangyuan</span><br><span class="line">p1.setAttribute(&#39;style&#39;, &#39;font-size: 50px&#39;)</span><br><span class="line">console.log(p1.style.fontSize) &#x2F;&#x2F; 50px</span><br></pre></td></tr></table></figure><h4 id="DOM结构操作"><a href="#DOM结构操作" class="headerlink" title="DOM结构操作"></a>DOM结构操作</h4><ul><li>新建节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const p1 &#x3D; document.createElement(&#39;p&#39;)</span><br><span class="line">p1.innerHTML &#x3D; &#39;this is p1&#39;</span><br><span class="line">div1.appendChild(p1)</span><br></pre></td></tr></table></figure><ul><li>移动节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const p2 &#x3D; document.getElementById(&#39;p2&#39;)</span><br><span class="line">div2.appendChild(p2)</span><br></pre></td></tr></table></figure><p>添加已存在的节点会进行移动</p><ul><li><p>获取父元素<br><code>child.parentNode</code></p></li><li><p>获取子元素<br><code>parent.childNodes</code></p></li><li><p>删除节点</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removeChild</span><br></pre></td></tr></table></figure><h3 id="DOM性能"><a href="#DOM性能" class="headerlink" title="DOM性能"></a>DOM性能</h3><ul><li><p>DOM操作非常‘昂贵’,避免频繁的DOM操作</p></li><li><p>对DOM查询做缓存</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 不缓存 DOM 查询结果</span><br><span class="line">for(let i &#x3D;0 ;i&lt;document.getElementsByTagName(&#39;p&#39;).length; i++) &#123;</span><br><span class="line">&#x2F;&#x2F; 每次循环，都会计算length, 频繁进行DOM查询</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 缓存 DOM 查询结果</span><br><span class="line">const pList &#x3D; document.getElementsByTagName(&#39;p&#39;)</span><br><span class="line">const length &#x3D; pList.length</span><br><span class="line">for(let i&#x3D;0; i&lt;length; i++) &#123;</span><br><span class="line">&#x2F;&#x2F; 缓存DOM， 只进行一次DOM查询</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将频繁操作改为一次性操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const list &#x3D; document.getElementById(&#39;list&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个文档片段，此时还没有插入到 DOM 结构中</span><br><span class="line">const frag &#x3D; document.createDocumentFragment()</span><br><span class="line">for(let i&#x3D;0; i&lt;20; i++) &#123;</span><br><span class="line">    const li &#x3D; document.createElement(&#39;li&#39;)</span><br><span class="line">    li.innerHTML &#x3D; &#96;List Item $&#123;i&#125;&#96;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;先插入到文档片段</span><br><span class="line">    frag.appendChild(li)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 都完成之和，再统一插入到 DOM 结构中</span><br><span class="line">list.appendChild(frag)</span><br></pre></td></tr></table></figure><h2 id="二、BOM-操作"><a href="#二、BOM-操作" class="headerlink" title="二、BOM 操作"></a>二、BOM 操作</h2><ul><li>navigator</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const ua &#x3D; navigator.userAgent</span><br><span class="line">const isChrome &#x3D; ua.indexOf(&#39;Chrome&#39;)</span><br><span class="line">console.log(isChrome)</span><br></pre></td></tr></table></figure><ul><li>screen</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen.width</span><br><span class="line">screen.height</span><br></pre></td></tr></table></figure><ul><li>location</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(location.href)</span><br><span class="line">console.log(location.protocol)</span><br><span class="line">console.log(location.pathname)</span><br><span class="line">console.log(location.search)</span><br><span class="line">console.log(location.hash)</span><br></pre></td></tr></table></figure><ul><li>history</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history.back()</span><br><span class="line">history.forward()</span><br></pre></td></tr></table></figure><h2 id="三、事件"><a href="#三、事件" class="headerlink" title="三、事件"></a>三、事件</h2><h3 id="事件绑定和事件冒泡"><a href="#事件绑定和事件冒泡" class="headerlink" title="事件绑定和事件冒泡"></a>事件绑定和事件冒泡</h3><ul><li>事件绑定</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const btn &#x3D; document.getElementById(&#39;btn&#39;)</span><br><span class="line">btn.addEventListener(&#39;click&#39;, event &#x3D;&gt; &#123;</span><br><span class="line">console.log(&#39;clicked&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通用的绑定函数</span><br><span class="line">function bindEvent(elem, type, fn) &#123;</span><br><span class="line">elem.addEventListener(type, fn)</span><br><span class="line">&#125;</span><br><span class="line">const a &#x3D; document.getElementById(&#39;link&#39;)</span><br><span class="line">bindEvent(a, &#39;click&#39;, e &#x3D;&gt; &#123;</span><br><span class="line">e.preventDefault() &#x2F;&#x2F;阻止默认行为</span><br><span class="line">console.log(&#39;clicked&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>事件冒泡</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const p &#x3D; document.getElementById(&#39;p&#39;)</span><br><span class="line">const body &#x3D; document.body</span><br><span class="line">bindEvent(p, &#39;click&#39;, e&#x3D;&gt; &#123;</span><br><span class="line">e.stopPropagation()</span><br><span class="line">console.log(&#39;激活)</span><br><span class="line">&#125;)</span><br><span class="line">bindEvent(body, &#39;click&#39;, e &#x3D;&gt; &#123;</span><br><span class="line">console.log(&#39;取消&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过事件冒泡实现代理</span><br><span class="line">&#x2F;&#x2F; 一个支持事件代理的通用事件绑定函数</span><br><span class="line">function bindEvent(elem, type, selector,fn) &#123;</span><br><span class="line">    if(fn &#x3D;&#x3D; null ) &#123;</span><br><span class="line">    fn &#x3D; selector</span><br><span class="line">    selector &#x3D; null</span><br><span class="line">    &#125;</span><br><span class="line">    elem.addEventListener(type, e &#x3D;&gt; &#123;</span><br><span class="line">    let target</span><br><span class="line">    if(selector) &#123;</span><br><span class="line">        target &#x3D; e.target</span><br><span class="line">        if(target.matches(selector)) &#123;</span><br><span class="line">        fn.call(target, e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        fn.call(target, e)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const div &#x3D; document.getElementById(&#39;div&#39;)</span><br><span class="line">bindEvent(div, &#39;click&#39;, event &#x3D;&gt; &#123;</span><br><span class="line">event.preventDefault()</span><br><span class="line">const target &#x3D; event.target &#x2F;&#x2F; 获取触发事件的节点</span><br><span class="line">if(target.nodeName &#x3D;&#x3D;&#x3D; &#39;A&#39;) &#123;</span><br><span class="line">    console.log(target.innerHtml)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const a &#x3D; document.getElementById(&#39;link&#39;)</span><br><span class="line">bindEvent(a, &#39;click&#39;, e &#x3D;&gt; &#123;</span><br><span class="line">e.preventDefault() &#x2F;&#x2F;阻止默认行为</span><br><span class="line">console.log(&#39;clicked&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="四、ajax"><a href="#四、ajax" class="headerlink" title="四、ajax"></a>四、ajax</h2><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><h4 id="手写一个ajax请求："><a href="#手写一个ajax请求：" class="headerlink" title="手写一个ajax请求："></a>手写一个ajax请求：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const xhr &#x3D; new XMLHttpRequest()</span><br><span class="line">xhr.open(&#39;GET&#39;, &#39;&#x2F;data&#x2F;test.json&#39;, false)</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange &#x3D; function () &#123;</span><br><span class="line">    if(xhr.readyState &#x3D;&#x3D;&#x3D; 4) &#123;</span><br><span class="line">        if(xhr.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">            alert(xhr.responseText)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><h4 id="xhr-readyState"><a href="#xhr-readyState" class="headerlink" title="xhr.readyState"></a>xhr.readyState</h4><ul><li><p>0 - （未初始化）还没调用send()方法</p></li><li><p>1 - （载入）已调用send()方法，正在发送请求</p></li><li><p>2 - （载入完成）send()方法执行完成，已接收到全部响应内容</p></li><li><p>3 -  (交互) 正在解析响应内容</p></li><li><p>4 - （完成）响应内容解析完成，可以在客户端调用</p></li></ul><h4 id="xhr-status"><a href="#xhr-status" class="headerlink" title="xhr.status"></a>xhr.status</h4><ul><li><p>2xx - 表示请求成功，如200</p></li><li><p>3xx - 需要重定向， 浏览器直接跳转，如 301 302 304</p></li><li><p>4xx - 客户端请求错误，如404， 403</p></li><li><p>5xx - 服务端错误</p></li></ul><h3 id="同源策略和跨域"><a href="#同源策略和跨域" class="headerlink" title="同源策略和跨域"></a>同源策略和跨域</h3><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><ul><li><p>什么是跨域（同源策略）</p></li><li><p>JSONP</p></li><li><p>CORS（服务端支持）</p></li></ul><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><ul><li><p>ajax请求时，浏览器要求当前网页和server必须同源（安全）</p></li><li><p>同源：协议、域名、端口，三者必须一致</p></li><li><p>前端：<a href="http://a.com:8080/；server:https://b.com/api/xxx" target="_blank" rel="noopener">http://a.com:8080/；server:https://b.com/api/xxx</a></p></li></ul><h4 id="加载-css-js-可无视同源策略"><a href="#加载-css-js-可无视同源策略" class="headerlink" title="加载 css js 可无视同源策略"></a>加载 <strong>css</strong> <strong>js</strong> 可无视同源策略</h4><ul><li><p><code>&lt;img src=跨域的图片地址 /&gt;</code></p></li><li><p><code>&lt;link href=跨域的css地址 /&gt;</code></p></li><li><p><code>&lt;script src=跨域的js地址&gt;&lt;/script&gt;</code></p></li><li><p><code>&lt;img /&gt; 可用于统计打点， 可使用第三方统计服务</code></p></li><li><p><code>&lt;link /&gt; &lt;script&gt; 可使用**CDN**,**CDN**一般都是外域</code></p></li><li><p><code>&lt;script&gt; 可实现JSONP</code></p></li></ul><h4 id="跨域-1"><a href="#跨域-1" class="headerlink" title="跨域"></a>跨域</h4><ul><li><p>所有的跨域，都必须经过server端配合</p></li><li><p>未经server端允许就实现跨域，说明浏览器有漏洞，危险信号</p></li></ul><h3 id="JSONP和CORS"><a href="#JSONP和CORS" class="headerlink" title="JSONP和CORS"></a>JSONP和CORS</h3><ul><li>JSNOP</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">window.callback &#x3D; function (data) &#123;</span><br><span class="line">&#x2F;&#x2F; 跨域得到的信息</span><br><span class="line">console.log(data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;jsonp.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;jsonp文件内容</span><br><span class="line">callback(&#123;</span><br><span class="line">name: &quot;jsonp&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>CORS - 服务器设置 http header</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http:&#x2F;&#x2F;localhost:8080&quot;)</span><br><span class="line">response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Request-With&quot;)</span><br><span class="line">response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;)</span><br></pre></td></tr></table></figure><h2 id="五、存储"><a href="#五、存储" class="headerlink" title="五、存储"></a>五、存储</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><ul><li><p>本身用于浏览器和server通讯</p></li><li><p>被“借用”到本地存储</p></li><li><p>可用<code>document.cookie = &quot;&quot;</code></p></li></ul><p>修改</p><h3 id="cookie的缺点"><a href="#cookie的缺点" class="headerlink" title="cookie的缺点"></a>cookie的缺点</h3><ul><li><p>存储太小，最大4K</p></li><li><p>http请求时需要发送到服务端，增加请求数据量</p></li><li><p>只能用<code>document.cookie = &quot;&quot;</code>修改，太过简陋</p></li></ul><h3 id="localStorage-和-sessionStorage"><a href="#localStorage-和-sessionStorage" class="headerlink" title="localStorage 和 sessionStorage"></a>localStorage 和 sessionStorage</h3><ul><li><p><strong>HTML5</strong>专门为存储而设计，最大可存5M</p></li><li><p><strong>API</strong>简单易用 <strong>setItem</strong> <strong>getItem</strong></p></li><li><p>不会随着<strong>http</strong>请求被发送出去</p></li><li><p><strong>localStorage</strong>数据会永久存储，除非代码或手动删除</p></li><li><p><strong>sessionStorage</strong>数据只存在于当前会话，浏览器关闭则清空</p></li><li><p>一般用<strong>localStorage</strong>会更多一些</p></li></ul><h3 id="描述-cookie-localStorage-sessionStorage"><a href="#描述-cookie-localStorage-sessionStorage" class="headerlink" title="描述 cookie localStorage sessionStorage"></a>描述 cookie localStorage sessionStorage</h3><ul><li><p>容量</p></li><li><p><strong>API</strong>易用性</p></li><li><p>是否跟随<strong>http</strong>请求发送出去</p></li></ul>]]></content>
    
    <summary type="html">
    
      记录 JavaScript 重点知识
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 重要知识点学习笔记（上）</title>
    <link href="http://yoursite.com/2020/08/01/2020-8-1/"/>
    <id>http://yoursite.com/2020/08/01/2020-8-1/</id>
    <published>2020-08-01T13:51:21.000Z</published>
    <updated>2020-09-09T14:15:34.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、变量类型和计算"><a href="#一、变量类型和计算" class="headerlink" title="一、变量类型和计算"></a>一、变量类型和计算</h2><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><ul><li><p>typeOf能判断哪些类型</p></li><li><p>何时使用 === 何时使用 ==</p></li><li><p>值类型和引用类型的区别</p></li><li><p>手写深拷贝</p></li></ul><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ul><li><p>变量类型</p></li><li><p>值类型 vs 引用类型</p></li><li><p>typeOf运算符</p></li><li><p>深拷贝</p></li><li><p>变量计算</p></li></ul><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><h3 id="typeof-和深拷贝"><a href="#typeof-和深拷贝" class="headerlink" title="typeof 和深拷贝"></a>typeof 和深拷贝</h3><h4 id="typeOf运算符"><a href="#typeOf运算符" class="headerlink" title="typeOf运算符"></a>typeOf运算符</h4><ul><li>识别所有值类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a; typeOf a &#x2F;&#x2F; &#39;undefined&#39;</span><br><span class="line">const str &#x3D; &#39;abc&#39; typeOf str &#x2F;&#x2F; &#39;string&#39;</span><br><span class="line">const n &#x3D; 100 typeOf n &#x2F;&#x2F; &#39;number&#39;</span><br><span class="line">const b &#x3D; true typeOf b &#x2F;&#x2F; &#39;boolean&#39;</span><br><span class="line">const s &#x3D; Symbol(&#39;s&#39;) typeOf s &#x2F;&#x2F; &#39;symbol&#39;</span><br></pre></td></tr></table></figure><ul><li>识别函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeOf console.log &#x2F;&#x2F; &#39;function&#39;</span><br><span class="line">typeOf function () &#123;&#125; &#x2F;&#x2F; &#39;function&#39;</span><br></pre></td></tr></table></figure><ul><li>判断是否是引用类型（不可再细分）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeOf null &#39;Object&#39;</span><br><span class="line">typeOf [&#39;a&#39;, &#39;b&#39;] &#39;Object&#39;</span><br><span class="line">typeOf &#123;x: 100&#125; &#39;Object&#39;</span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 深拷贝</span><br><span class="line">* @param &#123;Object&#125; obj 要拷贝的对象</span><br><span class="line">*&#x2F;</span><br><span class="line">function deepClone(obj &#x3D; &#123;&#125;) &#123;</span><br><span class="line">    &#x2F;&#x2F; 非复杂对象类型直接返回</span><br><span class="line">    if(typeof obj !&#x3D;&#x3D; &#39;object&#39; || obj &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return obj</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 初始化返回结果</span><br><span class="line">    let result</span><br><span class="line">    if(obj instanceof Array) &#123;</span><br><span class="line">        result &#x3D; []</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        result &#x3D; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(let key in obj) &#123;</span><br><span class="line">        if(obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            &#x2F;&#x2F; 保证key不是原型的属性</span><br><span class="line">            result[key] &#x3D; deepClone(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 返回结果</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量计算"><a href="#变量计算" class="headerlink" title="变量计算"></a>变量计算</h3><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li>字符串拼接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; 100 + 10 &#x2F;&#x2F; 110</span><br><span class="line">const a &#x3D; 100 + &#39;10&#39; &#x2F;&#x2F; &#39;10010&#39;</span><br><span class="line">const a &#x3D; true + &#39;10&#39; &#x2F;&#x2F; &#39;true10&#39;</span><br></pre></td></tr></table></figure><ul><li>==</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">100 &#x3D;&#x3D; &#39;100&#39; &#x2F;&#x2F; true</span><br><span class="line">0 &#x3D;&#x3D; &#39;&#39; &#x2F;&#x2F; true</span><br><span class="line">0 &#x3D;&#x3D; false &#x2F;&#x2F; true</span><br><span class="line">false &#x3D;&#x3D; &#39;&#39; &#x2F;&#x2F; true</span><br><span class="line">null &#x3D;&#x3D; undefined &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>==的隐式转化比较复杂，目前实际应用意义较小，没必要深究</p><p>建议除了==null 之外，其他一律使用===</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const obj &#x3D; &#123;x: 100&#125;</span><br><span class="line">if (obj.a &#x3D;&#x3D; null) &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; 相当于</span><br><span class="line">&#x2F;&#x2F; if(obj.a &#x3D;&#x3D;&#x3D; undefined || obj.a &#x3D;&#x3D;&#x3D; null) &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>if语句和逻辑运算</p></li><li><p>truly 变量：!!a === true</p></li><li><p>falsely 变量:  !!a === false</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!!0 &#x3D;&#x3D;&#x3D; false</span><br><span class="line">!!NaN &#x3D;&#x3D;&#x3D; false</span><br><span class="line">!!&#39;&#39; &#x3D;&#x3D;&#x3D; false</span><br><span class="line">!!null &#x3D;&#x3D;&#x3D; false</span><br><span class="line">!!undefined &#x3D;&#x3D;&#x3D; false</span><br><span class="line">!!false &#x3D;&#x3D;&#x3D; false</span><br></pre></td></tr></table></figure><ul><li>逻辑判断</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(10 &amp;&amp; 0) &#x2F;&#x2F; 0</span><br><span class="line">console.log(&#39;&#39; || &#39;abc&#39;) &#x2F;&#x2F; &#39;abc&#39;</span><br><span class="line">console.log(!window.a) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h2 id="二、原型和原型链"><a href="#二、原型和原型链" class="headerlink" title="二、原型和原型链"></a>二、原型和原型链</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 类</span><br><span class="line">class Student &#123;</span><br><span class="line">    constructor(name, number) &#123;</span><br><span class="line">        this.name &#x3D; name</span><br><span class="line">        this.number &#x3D; number</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi() &#123;</span><br><span class="line">        console.log(&#96;姓名：$&#123;this.name&#125;,学号：$&#123;this.number&#125;&#96;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过new来生成对象&#x2F;实例</span><br><span class="line">const xialuo &#x3D; new Student(&#39;夏洛&#39;, 100)</span><br><span class="line">console.log(xialuo.name)</span><br><span class="line">console.log(xialuo.number)</span><br><span class="line">console.log(xialuo.sayHi())</span><br><span class="line"></span><br><span class="line">const madongmei &#x3D; new Student(&#39;马冬梅&#39;, 101)</span><br><span class="line">console.log(madongmei.name)</span><br><span class="line">console.log(madongmei.number)</span><br><span class="line">console.log(madongmei.sayHi())</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 父类</span><br><span class="line">class Person &#123;</span><br><span class="line">constructor(name) &#123;</span><br><span class="line">    this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line">eat() &#123;</span><br><span class="line">    console.log(&#96;$&#123;this.name&#125; eat something&#96;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 子类</span><br><span class="line">class Student extends Person &#123;</span><br><span class="line">constructor(name, number) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">    this.number &#x3D; number</span><br><span class="line">&#125;</span><br><span class="line">sayHi() &#123;</span><br><span class="line">    console.log(&#96;姓名：$&#123;this.name&#125;,学号：$&#123;this.number&#125;&#96;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 另一个子类</span><br><span class="line">class Teacher extends Person &#123;</span><br><span class="line">constructor(name, major) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">    this.major &#x3D; major</span><br><span class="line">&#125;</span><br><span class="line">teach() &#123;</span><br><span class="line">    console.log(&#96;$&#123;this.name&#125;教授：$&#123;this.major&#125;&#96;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const xialuo &#x3D; new Student(&#39;夏洛&#39;, 100)</span><br><span class="line">console.log(xialuo.name)</span><br><span class="line">console.log(xialuo.number)</span><br><span class="line">xialuo.sayHi()</span><br><span class="line">xialuo.eat()</span><br><span class="line"></span><br><span class="line">const wanglaoshi &#x3D; new Teacher(&#39;王老师&#39;, &#39;数学&#39;)</span><br><span class="line">console.log(wanglaoshi.name)</span><br><span class="line">console.log(wanglaoshi.major)</span><br><span class="line">wanglaoshi.teach()</span><br><span class="line">wanglaoshi.eat()</span><br></pre></td></tr></table></figure><h3 id="类型判断-instanceOf"><a href="#类型判断-instanceOf" class="headerlink" title="类型判断 - instanceOf"></a>类型判断 - instanceOf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xialuo intanceOf Student &#x2F;&#x2F; true</span><br><span class="line">xialuo intanceOf Person &#x2F;&#x2F; true</span><br><span class="line">xialuo intanceOf Object &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">[] instanceOf Array &#x2F;&#x2F; true</span><br><span class="line">[] instanceOf Object &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#123;&#125; instanceOf Object &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; class实际上是函数，可见是语法糖</span><br><span class="line">typeOf Person &#x2F;&#x2F; &#39;function&#39;</span><br><span class="line">typeOf Student &#x2F;&#x2F; &#39;function&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 隐式原型和显示原型</span><br><span class="line">console.log(xialuo.__proto__)</span><br><span class="line">console.log(Student.prototype)</span><br><span class="line">console.log(xialuo.__proto__ &#x3D;&#x3D;&#x3D; Student.prototype) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="http://yanxuan.nosdn.127.net/63de8aa846192792f6e9aec2202e30a5.png" alt="原型.png"></p><h4 id="原型关系"><a href="#原型关系" class="headerlink" title="原型关系"></a>原型关系</h4><ul><li><p>每个<code>class</code>都有显式原型</p></li><li><p>每个实例都有隐式原型 <code>__proto__</code></p></li><li><p>实例的</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__proto__</span><br></pre></td></tr></table></figure><p>指向对应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class</span><br></pre></td></tr></table></figure><p>的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prototype</span><br></pre></td></tr></table></figure><h4 id="基于原型的执行规则"><a href="#基于原型的执行规则" class="headerlink" title="基于原型的执行规则"></a>基于原型的执行规则</h4><ul><li><p>获取属性<code>xialuo.name</code> 或执行方法<code>xialuo.sayHi()</code>时</p></li><li><p>现在自身属性或方法寻找</p></li><li><p>如果找不到则自动去<code>__proto__</code>寻找</p></li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(Student.prototype.__proto__)</span><br><span class="line">console.log(Person.prototype)</span><br><span class="line">console.log(Student.prototype.__proto__ &#x3D;&#x3D;&#x3D; Person.prototype) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="http://yanxuan.nosdn.127.net/bfe43487fbcbc810032d14c685150b18.png" alt="原型链.png"></p><h4 id="题目解答"><a href="#题目解答" class="headerlink" title="题目解答"></a>题目解答</h4><ul><li>如何准确判断一个变量是不是数组？<br><code>a instanceOf Array</code></li><li>手写一个简易的jQuery, 考虑插件和扩展机智</li></ul><h2 id="三、作用域和闭包"><a href="#三、作用域和闭包" class="headerlink" title="三、作用域和闭包"></a>三、作用域和闭包</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><ul><li><p>this的不同应用场景，如何取值？</p></li><li><p>手写bind函数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 手写bind</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用bind</span><br><span class="line">function fn1(a, b, c) &#123;</span><br><span class="line">    console.log(&#39;this&#39;, this)</span><br><span class="line">    console.log(a, b, c)</span><br><span class="line">    return &#39;this is this&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; const fn2 &#x3D; fn1.bind(&#123;x: 100&#125;, 1, 2, 3)</span><br><span class="line">&#x2F;&#x2F; fn2()</span><br><span class="line"></span><br><span class="line">Function.prototype.bind1 &#x3D; function () &#123;</span><br><span class="line">    const args &#x3D; Array.from(arguments)</span><br><span class="line">    const t &#x3D; args.shift()</span><br><span class="line">    const self &#x3D; this</span><br><span class="line">    return function () &#123;</span><br><span class="line">        self.apply(t, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const fn2 &#x3D; fn1.bind1(&#123;x: 100&#125;, 1, 2, 3)</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><ul><li>实际开发中闭包的应用场景，举例说明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 闭包实现缓存</span><br><span class="line">function createCache() &#123;</span><br><span class="line">    const data &#x3D; &#123;&#125;</span><br><span class="line">    return &#123;</span><br><span class="line">        get: function (key) &#123;</span><br><span class="line">            return data[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function(key, val) &#123;</span><br><span class="line">            data[key] &#x3D; val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const c &#x3D; createCache()</span><br><span class="line">c.set(&#39;name&#39;, 100)</span><br><span class="line">console.log(c.get(&#39;name&#39;))</span><br></pre></td></tr></table></figure><ul><li>创建10个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;</span><br></pre></td></tr></table></figure><p>标签，点击时弹出对应的序号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">let a, i</span><br><span class="line">for(i&#x3D;0; i&lt;10 ;i++) &#123;</span><br><span class="line">document.createElement(&#39;a&#39;)</span><br><span class="line">a.innerHTML &#x3D; i + &#39;&lt;br&gt;&#39;</span><br><span class="line">a.addEventListener(&#39;click&#39;, function(e) &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    alert(i)</span><br><span class="line">&#125;)</span><br><span class="line">document.body.appendChild(a)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 每次点击都会弹出10</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下面这个才是正确的写法</span><br><span class="line">&#x2F;&#x2F; let会生成块级作用域</span><br><span class="line">let a</span><br><span class="line">for(let i&#x3D;0; i&lt;10 ;i++) &#123;</span><br><span class="line">a &#x3D; document.createElement(&#39;a&#39;)</span><br><span class="line">a.innerHTML &#x3D; i + &#39;&lt;br&gt;&#39;</span><br><span class="line">a.addEventListener(&#39;click&#39;, function(e) &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    alert(i)</span><br><span class="line">&#125;)</span><br><span class="line">document.body.appendChild(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>作用域和自由变量</p></li><li><p>闭包</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 闭包</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 函数作为返回值</span><br><span class="line">&#x2F;&#x2F; function create() &#123;</span><br><span class="line">&#x2F;&#x2F;     let a &#x3D; 100</span><br><span class="line">&#x2F;&#x2F;     return function () &#123;</span><br><span class="line">&#x2F;&#x2F;         console.log(a)</span><br><span class="line">&#x2F;&#x2F;     &#125;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line">&#x2F;&#x2F; let fn &#x3D; create()</span><br><span class="line">&#x2F;&#x2F; let a &#x3D; 200</span><br><span class="line">&#x2F;&#x2F; fn() &#x2F;&#x2F; 100</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 函数作为参数</span><br><span class="line">function print(fn) &#123;</span><br><span class="line">let a &#x3D; 200</span><br><span class="line">fn()</span><br><span class="line">&#125;</span><br><span class="line">let a &#x3D; 100</span><br><span class="line">function fn() &#123;</span><br><span class="line">console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">print(fn)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 闭包：自由变量的查找，是函数定义的地方，向上级作用域查找，而不是执行的地方</span><br></pre></td></tr></table></figure><ul><li><p>this</p></li><li><p>在class方法中调用</p></li><li><p>箭头函数</p></li><li><p>谁调用，this指向谁</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function fn1() &#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;</span><br><span class="line">fn1() &#x2F;&#x2F; window</span><br><span class="line">fn1.call(&#123;x: 100&#125;) &#x2F;&#x2F; &#123;x: 100&#125;</span><br><span class="line">const fn2 &#x3D; fn1.bind(&#123;x: 200&#125;)</span><br><span class="line">fn2() &#x2F;&#x2F; &#123;x: 200&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const zhangsan &#x3D; &#123;</span><br><span class="line">name: &#39;张三&#39;,</span><br><span class="line">sayHi () &#123;</span><br><span class="line">&#x2F;&#x2F; this即当前对象</span><br><span class="line">console.log(this)</span><br><span class="line">&#125;,</span><br><span class="line">wait () &#123;</span><br><span class="line">setTimeout(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; this &#x3D;&#x3D;&#x3D; window</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 箭头函数不改变this指向</span><br><span class="line">const zhangsan &#x3D; &#123;</span><br><span class="line">name: &#39;张三&#39;,</span><br><span class="line">sayHi () &#123;</span><br><span class="line">&#x2F;&#x2F; this即当前对象</span><br><span class="line">console.log(this)</span><br><span class="line">&#125;,</span><br><span class="line">wait () &#123;</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; this即当前对象</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">constructor(name) &#123;</span><br><span class="line">this.name &#x3D; name</span><br><span class="line">this.age &#x3D; age</span><br><span class="line">&#125;</span><br><span class="line">sayHi() &#123;</span><br><span class="line">console.log(this)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">const zhangsan &#x3D; new Person()</span><br><span class="line">zhangsan.sayHi() &#x2F;&#x2F;zhangsan对象</span><br></pre></td></tr></table></figure><h2 id="四、异步和单线程"><a href="#四、异步和单线程" class="headerlink" title="四、异步和单线程"></a>四、异步和单线程</h2><h3 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h3><h4 id="单线程和异步"><a href="#单线程和异步" class="headerlink" title="单线程和异步"></a>单线程和异步</h4><ul><li><p><strong>JS</strong>只是单线程语言，只能同时做一件事</p></li><li><p>浏览器和<strong>nodejs</strong>已支持JS启动进程，如<code>Web Worker</code></p></li><li><p><strong>JS</strong>和<strong>DOM</strong>渲染共用同一个线程，因为JS可修改DOM结构</p></li><li><p>遇到等待（网络请求，定时任务）不能卡住</p></li><li><p>需要异步</p></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><p>网络请求</p></li><li><p>定时任务</p></li></ul><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function getData(url) &#123;</span><br><span class="line">return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">    url,</span><br><span class="line">    success(data) &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    error(err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题解答和总结"><a href="#问题解答和总结" class="headerlink" title="问题解答和总结"></a>问题解答和总结</h3><ul><li><p>同步和异步的区别是什么</p></li><li><p>基于JS是单线程语言</p></li><li><p>异步不会阻塞代码执行</p></li><li><p>同步会阻塞代码执行</p></li><li><p>手写用promise加载一张图片</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const url &#x3D; &quot;http:&#x2F;&#x2F;yanxuan.nosdn.127.net&#x2F;63de8aa846192792f6e9aec2202e30a5.png&quot;</span><br><span class="line">function loadImg(src) &#123;</span><br><span class="line">return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        const img &#x3D; document.createElement(&#39;img&#39;)</span><br><span class="line">    img.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            resolve(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            reject(new Error(&#39;图片加载失败&#39;))</span><br><span class="line">        &#125;</span><br><span class="line">        img.src &#x3D; src</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">loadImg(url).then(img &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;图片加载成功&#39;, img)</span><br><span class="line">&#125;).catch(err  &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;失败原因: $&#123;err&#125;&#96;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录 JavaScript 重点知识
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>第一篇文章就记录一下入门Hexo和如何搭建博客吧</title>
    <link href="http://yoursite.com/2020/07/23/2020.7.24/"/>
    <id>http://yoursite.com/2020/07/23/2020.7.24/</id>
    <published>2020-07-23T14:25:38.000Z</published>
    <updated>2020-07-24T13:26:06.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="必要的准备"><a href="#必要的准备" class="headerlink" title="必要的准备"></a>必要的准备</h2><p>在搭建博客之前，需要先下载安装以下内容</p><ul><li><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a></p></li><li><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a></p></li></ul><p>具体安装版本根据操作系统自行选择即可啦</p><h2 id="何为Hexo"><a href="#何为Hexo" class="headerlink" title="何为Hexo"></a>何为Hexo</h2><p> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。             ——这是官方文档的解释</p><p>总之就是一个<strong>入门简单</strong> 而且<strong>解决问题方案完善</strong>的快速搭建博客脚手架。稍微阅读一下文档即可上手搭建自己的博客啦，但是其生态十分完善，想要搭建一个美观且实用的博客还需要继续研究文档和亲自尝试。</p><h2 id="入门Hexo"><a href="#入门Hexo" class="headerlink" title="入门Hexo"></a>入门Hexo</h2><p>这次搭建博客基于<strong>Windows10</strong>系统，使用<strong>Vscode</strong>搭建。在准备工作做完之后，就可以使用npm安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后，可以打开 *<em>_config.yml *</em>对Hexo进行配置。除了博客主页显示的信息和标题外，还有比较重要的就是更改主题配置和部署外部服务器的设置，这些放在之后再讲。</p><p>首先创建一个文件夹用来放置博客的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>初始化安装结束后在命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">($ hexo s)</span><br></pre></td></tr></table></figure><p>就可以在 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 看一下Hexo默认的模板啦，一些博客需要的基本内容都包含在基础模板里面，但我相信所有想搭博客的人肯定不会满足于这一套基础模板的，当然刚入门的话就先看一看博客的格式就好了，先写一篇文章试试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line">($ hexo n [layout] &lt;title&gt;)</span><br></pre></td></tr></table></figure><p>这样就可以新建一篇文章了，其中<strong>layout</strong>填入参数（大部分时候不填默认就好了），<strong>title</strong>填入标题。</p><p>新建文章之后就可以随便写点东西试试了，如果没接触过<strong>Markdown</strong>语法的话也可以了解一些基础的语法之后再开始你的写作。</p><h2 id="在GitHub上部署试试"><a href="#在GitHub上部署试试" class="headerlink" title="在GitHub上部署试试"></a>在GitHub上部署试试</h2><p>了解了Hexo的基本操作之后，该把自己弄的博客牵出来遛遛了。甭管写没写东西，先部署线上乐呵乐呵吧！</p><p>GitHub正好就能免费托管一下Hexo搭建的个人博客，在Hexo的文档内也介绍了如何部署到 GitHub Pages 。我就来简单叙述一下吧。</p><p>首先你需要有一个GitHub账户，并且新建一个<strong>（你的用户名）.github.io</strong> 的仓库（这里是必须要求用户名）</p><p>这里还需要安装一个插件<strong>hexo-deployer-git</strong>可以方便的将博客文件上传GitHub仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>接下来就要回到刚才提到的配置文件*<em>_config.yml *</em>设置一下git仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;（你的用户名）&#x2F;（你的用户名）.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后就可以把本地文件打包上传啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean  &#x2F;&#x2F;清理缓存文件以及以前的静态文件</span><br><span class="line">$ hexo g  &#x2F;&#x2F;生成静态文件</span><br><span class="line">$ hexo d  &#x2F;&#x2F;部署网站到指定仓库</span><br></pre></td></tr></table></figure><p>这其中应该还需要验证GitHub账户的环节，这里就先省略了。完成之后就可以在<strong>（你的用户名）.github.io</strong>这个网页查看到你的博客了，但是不仅没什么内容而且页面也不怎么酷炫总是让人觉得这还没完。</p><h2 id="给博客换个主题"><a href="#给博客换个主题" class="headerlink" title="给博客换个主题"></a>给博客换个主题</h2><p>Hexo的社区内有很多大佬分享的主题供你选择，我选择了<a href="https://demo.jerryc.me/" target="_blank" rel="noopener">Butterfly</a>这款主题，具体的使用方法和配置方式在主题作者的文档里面也写的很清楚，这里就分享一下我自己是如何配置的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>首先将皮肤克隆到博客根目录内，然后修改配置文件*<em>_config.yml *</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>这时候你可能觉得可以迎接新的主题了，然而一打开页面什么都没有，就这样一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes&#x2F;layout.pug block content #recent-posts.recent-posts include includes&#x2F;recent-posts.pug include includes&#x2F;pagination.pug</span><br></pre></td></tr></table></figure><p>？？？</p><p>懵逼之后当然要去找找解决办法啦，其实是缺少其他一些插件，只需要在cmd中进入博客根目录输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>等待插件安装完成后先清理一下缓存和静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>之后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>就可以看见改头换面的博客样式啦。</p>]]></content>
    
    <summary type="html">
    
      简单易懂的博客搭建入门过程
    
    </summary>
    
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
</feed>
