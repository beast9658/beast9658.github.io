{"title":"记录微前端micro-app的配置","uid":"b027df790b988095e3311de9321e5959","slug":"记录微前端micro-app的配置","date":"2022-09-23T14:31:25.000Z","updated":"2023-04-21T09:53:33.226Z","comments":true,"path":"api/articles/记录微前端micro-app的配置.json","keywords":null,"cover":null,"content":"<h2 id=\"介绍：\"><a href=\"#介绍：\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h2><p>基座应用react</p>\n<p>文章发布时，涉及到的依赖包版本：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n  &quot;@micro-zoe&#x2F;micro-app&quot;: &quot;^0.8.4&quot;,\n&#125;\n复制代码</code></pre>\n\n<p>文章默认您已经大致浏览过micro-app官方文档，所以最好请先阅读官方文档：<a href=\"https://link.juejin.cn/?target=https://cangdu.org/micro-app/docs.html%23/zh-cn/start\" title=\"https://cangdu.org/micro-app/docs.html#/zh-cn/start\">cangdu.org&#x2F;micro-app&#x2F;d…</a></p>\n<p>我目前大多数的项目都是hash路由，本来想着基座和子应用都配置成hash路由，但是我没找到官方的例子，自己也没试出来。。。<br>最终选择了 基座应用history路由、子应用hash路由的方式 <em>（注：后面已全部改为history路由）</em></p>\n<p>更多实现方式：<a href=\"https://link.juejin.cn/?target=https://cangdu.org/micro-app/docs.html%23/zh-cn/framework/introduce\" title=\"https://cangdu.org/micro-app/docs.html#/zh-cn/framework/introduce\">cangdu.org&#x2F;micro-app&#x2F;d…</a></p>\n<p>下面说一下 需要做的修改：</p>\n<h1 id=\"基座应用\"><a href=\"#基座应用\" class=\"headerlink\" title=\"基座应用\"></a>基座应用</h1><h2 id=\"1、修改路由模式为history\"><a href=\"#1、修改路由模式为history\" class=\"headerlink\" title=\"1、修改路由模式为history\"></a>1、修改路由模式为history</h2><h3 id=\"webpack搭建的\"><a href=\"#webpack搭建的\" class=\"headerlink\" title=\"webpack搭建的\"></a>webpack搭建的</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; BrowserRouter, HashRouter, useRoutes &#125; from &#39;react-router-dom&#39;\n...\nfunction App() &#123;\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;RouteElement &#x2F;&gt;\n    &lt;&#x2F;BrowserRouter&gt;\n  )\n&#125;\nexport default App\n复制代码</code></pre>\n\n<p>webpack.config.js – 2022.02.17更新<br>config.js一共需要改两个地方:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">...\noutput: &#123;\n  ...\n  publicPath: &#39;&#x2F;&#39;, &#x2F;&#x2F; history路由\n  ...\n&#125;,\n...\n...\ndevServer: &#123;\n  ...\n  historyApiFallback: true, &#x2F;&#x2F; history路由\n&#125;,\n复制代码</code></pre>\n\n<h3 id=\"如果是umi的项目\"><a href=\"#如果是umi的项目\" class=\"headerlink\" title=\"如果是umi的项目\"></a>如果是umi的项目</h3><p>需要查文档修改config</p>\n<h2 id=\"2、安装-micro-zoe-x2F-micro-app\"><a href=\"#2、安装-micro-zoe-x2F-micro-app\" class=\"headerlink\" title=\"2、安装@micro-zoe&#x2F;micro-app\"></a>2、安装@micro-zoe&#x2F;micro-app</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install @micro-zoe&#x2F;micro-app\n复制代码</code></pre>\n\n<h2 id=\"3、入口文件\"><a href=\"#3、入口文件\" class=\"headerlink\" title=\"3、入口文件\"></a>3、入口文件</h2><p>引入microApp并start</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import ReactDOM from &#39;react-dom&#39;\nimport App from &#39;.&#x2F;App&#39;\nimport microApp from &#39;@micro-zoe&#x2F;micro-app&#39;\n\nmicroApp.start(&#123;\n  &#x2F;&#x2F; 本地启动时 sockjs-node报错 要不然会一直刷新\n  plugins: &#123;\n    modules: &#123;\n      app1: [\n        &#123;\n          loader(code) &#123;\n            if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;development&#39; &amp;&amp; code.indexOf(&#39;sockjs-node&#39;) &gt; -1) &#123;\n              code &#x3D; code.replace(&#39;window.location.port&#39;, 8052) &#x2F;&#x2F; 这里需要修改成子应用的端口\n            &#125;\n            return code\n          &#125;,\n        &#125;,\n      ],\n    &#125;,\n  &#125;,\n&#125;)\nReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&#39;root-main&#39;)) &#x2F;&#x2F; 这里index.html里的root div最好换个名字（root-main），以免和子应用的冲突\n复制代码</code></pre>\n\n<h2 id=\"4、路由配置中增加一个子应用的路由\"><a href=\"#4、路由配置中增加一个子应用的路由\" class=\"headerlink\" title=\"4、路由配置中增加一个子应用的路由\"></a>4、路由配置中增加一个子应用的路由</h2><p>这里不需要每个页面加一个路由<br>比如，子应用有 order&#x2F;page1 和 order&#x2F;page2 这两个路由，这里只需要添加一个childApp（这个是自己起名的），然后主应用配置菜单的时候，配置 childApp#&#x2F;order&#x2F;page1 和 childApp#&#x2F;order&#x2F;page2 这两个菜单就可以了</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  ...\n  &#x2F;&#x2F; 子应用1\n  &#123;\n    path: &#39;childApp&#39;,\n    element: () &#x3D;&gt; import(&#39;@&#x2F;pages&#x2F;childApp&#39;),\n  &#125;,\n  ...\n复制代码</code></pre>\n\n<h2 id=\"5、-x2F-pages-x2F-childApp-x2F-index-jsx\"><a href=\"#5、-x2F-pages-x2F-childApp-x2F-index-jsx\" class=\"headerlink\" title=\"5、&#x2F;pages&#x2F;childApp&#x2F;index.jsx\"></a>5、&#x2F;pages&#x2F;childApp&#x2F;index.jsx</h2><p>因为React不支持自定义事件，所以我们需要引入一个polyfill。<br><code>在&lt;micro-app&gt;标签所在的文件顶部</code>添加polyfill，注释也要复制。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;** @jsxRuntime classic *&#x2F;\n&#x2F;** @jsx jsxCustomEvent *&#x2F;\nimport jsxCustomEvent from &#39;@micro-zoe&#x2F;micro-app&#x2F;polyfill&#x2F;jsx-custom-event&#39; &#x2F;&#x2F; \n\nfunction Index() &#123;\n  &#x2F;&#x2F; name(必传)：应用名称\n  &#x2F;&#x2F; url(必传)：应用地址，会被自动补全为http:&#x2F;&#x2F;localhost:3000&#x2F;index.html\n  &#x2F;&#x2F; baseroute(可选)：基座应用分配给子应用的基础路由，就是上面的 &#96;&#x2F;my-page&#96;\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;子应用&lt;&#x2F;h1&gt;\n      &lt;micro-app name&#x3D;&quot;app1&quot; url&#x3D;&quot;http:&#x2F;&#x2F;localhost:8052&#x2F;&quot; baseroute&#x3D;&quot;&#x2F;childApp&quot;&gt;&lt;&#x2F;micro-app&gt;\n    &lt;&#x2F;div&gt;\n  )\n&#125;\nexport default Index\n复制代码</code></pre>\n\n<h1 id=\"子应用\"><a href=\"#子应用\" class=\"headerlink\" title=\"子应用\"></a>子应用</h1><h2 id=\"webpack-config-devServer增加headers支持跨域\"><a href=\"#webpack-config-devServer增加headers支持跨域\" class=\"headerlink\" title=\"webpack.config devServer增加headers支持跨域\"></a>webpack.config devServer增加headers支持跨域</h2><p>webpack.config.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  devServer: &#123;\n    headers: &#123;\n      &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n    &#125;,\n  &#125;,\n复制代码</code></pre>\n\n<p>chainWebpack</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  config.devServer.headers(&#123;\n    &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n  &#125;)\n复制代码</code></pre>\n\n<h2 id=\"publicPath\"><a href=\"#publicPath\" class=\"headerlink\" title=\"publicPath\"></a>publicPath</h2><p><strong>如果自动补全失败，可以采用运行时publicPath方案解决。</strong></p>\n<p>这是由webpack提供的功能，会在运行时动态设置webpack.publicPath</p>\n<p><strong>步骤1:</strong>  在子应用src目录下创建名称为<code>public-path.js</code>的文件，并添加如下内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; __MICRO_APP_ENVIRONMENT__和__MICRO_APP_PUBLIC_PATH__是由micro-app注入的全局变量\nif (window.__MICRO_APP_ENVIRONMENT__) &#123;\n  &#x2F;&#x2F; eslint-disable-next-line\n  __webpack_public_path__ &#x3D; window.__MICRO_APP_PUBLIC_PATH__\n&#125;复制代码Error复制成功\n复制代码</code></pre>\n\n<p><strong>步骤2:</strong>  在子应用入口文件的<code>最顶部</code>引入<code>public-path.js</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; entry\nimport &#39;.&#x2F;public-path&#39;复制代码Error复制成功\n复制代码</code></pre>\n\n<p>子应用配置完毕。</p>\n<h1 id=\"数据通信\"><a href=\"#数据通信\" class=\"headerlink\" title=\"数据通信\"></a>数据通信</h1><p>我这里主要是实现2种场景：<br>1、共享token和login的userInfo<br>2、子应用token失效要通知基座应用，清除token、userInfo并跳转登录页</p>\n<p>更多通信方式：<a href=\"https://link.juejin.cn/?target=https://cangdu.org/micro-app/docs.html%23/zh-cn/data\" title=\"https://cangdu.org/micro-app/docs.html#/zh-cn/data\">cangdu.org&#x2F;micro-app&#x2F;d…</a></p>\n<h2 id=\"1、共享token和login的userInfo\"><a href=\"#1、共享token和login的userInfo\" class=\"headerlink\" title=\"1、共享token和login的userInfo\"></a>1、共享token和login的userInfo</h2><h3 id=\"基座应用setGlobalData\"><a href=\"#基座应用setGlobalData\" class=\"headerlink\" title=\"基座应用setGlobalData\"></a>基座应用<code>setGlobalData</code></h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import microApp from &#39;@micro-zoe&#x2F;micro-app&#39;\n\n...\nmicroApp.setGlobalData(&#123; userInfo: login.userInfo &#125;)\n...\n复制代码</code></pre>\n\n<h3 id=\"子应用获取数据\"><a href=\"#子应用获取数据\" class=\"headerlink\" title=\"子应用获取数据\"></a>子应用获取数据</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">const globalData &#x3D; window.microApp?.getGlobalData() &#x2F;&#x2F; 返回全局数据\nconsole.log(&#39;子应用拿到的 globalData&#39;, globalData);\n复制代码</code></pre>\n\n<h2 id=\"2、子应用token失效的情况\"><a href=\"#2、子应用token失效的情况\" class=\"headerlink\" title=\"2、子应用token失效的情况\"></a>2、子应用token失效的情况</h2><h3 id=\"子应用microApp-dispatch\"><a href=\"#子应用microApp-dispatch\" class=\"headerlink\" title=\"子应用microApp.dispatch\"></a>子应用<code>microApp.dispatch</code></h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 子应用token失效的时候 触发：\nfunction handleTokenFail() &#123;\n  console.log(&#39;子应用token 失效&#39;)\n  window.microApp?.dispatch(&#123; type: &#39;token失效&#39; &#125;) &#x2F;&#x2F; 关键代码\n&#125;\n复制代码</code></pre>\n\n<h3 id=\"基座应用监听\"><a href=\"#基座应用监听\" class=\"headerlink\" title=\"基座应用监听\"></a>基座应用监听</h3><p>入口文件增加 <code>microApp.addDataListener</code> 代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import ReactDOM from &#39;react-dom&#39;\nimport App from &#39;.&#x2F;App&#39;\nimport microApp from &#39;@micro-zoe&#x2F;micro-app&#39;\n\nmicroApp.start(&#123;\n  &#x2F;&#x2F; sockjs-node报错 要不然会一直刷新\n  plugins: &#123;\n    modules: &#123;\n      app1: [\n        &#123;\n          loader(code) &#123;\n            if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;development&#39; &amp;&amp; code.indexOf(&#39;sockjs-node&#39;) &gt; -1) &#123;\n              code &#x3D; code.replace(&#39;window.location.port&#39;, 8052)\n            &#125;\n            return code\n          &#125;,\n        &#125;,\n      ],\n    &#125;,\n  &#125;,\n&#125;)\n\nfunction dataListener(data) &#123;\n  console.log(&#39;来自子应用my-app的数据&#39;, data)\n&#125;\n\n&#x2F;**\n * 绑定监听函数\n * appName: 应用名称\n * dataListener: 绑定函数\n * autoTrigger: 在初次绑定监听函数时如果有缓存数据，是否需要主动触发一次，默认为false\n *&#x2F;\nmicroApp.addDataListener(&#39;app1&#39;, dataListener)\n\n&#x2F;&#x2F; &#x2F;&#x2F; 解绑监听my-app子应用的函数\n&#x2F;&#x2F; microApp.removeDataListener(appName: string, dataListener: Function)\n\n&#x2F;&#x2F; &#x2F;&#x2F; 清空所有监听appName子应用的函数\n&#x2F;&#x2F; microApp.clearDataListener(appName: string)\n\nReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&#39;root-main&#39;))\n复制代码</code></pre>\n\n<p>或者<code>microApp.addDataListener</code>和<code>microApp.removeDataListener</code>也可以写在最外面的layout里</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实大部分的用法和修改，官方文档都已经介绍的非常详细了，这里只是结合自己的项目的一些修改，可以看到micro-app相比qiankun对项目入侵非常少，而且涉及到的api很少且更容易理解。<br>后面会持续关注：）</p>\n","text":"介绍：基座应用react 文章发布时，涉及到的依赖包版本： &#123; &quot;@micro-zoe&#x2F;micro-app&quot;: &quot;^0.8.4&quot;, &#125; 复制代码 文章默认您已经大致浏览过micro-app官方文档，所以最好请先...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%EF%BC%9A\"><span class=\"toc-text\">介绍：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%BA%A7%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">基座应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BF%AE%E6%94%B9%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E4%B8%BAhistory\"><span class=\"toc-text\">1、修改路由模式为history</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#webpack%E6%90%AD%E5%BB%BA%E7%9A%84\"><span class=\"toc-text\">webpack搭建的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E6%98%AFumi%E7%9A%84%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">如果是umi的项目</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%89%E8%A3%85-micro-zoe-x2F-micro-app\"><span class=\"toc-text\">2、安装@micro-zoe&#x2F;micro-app</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3、入口文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%AD%90%E5%BA%94%E7%94%A8%E7%9A%84%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">4、路由配置中增加一个子应用的路由</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81-x2F-pages-x2F-childApp-x2F-index-jsx\"><span class=\"toc-text\">5、&#x2F;pages&#x2F;childApp&#x2F;index.jsx</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%90%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">子应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#webpack-config-devServer%E5%A2%9E%E5%8A%A0headers%E6%94%AF%E6%8C%81%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">webpack.config devServer增加headers支持跨域</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#publicPath\"><span class=\"toc-text\">publicPath</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">数据通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%85%B1%E4%BA%ABtoken%E5%92%8Clogin%E7%9A%84userInfo\"><span class=\"toc-text\">1、共享token和login的userInfo</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%BA%A7%E5%BA%94%E7%94%A8setGlobalData\"><span class=\"toc-text\">基座应用setGlobalData</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E5%BA%94%E7%94%A8%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">子应用获取数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AD%90%E5%BA%94%E7%94%A8token%E5%A4%B1%E6%95%88%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">2、子应用token失效的情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E5%BA%94%E7%94%A8microApp-dispatch\"><span class=\"toc-text\">子应用microApp.dispatch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%BA%A7%E5%BA%94%E7%94%A8%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">基座应用监听</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"彻底搞懂nginx","uid":"efdc9b79c944d790c755000a59863fa6","slug":"彻底搞懂nginx","date":"2022-10-14T11:56:14.000Z","updated":"2023-04-21T10:48:36.783Z","comments":true,"path":"api/articles/彻底搞懂nginx.json","keywords":null,"cover":[],"text":"什么是nginx？nginx是一个开源可靠的HTTP中间件代理服务。 配置目录主配置文件&#x2F;etc&#x2F;nginx&#x2F;nginx.conf配置文件基本结构： nginx 开启，关闭，重启开启 systemctl start nginx 关闭 nginx -s...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"微前端实战篇","uid":"a110b92c4e47b4fc49cc33cb7f9c3765","slug":"微前端实战篇","date":"2022-09-15T15:16:31.000Z","updated":"2023-04-21T09:51:24.739Z","comments":true,"path":"api/articles/微前端实战篇.json","keywords":null,"cover":[],"text":"一.为什么需要微前端?我们通过3W(what,why,how)的方式来讲解微前端 What?什么是微前端? 微前端就是将不同的功能按照不同的维度拆分成多个子应用。通过主应用来加载这些子应用。 微前端的核心在于拆, 拆完后在合! Why?为什么去使用他? 不同团队间开发同一个应用技...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}