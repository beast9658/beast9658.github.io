{"title":"代码被revert,你pull了master,代码没了,咋找回来?","uid":"882b2e906d6e98c8bb89a8ff1e500dbe","slug":"代码被revert","date":"2021-11-21T13:36:54.000Z","updated":"2023-04-21T09:09:42.092Z","comments":true,"path":"api/articles/代码被revert.json","keywords":null,"cover":[],"content":"<h2 id=\"问题场景\"><a href=\"#问题场景\" class=\"headerlink\" title=\"问题场景\"></a>问题场景</h2><p>实际工作中，在上线时，你的新功能代码都是在gitlab上提交merge to master的请求，拥有merge权限的领导通过后，你的代码才合到master。好，QA开始上线了你的代码，这时 啪，啪，报警了，代码有问题。领导revert了你的代码以保证master分支的正确。这时，你的分支pull了master后，你发现你分支上的新功能代码都没有了！！咋找回来</p>\n<p>本文从实战角度来解决这个问题</p>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><ol>\n<li>假设你已经有了一个<code>git项目: test-git</code>，并且有两个分支: <code>master，test</code></li>\n</ol>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>在<code>test</code>分支，你创建了一个文件<code>welcome</code>，文本:<code>hi git</code>。并<code>git commit -m &#39;测试git revert&#39;</code>提交</p>\n<p>当前，<code>master，test</code>分支的内容分别如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;tt&#x2F;test-git&gt;&gt;master $ ll\ndrwxr-xr-x  3 tt  staff    96B  5  8 20:54 test\n-rw-r--r--  1 tt  staff    16B  8  1 19:55 test3.log\n复制代码</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;tt&#x2F;test-git&gt;&gt;test $ ll\ndrwxr-xr-x  3 tt  staff    96B  5  8 20:54 test\n-rw-r--r--  1 tt  staff    16B  8  1 19:55 test3.log\n-rw-r--r--  1 tt  staff     7B  8  1 20:19 welcome\n\n~&#x2F;tt&#x2F;test-git&gt;&gt;test $ cat welcome\nhi git\n复制代码</code></pre>\n\n<p>现在，向<code>master</code>提交<code>merge to master</code>请求，如下图 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcd9a425d2e44d16801af56e13020286~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>领导<code>merge</code>后开始上线，假设线上出现问题，领导<code>revert</code>了这次提交的代码。如下图 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d8bc0999b46479497bc5ffd7d224676~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>接着你要查看问题，所以你会本地操作，回到你的代码分支，执行<code>git merge origin/master</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;tt&#x2F;test-git&gt;&gt;test $ git merge origin&#x2F;master\nUpdating 670adc2..d3961f7\nFast-forward\n welcome | 1 -\n 1 file changed, 1 deletion(-)\n delete mode 100644 welcome\n~&#x2F;tt&#x2F;test-git&gt;&gt;test $ ll\ntotal 8\ndrwxr-xr-x  3 tt  staff    96B  5  8 20:54 test\n-rw-r--r--  1 tt  staff    16B  8  1 19:55 test3.log\n复制代码</code></pre>\n\n<p>此时，你发现你提交的代码没有了。<code>welcome</code>文件不见了，咋办</p>\n<p>咋找回来这些代码呢？下面开始找回操作</p>\n<ol>\n<li><code>git log</code>找到领导<code>revert</code>你代码的那个<code>commit id</code>，这里<code>commit id</code>是<code>50a06845da879ab76e6fdd55dce923826742dcb2</code>。如下图三个<code>commit</code>的说明 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3aefc8590da49dbbbdd5e17a41abdb8~tplv-k3u1fbpfcp-zoom-1.image\"></li>\n<li><code>git revert --no-commit 50a06845da879ab76e6fdd55dce923826742dcb2</code></li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c7b978f306c444f824bbf0dd7f91100~tplv-k3u1fbpfcp-zoom-1.image\"> 你的代码已经回来了，然后就没有然后了，简单吧</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>找到领导<code>revert</code>你代码的<code>commit id</code>，然后<code>git revert --no-commit commit id</code></p>\n<p>一句话总结：把之前<code>revert</code>的那条<code>commit</code>再<code>revert</code>一下</p>\n","text":"问题场景实际工作中，在上线时，你的新功能代码都是在gitlab上提交merge to master的请求，拥有merge权限的领导通过后，你的代码才合到master。好，QA开始上线了你的代码，这时 啪，啪，报警了，代码有问题。领导revert了你的代码以保证master分支的正...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">问题场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">条件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">实战</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何优雅地在 React 中使用TypeScript","uid":"045012ff9de07809836ee76fe6879635","slug":"如何优雅地在 React 中使用TypeScript","date":"2021-12-18T13:48:34.000Z","updated":"2023-04-21T09:26:55.667Z","comments":true,"path":"api/articles/如何优雅地在 React 中使用TypeScript.json","keywords":null,"cover":[],"text":"一、组件声明在React中，组件的声明方式有两种：函数组件和类组件， 来看看这两种类型的组件声明时是如何定义TS类型的。 1. 类组件类组件的定义形式有两种：React.Component&lt;P, S=&#123;&#125;&gt; 和 React.PureComponen...","link":"","photos":[],"count_time":{"symbolsCount":"48k","symbolsTime":"44 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"分片加载超长列表渲染","uid":"22a53fdfd136fdbe0a4b16b8cca4b9ec","slug":"分片加载超长列表渲染","date":"2021-11-03T13:50:32.000Z","updated":"2023-04-21T09:05:05.486Z","comments":true,"path":"api/articles/分片加载超长列表渲染.json","keywords":null,"cover":null,"text":"很早以前就有面试问超长列表如何优化，那时候觉得一般前端不会有这种功能，有也是分页，也就没有去关注。今天分享一个超长列表渲染的优化方法，分片加载，现在几乎也都不会用了，但是还是要知道这个东西。 先明确eventloop的机制，js是单线程的，当你第一个主线程执行过程中，遇到宏任务就...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}