{"title":"ahooks 整体架构源码解析","uid":"af425ac0390f0c4b127b06f565469692","slug":"ahooks 整体架构源码解析","date":"2022-01-13T14:06:14.000Z","updated":"2023-04-21T09:30:56.535Z","comments":true,"path":"api/articles/ahooks 整体架构源码解析.json","keywords":null,"cover":[],"content":"<h2 id=\"React-hooks-utils-库\"><a href=\"#React-hooks-utils-库\" class=\"headerlink\" title=\"React hooks utils 库\"></a>React hooks utils 库</h2><p>自从 React 16.8 版本推出 React hooks，越来越多的项目使用 Function Component。React hooks utils 库随即诞生，它主要解决的两个问题如下：</p>\n<ul>\n<li>公共逻辑的抽象。</li>\n<li>解决 React hooks 存在的弊端，比如闭包等。</li>\n</ul>\n<p>那现在社区有哪些比较优秀的 React Hooks utils 库呢？</p>\n<p><a href=\"https://link.juejin.cn/?target=https://github.com/streamich/react-use\" title=\"https://github.com/streamich/react-use\">react-use</a> 是社区比较活跃的 React hooks utils 库，它的 star 数达到了 <code>29.6k</code>。它的功能非常强大，拥有的 hooks 已经 100+。假如你需要功能比较齐全，可以考虑选择 react-use。</p>\n<p>如果不需要非常齐全的功能，只需要一些常见的功能，react-use 可能会稍微冗余了，可以考虑我们今天的主角——<a href=\"https://link.juejin.cn/?target=https://ahooks.js.org/zh-CN/guide\" title=\"https://ahooks.js.org/zh-CN/guide\">ahooks</a>，目前它的 star 数为 <code>9.2k</code>，也算是社区比较活跃。</p>\n<h2 id=\"ahooks\"><a href=\"#ahooks\" class=\"headerlink\" title=\"ahooks\"></a>ahooks</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>官方介绍如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ahooks，发音 [eɪ hʊks]，是一套高质量可靠的 React Hooks 库。在当前 React 项目研发过程中，一套好用的 React Hooks 库是必不可少的，希望 ahooks 能成为您的选择。</p></blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>它具有如下特点：</p>\n<ul>\n<li><p>易学易用。</p>\n</li>\n<li><p>支持 SSR。</p>\n<ul>\n<li>将访问 DOM&#x2F;BOM 的方法放在 useEffect 中（服务端不会执行），避免服务端执行时报错。</li>\n<li>源码中可以看到很多 <code>isBrowser</code> 的判断，主要是区分开浏览器环境和服务器环境。</li>\n</ul>\n</li>\n<li><p>对输入输出函数做了特殊处理，且避免闭包问题。</p>\n<ul>\n<li>输入的函数，永远都是使用最新的一份。这个是通过 <code>useRef</code> 进行实现。</li>\n<li>输出函数，地址都是不会变化的，这个是通过 <code>useMemoizedFn</code>（ahooks 封装的）实现的，其实现也是通过 <code>useRef</code> 实现。后面我们会提到。</li>\n</ul>\n</li>\n<li><p>包含大量提炼自业务的高级 Hooks。</p>\n</li>\n<li><p>包含丰富的基础 Hooks。</p>\n</li>\n<li><p>使用 TypeScript 构建，提供完整的类型定义文件。可以学习一些 TypeScript 的技巧。</p>\n</li>\n</ul>\n<h3 id=\"hooks-种类\"><a href=\"#hooks-种类\" class=\"headerlink\" title=\"hooks 种类\"></a>hooks 种类</h3><p>ahooks 基于 UI、SideEffect、LifeCycle、State、DOM 等分类提供了常用的 Hooks。如下所示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe05b44a197d418db9215ee5cc091c55~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"图来自网络，侵删\"></p>\n<h2 id=\"ahooks-整体架构\"><a href=\"#ahooks-整体架构\" class=\"headerlink\" title=\"ahooks 整体架构\"></a>ahooks 整体架构</h2><h3 id=\"项目启动\"><a href=\"#项目启动\" class=\"headerlink\" title=\"项目启动\"></a>项目启动</h3><p>我们先从 ahooks 中 folk <a href=\"https://link.juejin.cn/?target=https://github.com/GpingFeng/hooks\" title=\"https://github.com/GpingFeng/hooks\">一份</a>，clone 下来。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn run init\nyarn start\n复制代码</code></pre>\n\n<p>如果你能成功跑起服务，就会看到和官方文档一模一样的页面。</p>\n<h3 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h3><p>从仓库的根目录的 package.json 中可以得到以下信息。</p>\n<ul>\n<li>文档是使用 <code>dumi</code>。是一款为组件开发场景而生的文档工具。</li>\n<li>该项目是一个 <code>monoRepo</code>。它的项目管理是通过 <a href=\"https://link.juejin.cn/?target=https://www.lernajs.cn/\" title=\"https://www.lernajs.cn/\">lerna</a> 进行管理的。</li>\n<li>单元测试是通过 jest 实现。</li>\n</ul>\n<p>它的目录结构中，可以看到 docs 中存放仓库公共文档。packages 中存放两个包，hooks 和 use-url-state。整体的结构跟 dumi 中给出的 lerna 项目的结构相似。其中每个包下面的每个组件都可以书写对应的文档，不一样的是，hooks 中每个组件多了 <code>__tests__</code> 文件夹，这个是用来写单元测试的。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a07043c78cf140d1a114374d8d325eb6~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"跟 hooks 相似的组织形式\"></p>\n<p>可以用以下一张图，大致总结一下 ahooks 的工程架构：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9cd283a56e44107ab5382ffcf20c082~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<h3 id=\"hooks\"><a href=\"#hooks\" class=\"headerlink\" title=\"hooks\"></a>hooks</h3><p>刚刚也提到，ahooks 是采用了 <code>monoRepo</code> 的方式，我们的源码都是在 packages 中，我们来看下 hooks。先看 <code>packages/hooks/package.json</code>。另外要使用 useUrlState 这个 hook，需要独立安装 <code>@ahooksjs/use-url-state</code>，其源码在 <code>packages/use-url-state</code> 中。我理解官方的用意应该是这个库依赖于 react-router，可能有一些项目不需要用到，把它提出来有助于减少包的大小。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i @ahooksjs&#x2F;use-url-state -S\n复制代码</code></pre>\n\n<p>回到 <code>packages/hooks</code>。重点关注一下 dependencies 和 peerDependencies。可以看到其实它内部还是使用了一些其他的工具库的，比如 lodash（估计是避免重复造轮子，但感觉这样会导致包会变大）。后面我们也会对这些工具库做一个探索。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;dependencies&quot;: &#123;\n  &quot;@types&#x2F;js-cookie&quot;: &quot;^2.x.x&quot;,\n  &quot;ahooks-v3-count&quot;: &quot;^1.0.0&quot;,\n  &quot;dayjs&quot;: &quot;^1.9.1&quot;,\n  &quot;intersection-observer&quot;: &quot;^0.12.0&quot;,\n  &quot;js-cookie&quot;: &quot;^2.x.x&quot;,\n  &quot;lodash&quot;: &quot;^4.17.21&quot;,\n  &quot;resize-observer-polyfill&quot;: &quot;^1.5.1&quot;,\n  &quot;screenfull&quot;: &quot;^5.0.0&quot;\n&#125;,\n&quot;peerDependencies&quot;: &#123;\n  &quot;react&quot;: &quot;^16.8.0 || ^17.0.0 || ^18.0.0&quot;\n&#125;,\n复制代码</code></pre>\n\n<p>另外解释下 peerDependencies。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>peerDependencies</code> 的目的是提示宿主环境去安装满足插件 <code>peerDependencies</code> 所指定依赖的包，然后在插件 <code>import</code> 或者 <code>require</code> 所依赖的包的时候，永远都是引用宿主环境统一安装的 <code>npm</code> 包，最终解决插件与所依赖包不一致的问题。这里的宿主环境一般指的就是我们自己的项目本身了。</p></blockquote>\n<p>这对于封装 npm 包非常重要。当你写的包 a 里面依赖另一个包 b，而这个包 b 是引用这个包 a 的业务的常用的包的时候，建议写在 <code>peerDependencies</code> 里，避免重复下载&#x2F;多个版本共存。</p>\n","text":"React hooks utils 库自从 React 16.8 版本推出 React hooks，越来越多的项目使用 Function Component。React hooks utils 库随即诞生，它主要解决的两个问题如下： 公共逻辑的抽象。 解决 React hooks...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-hooks-utils-%E5%BA%93\"><span class=\"toc-text\">React hooks utils 库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ahooks\"><span class=\"toc-text\">ahooks</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hooks-%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">hooks 种类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ahooks-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">ahooks 整体架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">项目启动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">整体结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hooks\"><span class=\"toc-text\">hooks</span></a></li></ol></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"面试题笔记——REACT篇(上)","uid":"0b7c0bb77310ab4c9c1a186c882be3d6","slug":"面试题笔记——REACT篇(上)","date":"2022-04-08T06:06:03.000Z","updated":"2023-04-21T09:34:53.508Z","comments":true,"path":"api/articles/面试题笔记——REACT篇(上).json","keywords":null,"cover":[],"text":" 一、组件基础1. React 事件机制&lt;div onClick&#x3D;&#123;this.handleClick.bind(this)&#125;&gt;点我&lt;&#x2F;div&gt; 复制代码 React并不是将click事件绑定到了div的真实DOM上，...","link":"","photos":[],"count_time":{"symbolsCount":"61k","symbolsTime":"56 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"如何优雅地在 React 中使用TypeScript","uid":"045012ff9de07809836ee76fe6879635","slug":"如何优雅地在 React 中使用TypeScript","date":"2021-12-18T13:48:34.000Z","updated":"2023-04-21T09:26:55.667Z","comments":true,"path":"api/articles/如何优雅地在 React 中使用TypeScript.json","keywords":null,"cover":[],"text":"一、组件声明在React中，组件的声明方式有两种：函数组件和类组件， 来看看这两种类型的组件声明时是如何定义TS类型的。 1. 类组件类组件的定义形式有两种：React.Component&lt;P, S=&#123;&#125;&gt; 和 React.PureComponen...","link":"","photos":[],"count_time":{"symbolsCount":"48k","symbolsTime":"44 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}