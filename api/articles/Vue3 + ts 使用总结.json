{"title":"Vue3 + ts 使用总结","uid":"570b4b67776f5ca65289af79d788c1db","slug":"Vue3 + ts 使用总结","date":"2023-02-22T16:24:19.000Z","updated":"2023-04-21T10:55:13.718Z","comments":true,"path":"api/articles/Vue3 + ts 使用总结.json","keywords":null,"cover":[],"content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da056d54340b485a9978d72ac897ec88~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"Vue3 + setup + ts 使用总结\"></p>\n<h1 id=\"阅读vue的英文官网\"><a href=\"#阅读vue的英文官网\" class=\"headerlink\" title=\"阅读vue的英文官网\"></a>阅读vue的英文官网</h1><p>Vue的中文官网质量比起Vue的英文官网，你会发现质量有点差距，不过这种情况很容易理解，因为Vue是服务于全球的开源项目之一。</p>\n<p>因此，作为程序员，学好英语是提高生产力的重要因素。</p>\n<p>对于开发者来说，掌握英语是很有必要的，因为它是全球通用的编程语言之一。在学习和掌握新技术、阅读文档、与其他程序员交流和协作时，能够流利地使用英语将会使工作更加高效和便捷。</p>\n<p>总之，学好英语是程序员必备的技能之一，它将为我们的职业发展和成长带来重要的帮助和机会。</p>\n<p>所以程序员的第一生产力还是<strong>英语</strong>，重要的话说三遍，英语，英语，还是英语！</p>\n<p>另外不管学什么都要去获取第一手资料，不要看别人啃剩下的东西，直接去看<a href=\"https://link.juejin.cn/?target=https://vuejs.org/guide/essentials/application.html%23app-configurations\" title=\"https://vuejs.org/guide/essentials/application.html#app-configurations\">英文官网</a></p>\n<h1 id=\"vite初始化项目\"><a href=\"#vite初始化项目\" class=\"headerlink\" title=\"vite初始化项目\"></a>vite初始化项目</h1><ol>\n<li>pnpm create vite</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/323bec716250417cba6cbeca304212ed~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>选择vue，再选择typescript</li>\n<li>启动项目</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  cd test1\n  pnpm install\n  pnpm run dev\n复制代码</code></pre>\n\n<p>这里选择pnpm，pnpm相对npm和yarn做了一些改进，感兴趣的可以去搜下，切换的心智成本也不高。</p>\n<h1 id=\"vscode的vue代码片段\"><a href=\"#vscode的vue代码片段\" class=\"headerlink\" title=\"vscode的vue代码片段\"></a>vscode的vue代码片段</h1><p>根据自己的使用习惯，设置vscode的vue代码片段，推荐使用<a href=\"https://link.juejin.cn/?target=https://snippet-generator.app\" title=\"https://snippet-generator.app\">snippet-generator.app</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;vue3模版&quot;: &#123;\n\n&quot;prefix&quot;: &quot;vue3&quot;,\n\n&quot;body&quot;: [\n\n   &quot;&lt;template&gt;&quot;,\n\n       &quot; &lt;div class&#x3D;&#39;$&#123;1:box&#125;&#39;&gt;&lt;&#x2F;div&gt;&quot;,\n\n   &quot;&lt;&#x2F;template&gt;&quot;,\n\n   &quot; &quot;,\n\n   &quot;&lt;script setup lang&#x3D;&#39;ts&#39;&gt;&quot;,\n\n   &quot; import &#123;ref,reactive&#125; from &quot;vue&quot;;&quot;,\n\n   &quot; $&#123;3&#125;&quot;,\n\n   &quot;&lt;&#x2F;script&gt;&quot;,\n\n   &quot; &quot;,\n\n   &quot;&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;&quot;,\n\n   &quot; .$&#123;2:box&#125; &#123;&quot;,\n\n   &quot; &#125;&quot;,\n\n   &quot;&lt;&#x2F;style&gt;&quot;\n\n],\n\n&quot;description&quot;: &quot;vue3模版&quot;\n\n&#125;\n复制代码</code></pre>\n\n<p>另外vscode的不仅可以设置vue的代码片段，理论上你在vscode上写的任何代码，都可以设置成代码片段，方便自己以后使用。</p>\n<p>这个自己根据自己的个人习惯，自己挖掘。</p>\n<p>另外因为使用vscode开发vue的typescript项目，vscode还需要安装对应的插件，比如TypeScript Vue Plugin</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0859faff8aac481ba9c7df363da5bc71~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<p>这里随着chatGpt的大火，你会发现你写代码的方式会慢慢改变，现在一些有一些尝试，比如Github Compilot</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e28b8ab0081547829509cf84d94b2ef5~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<p>Github Compilot 可以根据你写的代码，自动学习，然后当你写其它代码的时候，会自动给出你提示，如果你去试用，你会发现太牛逼了😄。</p>\n<p>另外在工作中，一些重复的工作，尽量想着如何去优化，去节省自己的时间，比如一些模版代码的编写，一些增删改查的工作，能用工具就用工具。</p>\n<p>比如如果你使用umi，你会发现很多重复的工作其实都给你简化成了一个命令，比如创建页面，比如初始化prettier等。</p>\n<p>总之就是能用工具处理的，就用工具处理，如果自己觉得做了，都不会提升自己，就想办法自动化去处理。</p>\n<h1 id=\"Vue组件引入\"><a href=\"#Vue组件引入\" class=\"headerlink\" title=\"Vue组件引入\"></a>Vue组件引入</h1><p>当使用setup的时候，组件直接引入就可以了，不需要再自己手动注册.</p>\n<p>下面就是直接把HelloWorld这个组件在App组件里边引入，直接使用就可以了，不需要再像以前那样注册。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\nimport HelloWorld from &quot;.&#x2F;components&#x2F;HelloWorld.vue&quot;;\n&lt;&#x2F;script&gt;\n\n&lt;template&gt;\n  &lt;HelloWorld msg&#x3D;&quot;Vite + Vue&quot; &#x2F;&gt;\n&lt;&#x2F;template&gt;\n复制代码</code></pre>\n\n<p>如果不使用setup，你会发现引入一个组件，还是比较麻烦的，可以对比一下代码，自己感受一下😄</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;HelloWorld msg&#x3D;&quot;Hello, Vue 3!&quot; &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\nimport &#123; defineComponent &#125; from &#39;vue&#39;\nimport HelloWorld from &#39;.&#x2F;HelloWorld.vue&#39;\n\nexport default defineComponent(&#123;\n  components: &#123;\n    HelloWorld\n  &#125;\n&#125;)\n&lt;&#x2F;script&gt;\n复制代码</code></pre>\n\n<h1 id=\"defineProps的使用\"><a href=\"#defineProps的使用\" class=\"headerlink\" title=\"defineProps的使用\"></a>defineProps的使用</h1><p>defineProps 在有两种定义方式，你可以任意选择其中一种，但是不能两种都使用</p>\n<p>官方说明</p>\n<p>However, it is usually more straightforward to define props with pure types via a generic type argument:</p>\n<p>第一种”runtime declaration”</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const props &#x3D; defineProps(&#123;\n  foo: &#123; type: String, required: true &#125;,\n  bar: Number,\n&#125;);\n复制代码</code></pre>\n\n<p>第二种”type-based declaration”</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script setup lang&#x3D;&quot;ts&quot;&gt; \n    interface Props &#123; \n        foo: string \n        bar?: number \n    &#125; \n    const props &#x3D; defineProps&lt;Props&gt;() \n&lt;&#x2F;script&gt;\n复制代码</code></pre>\n\n<p>这两种定义方式没多大区别，可以任意选择一种使用，但是不能两种同时使用。</p>\n<p>同时我们有些情况下，也希望props能够有默认值，可以如下使用：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n&#x2F;&#x2F; 第二种带默认值props\nexport interface ChildProps &#123;\n  foo: string\n  bar?: number\n&#125;\nconst props &#x3D; withDefaults(defineProps&lt;ChildProps&gt;(), &#123;\n   foo: &quot;1qsd&quot;\n   bar?: 3\n&#125;)\n\n复制代码</code></pre>\n\n<p>当然如果遇到特别复杂的对象，需要使用ts定义的时候，可以这样使用：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\ninterface Book &#123;\n  title: string;\n  author: string;\n  year: number;\n&#125;\n\nconst props &#x3D; defineProps&lt;&#123;\n  book: Book;\n&#125;&gt;();\n&lt;&#x2F;script&gt;\n复制代码</code></pre>\n\n<p>或者使用runtime那种方式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import type &#123; PropType &#125; from &#39;vue&#39;\n\ninterface Book &#123;\n  title: string;\n  author: string;\n  year: number;\n&#125;\n\nconst props &#x3D; defineProps(&#123;\n  book: Object as PropType&lt;Book&gt;\n&#125;)\n\n复制代码</code></pre>\n\n<h1 id=\"defineEmits和defineProps获取父组件传过来值和事件\"><a href=\"#defineEmits和defineProps获取父组件传过来值和事件\" class=\"headerlink\" title=\"defineEmits和defineProps获取父组件传过来值和事件\"></a>defineEmits和defineProps获取父组件传过来值和事件</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">\n&#x2F;&#x2F; 第一种获取事件方法\nconst emit &#x3D; defineEmits&lt;&#123;\n  (e: &#39;change&#39;, id: number): void\n  (e: &#39;update&#39;, value: string): void\n&#125;&gt;()\n\n&#x2F;&#x2F; 第二种获取事件方法\nconst emit &#x3D; defineEmits([&quot;dosth&quot;])\n\n复制代码</code></pre>\n\n<h1 id=\"ref和reactive\"><a href=\"#ref和reactive\" class=\"headerlink\" title=\"ref和reactive\"></a>ref和reactive</h1><p>ref一般用于基本的数据类型，比如string，boolean</p>\n<p>reactive一般用于对象</p>\n<p>使用reactive的注意事项：</p>\n<ol>\n<li>reactive不能用于string，number，boolean</li>\n</ol>\n<p>vue官方网站说明如下： It cannot hold <a href=\"https://link.juejin.cn/?target=https://developer.mozilla.org/en-US/docs/Glossary/Primitive\" title=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive types</a> such as <code>string</code>, <code>number</code> or <code>boolean</code></p>\n<ol start=\"2\">\n<li>不能修改reactive设置的值</li>\n</ol>\n<p>比如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let state &#x3D; reactive(&#123; count: 0 &#125;) \n&#x2F;&#x2F; the above reference (&#123; count: 0 &#125;) is no longer being tracked (reactivity connection &#x2F;&#x2F; is lost!) \n&#x2F;&#x2F; 这里state如果重新赋值以后，vue就不能双向绑定\nstate &#x3D; reactive(&#123; count: 1 &#125;)\n复制代码</code></pre>\n\n<p>ref的底层实现，其实也是调用的reactive实现的，有点类似react hooks的useState和useReducer；</p>\n<h1 id=\"使用useAttrs和useSlots\"><a href=\"#使用useAttrs和useSlots\" class=\"headerlink\" title=\"使用useAttrs和useSlots\"></a>使用useAttrs和useSlots</h1><p>useAttrs 可以获取父组件传过来的id和class等值。 useSlots 可以获得插槽的内容。 例子中，我们使用useAttrs获取父组件传过来的id和class，useSlots获取插槽的内容。</p>\n<p>父组件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;div class&#x3D;&quot;father&quot;&gt;&#123;&#123; fatherRef &#125;&#125;&lt;&#x2F;div&gt;\n\n    &lt;Child :fatherRef&#x3D;&quot;fatherRef&quot; @changeVal&#x3D;&quot;changeVal&quot; class&#x3D;&quot;btn&quot; id&#x3D;&quot;111&quot;&gt;\n\n        &lt;template #test1&gt;\n\n        &lt;div&gt;1223&lt;&#x2F;div&gt;\n\n        &lt;&#x2F;template&gt;\n\n    &lt;&#x2F;Child&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref &#125; from &quot;vue&quot;;\n\nimport Child from &quot;.&#x2F;Child.vue&quot;;\n\nconst fatherRef &#x3D; ref(&quot;1&quot;);\n\nfunction changeVal(val: string) &#123;\n\n    fatherRef.value &#x3D; val;\n\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.father &#123;\n\n    margin-top: 40px;\n\n    margin-bottom: 40px;\n\n&#125;\n\n.btn &#123;\n\n    font-size: 20px;\n\n    color: red;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n复制代码</code></pre>\n\n<p>子组件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;!-- &lt;div class&#x3D;&quot;child&quot;&gt;&#123;&#123; props.fatherRef &#125;&#125;&lt;&#x2F;div&gt; --&gt;\n\n    &lt;div v-bind&#x3D;&quot;attrs&quot;&gt;\n\n        &lt;slot name&#x3D;&quot;test1&quot;&gt;11&lt;&#x2F;slot&gt;\n\n        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;inputVal&quot; &#x2F;&gt;\n\n    &lt;&#x2F;div&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; computed, useAttrs, useSlots &#125; from &quot;vue&quot;;\n\nconst props &#x3D; defineProps&lt;&#123;\n\n    fatherRef: string;\n\n&#125;&gt;();\n\nconst emits &#x3D; defineEmits([&quot;changeVal&quot;]);\n\nconst slots &#x3D; useSlots();\n\nconst attrs &#x3D; useAttrs();\n\nconsole.log(122, attrs, slots);\n\nconst inputVal &#x3D; computed(&#123;\n\n    get() &#123;\n\n        return props.fatherRef;\n\n    &#125;,\n\n    set(val: string) &#123;\n\n        emits(&quot;changeVal&quot;, val);\n\n    &#125;,\n\n&#125;);\n\n&lt;&#x2F;script&gt;\n\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.child &#123;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<h1 id=\"使用自定义指令\"><a href=\"#使用自定义指令\" class=\"headerlink\" title=\"使用自定义指令\"></a>使用自定义指令</h1><p>在setup里边自定义指令的时候，只需要遵循<code>vNameOfDirective</code> 这样的命名规范就可以了</p>\n<p>比如如下自定义focus指令，命名就是vMyFocus，使用的就是v-my-focus</p>\n<p>自定义指令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\nconst vMyFocus &#x3D; &#123;\n  onMounted: (el: HTMLInputElement) &#x3D;&gt; &#123;\n    el.focus();\n    &#x2F;&#x2F; 在元素上做些操作\n  &#125;,\n&#125;;\n&lt;&#x2F;script&gt;\n&lt;template&gt;\n  &lt;input v-my-focus value&#x3D;&quot;111&quot; &#x2F;&gt;\n&lt;&#x2F;template&gt;\n\n\n复制代码</code></pre>\n\n<h1 id=\"使用defineExpose子组件传父组件\"><a href=\"#使用defineExpose子组件传父组件\" class=\"headerlink\" title=\"使用defineExpose子组件传父组件\"></a>使用defineExpose子组件传父组件</h1><p>子组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;\n\n&lt;&#x2F;template&gt;\n\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref, reactive &#125; from &quot;vue&quot;;\n\nfunction doSth() &#123;\n\n    console.log(333);\n\n&#125;\n\ndefineExpose(&#123; doSth &#125;);\n\n&lt;&#x2F;script&gt;\n\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.child &#123;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<p>父组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n&lt;div class&#x3D;&quot;father&quot; @click&#x3D;&quot;doSth1&quot;&gt;222&lt;&#x2F;div&gt;\n\n    &lt;Child ref&#x3D;&quot;childRef&quot;&gt;&lt;&#x2F;Child&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref, reactive &#125; from &quot;vue&quot;;\n\nimport Child from &quot;.&#x2F;Child.vue&quot;;\n\nconst childRef &#x3D; ref();\n\nfunction doSth1() &#123;\n\n    childRef.value.doSth();\n\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.father &#123;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<h1 id=\"父组件传子组件\"><a href=\"#父组件传子组件\" class=\"headerlink\" title=\"父组件传子组件\"></a>父组件传子组件</h1><p>父组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;div class&#x3D;&quot;father&quot;&gt;&lt;&#x2F;div&gt;\n\n    &lt;Child @click&#x3D;&quot;doSth&quot;&gt;&lt;&#x2F;Child&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref, reactive &#125; from &quot;vue&quot;;\n\nimport Child from &quot;.&#x2F;Child.vue&quot;;\n\nfunction doSth() &#123;\n\n    console.log(112);\n\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.father &#123;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<p>子组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;div class&#x3D;&quot;child&quot;&gt;2222&lt;&#x2F;div&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref, reactive, onMounted &#125; from &quot;vue&quot;;\n\nconst emits &#x3D; defineEmits([&quot;doSth&quot;]);\n\nonMounted(() &#x3D;&gt; &#123;\n\n    emits(&quot;doSth&quot;);\n\n&#125;);\n\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.child &#123;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<h1 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs\"></a>toRefs</h1><p>当从父组件向子组件传props的时候，必须使用toRefs或者toRef进行转一下，这是为什么呢？</p>\n<p>这里是因为如果不使用toRefs转一次的话，当父组件中的props改变的时候，子组件如果使用了Es6的解析，会失去响应性。</p>\n<p>可以看下如下例子</p>\n<p>父组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n&lt;div class&#x3D;&quot;father&quot; @click&#x3D;&quot;changeVal&quot;&gt;&#123;&#123; fatherRef &#125;&#125;&lt;&#x2F;div&gt;\n\n    &lt;Child :fatherRef&#x3D;&quot;fatherRef&quot;&gt;&lt;&#x2F;Child&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref, reactive &#125; from &quot;vue&quot;;\n\nimport Child from &quot;.&#x2F;Child.vue&quot;;\n\nconst fatherRef &#x3D; ref(1);\n\nfunction changeVal() &#123;\n\n    fatherRef.value &#x3D; 2;\n\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.father &#123;\n\n    margin-bottom: 40px;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<p>子组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;div class&#x3D;&quot;child&quot; @click&#x3D;&quot;changeVal&quot;&gt;&#123;&#123; fatherRef &#125;&#125;&lt;&#x2F;div&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref, reactive, onMounted, toRefs &#125; from &quot;vue&quot;;\n\nconst props &#x3D; defineProps&lt;&#123;\n\n    fatherRef: any;\n\n&#125;&gt;();\n\nconst &#123; fatherRef &#125; &#x3D; props;\n\nfunction changeVal() &#123;\n\n    fatherRef.value &#x3D; 34;\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.child &#123;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<p>可以看到当父组件如果点击之后，因为使用const { fatherRef } &#x3D; props;进行解析，就失去了响应性</p>\n<p>所以当父组件变成2的时候，子组件还是1。</p>\n<p>这里有两种解决办法</p>\n<ol>\n<li>使用const { fatherRef } &#x3D; toRefs(props);</li>\n<li>在模版中中使用props.fatherRef</li>\n</ol>\n<h1 id=\"子组件使用v-model\"><a href=\"#子组件使用v-model\" class=\"headerlink\" title=\"子组件使用v-model\"></a>子组件使用v-model</h1><h2 id=\"1-可以在子组件中使用computed，实现双向绑定\"><a href=\"#1-可以在子组件中使用computed，实现双向绑定\" class=\"headerlink\" title=\"1. 可以在子组件中使用computed，实现双向绑定\"></a>1. 可以在子组件中使用computed，实现双向绑定</h2><p>父组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;div class&#x3D;&quot;father&quot;&gt;&#123;&#123; fatherRef &#125;&#125;&lt;&#x2F;div&gt;\n\n    &lt;Child :fatherRef&#x3D;&quot;fatherRef&quot; @changeVal&#x3D;&quot;changeVal&quot;&gt;&lt;&#x2F;Child&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref &#125; from &quot;vue&quot;;\n\nimport Child from &quot;.&#x2F;Child.vue&quot;;\n\nconst fatherRef &#x3D; ref(&quot;1&quot;);\n\nfunction changeVal(val: string) &#123;\n\n    fatherRef.value &#x3D; val;\n\n&#125;\n\n&lt;&#x2F;script&gt;\n\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.father &#123;\n\n    margin-top: 40px;\n\n    margin-bottom: 40px;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<p>子组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;!-- &lt;div class&#x3D;&quot;child&quot;&gt;&#123;&#123; props.fatherRef &#125;&#125;&lt;&#x2F;div&gt; --&gt;\n\n    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;inputVal&quot; &#x2F;&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; computed &#125; from &quot;vue&quot;;\n\nconst props &#x3D; defineProps&lt;&#123;\n\n    fatherRef: string;\n\n&#125;&gt;();\n\nconst emits &#x3D; defineEmits([&quot;changeVal&quot;]);\n\n\nconst inputVal &#x3D; computed(&#123;\n\n    get() &#123;\n\n        return props.fatherRef;\n\n    &#125;,\n\n    set(val: string) &#123;\n\n        emits(&quot;changeVal&quot;, val);\n\n    &#125;,\n\n&#125;);\n\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.child &#123;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<h2 id=\"2-可以从父组件传递值和改变值的方法，然后子组件也可以使用v-model\"><a href=\"#2-可以从父组件传递值和改变值的方法，然后子组件也可以使用v-model\" class=\"headerlink\" title=\"2 可以从父组件传递值和改变值的方法，然后子组件也可以使用v-model\"></a>2 可以从父组件传递值和改变值的方法，然后子组件也可以使用v-model</h2><p>例子中父组件传递 modelValue和update:modelValue方法 父组件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;Child :modelValue&#x3D;&quot;searchText&quot; @update:modelValue&#x3D;&quot;changeVal&quot;&gt; &lt;&#x2F;Child&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; ref &#125; from &quot;vue&quot;;\n\nimport Child from &quot;.&#x2F;Child.vue&quot;;\n\nconst searchText &#x3D; ref(1);\n\nfunction changeVal(val: number) &#123;\n\n    searchText.value &#x3D; val;\n\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.father &#123;\n\n    margin-top: 40px;\n\n    margin-bottom: 40px;\n\n&#125;\n\n.btn &#123;\n\n    font-size: 20px;\n\n    color: red;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n复制代码</code></pre>\n\n<p>子组件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n\n    &lt;!-- &lt;div class&#x3D;&quot;child&quot;&gt;&#123;&#123; props.fatherRef &#125;&#125;&lt;&#x2F;div&gt; --&gt;\n\n    &lt;!-- &lt;div v-bind&#x3D;&quot;attrs&quot;&gt;\n\n        &lt;slot name&#x3D;&quot;test1&quot;&gt;11&lt;&#x2F;slot&gt;\n\n        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;inputVal&quot; &#x2F;&gt;\n\n    &lt;&#x2F;div&gt; --&gt;\n\n    &lt;input v-model&#x3D;&quot;modelValue&quot; &#x2F;&gt;\n\n&lt;&#x2F;template&gt;\n\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n\nimport &#123; computed, useAttrs, useSlots &#125; from &quot;vue&quot;;\n\nconst props &#x3D; defineProps&lt;&#123;\n\n    modelValue: number;\n\n&#125;&gt;();\n\n&#x2F;&#x2F; const emits &#x3D; defineEmits([&quot;changeVal&quot;]);\n\n&lt;&#x2F;script&gt;\n\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n\n.child &#123;\n\n&#125;\n\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<h1 id=\"递归组件\"><a href=\"#递归组件\" class=\"headerlink\" title=\"递归组件\"></a>递归组件</h1><p>组件本身是可以调用组件自身的，也就是递归。 比如名为 <code>Child.vue</code> 的组件可以在其模板中用 <code>&lt;Child/&gt;</code> 引用它自己。这里需要注意的是需要设置条件语句，用来中断递归，不然递归会无限递归下去。</p>\n<p>父组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n  &lt;Child :modelValue&#x3D;&quot;searchText&quot; @update:modelValue&#x3D;&quot;changeVal&quot;&gt; &lt;&#x2F;Child&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\nimport &#123; ref &#125; from &quot;vue&quot;;\nimport Child from &quot;.&#x2F;Child.vue&quot;;\nconst searchText &#x3D; ref(1);\nfunction changeVal(val: number) &#123;\n  searchText.value &#x3D; val;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.father &#123;\n  margin-top: 40px;\n  margin-bottom: 40px;\n&#125;\n.btn &#123;\n  font-size: 20px;\n  color: red;\n&#125;\n&lt;&#x2F;style&gt;\n\n复制代码</code></pre>\n\n<p>子组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n  &lt;input v-model&#x3D;&quot;modelValue&quot; &#x2F;&gt;\n  &lt;Child\n    :modelValue&#x3D;&quot;test&quot;\n    @update:modelValue&#x3D;&quot;changeTest&quot;\n    v-if&#x3D;&quot;modelValue &gt; 2&quot;\n  &gt;&lt;&#x2F;Child&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\nimport &#123; computed, useAttrs, useSlots, ref &#125; from &quot;vue&quot;;\nconst props &#x3D; defineProps&lt;&#123;\n  modelValue: number;\n&#125;&gt;();\nconst test &#x3D; ref(0);\nfunction changeTest(val: number) &#123;\n  test.value &#x3D; val;\n&#125;\n\n&#x2F;&#x2F; const emits &#x3D; defineEmits([&quot;changeVal&quot;]);\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.child &#123;\n  position: relative;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>","feature":true,"text":" 阅读vue的英文官网Vue的中文官网质量比起Vue的英文官网，你会发现质量有点差距，不过这种情况很容易理解，因为Vue是服务于全球的开源项目之一。 因此，作为程序员，学好英语是提高生产力的重要因素。 对于开发者来说，掌握英语是很有必要的，因为它是全球通用的编程语言之一。在学习和...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%98%85%E8%AF%BBvue%E7%9A%84%E8%8B%B1%E6%96%87%E5%AE%98%E7%BD%91\"><span class=\"toc-text\">阅读vue的英文官网</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vite%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">vite初始化项目</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vscode%E7%9A%84vue%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5\"><span class=\"toc-text\">vscode的vue代码片段</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vue%E7%BB%84%E4%BB%B6%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">Vue组件引入</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#defineProps%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">defineProps的使用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#defineEmits%E5%92%8CdefineProps%E8%8E%B7%E5%8F%96%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E8%BF%87%E6%9D%A5%E5%80%BC%E5%92%8C%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">defineEmits和defineProps获取父组件传过来值和事件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ref%E5%92%8Creactive\"><span class=\"toc-text\">ref和reactive</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8useAttrs%E5%92%8CuseSlots\"><span class=\"toc-text\">使用useAttrs和useSlots</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">使用自定义指令</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8defineExpose%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E7%88%B6%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">使用defineExpose子组件传父组件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%AD%90%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">父组件传子组件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#toRefs\"><span class=\"toc-text\">toRefs</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8v-model\"><span class=\"toc-text\">子组件使用v-model</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8computed%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">1. 可以在子组件中使用computed，实现双向绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%8F%AF%E4%BB%A5%E4%BB%8E%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E5%80%BC%E5%92%8C%E6%94%B9%E5%8F%98%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E7%84%B6%E5%90%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8v-model\"><span class=\"toc-text\">2 可以从父组件传递值和改变值的方法，然后子组件也可以使用v-model</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">递归组件</span></a></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"vue2 与 vue3 的区别","uid":"c15a6a9dda465b3a99cae28e33ecb722","slug":"vue2 与 vue3 的区别","date":"2023-01-09T07:24:48.000Z","updated":"2023-04-21T10:53:16.629Z","comments":true,"path":"api/articles/vue2 与 vue3 的区别.json","keywords":null,"cover":null,"text":"vue2 与 vue3 的区别Vue 内部根据功能可以被分为三个大的模块：**响应性 reactivite、运行时 runtime、编辑器 compiler**，以及一些小的功能点。那么要说 vue2 与 vue3 的区别，我们需要从这三个方面加小的功能点进行说起。 首先先来说 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}