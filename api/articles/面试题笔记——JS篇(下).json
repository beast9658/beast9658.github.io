{"title":"面试题笔记——JS篇(下)","uid":"2fdea5cb1f84778b4d76cd27c9ba53f7","slug":"面试题笔记——JS篇(下)","date":"2021-06-21T13:57:16.000Z","updated":"2023-04-21T08:28:10.595Z","comments":true,"path":"api/articles/面试题笔记——JS篇(下).json","keywords":null,"cover":[],"content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6aa6dc95d8fc445b97dc3101d1d9c9c0~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"JavaScript面试题.png\"></h2><h2 id=\"六、this-x2F-call-x2F-apply-x2F-bind\"><a href=\"#六、this-x2F-call-x2F-apply-x2F-bind\" class=\"headerlink\" title=\"六、this&#x2F;call&#x2F;apply&#x2F;bind\"></a>六、this&#x2F;call&#x2F;apply&#x2F;bind</h2><h3 id=\"1-对this对象的理解\"><a href=\"#1-对this对象的理解\" class=\"headerlink\" title=\"1. 对this对象的理解\"></a>1. 对this对象的理解</h3><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。</p>\n<ul>\n<li>第一种是<strong>函数调用模式</strong>，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</li>\n<li>第二种是<strong>方法调用模式</strong>，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</li>\n<li>第三种是<strong>构造器调用模式</strong>，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</li>\n<li>第四种是 <strong>apply 、 call 和 bind 调用模式</strong>，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</li>\n</ul>\n<p>这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。</p>\n<h3 id=\"2-call-和-apply-的区别？\"><a href=\"#2-call-和-apply-的区别？\" class=\"headerlink\" title=\"2. call() 和 apply() 的区别？\"></a>2. call() 和 apply() 的区别？</h3><p>它们的作用一模一样，区别仅在于传入参数的形式的不同。</p>\n<ul>\n<li>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。</li>\n<li>call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</li>\n</ul>\n<h3 id=\"3-实现call、apply-及-bind-函数\"><a href=\"#3-实现call、apply-及-bind-函数\" class=\"headerlink\" title=\"3. 实现call、apply 及 bind 函数\"></a>3. 实现call、apply 及 bind 函数</h3><p><strong>（1）call 函数的实现步骤：</strong></p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性。</li>\n<li>返回结果。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Function.prototype.myCall &#x3D; function(context) &#123;\n  &#x2F;&#x2F; 判断调用对象\n  if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123;\n    console.error(&quot;type error&quot;);\n  &#125;\n  &#x2F;&#x2F; 获取参数\n  let args &#x3D; [...arguments].slice(1),\n    result &#x3D; null;\n  &#x2F;&#x2F; 判断 context 是否传入，如果未传入则设置为 window\n  context &#x3D; context || window;\n  &#x2F;&#x2F; 将调用函数设为对象的方法\n  context.fn &#x3D; this;\n  &#x2F;&#x2F; 调用函数\n  result &#x3D; context.fn(...args);\n  &#x2F;&#x2F; 将属性删除\n  delete context.fn;\n  return result;\n&#125;;\n复制代码</code></pre>\n\n<p><strong>（2）apply 函数的实现步骤：</strong></p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>判断参数值是否传入</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性</li>\n<li>返回结果</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Function.prototype.myApply &#x3D; function(context) &#123;\n  &#x2F;&#x2F; 判断调用对象是否为函数\n  if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123;\n    throw new TypeError(&quot;Error&quot;);\n  &#125;\n  let result &#x3D; null;\n  &#x2F;&#x2F; 判断 context 是否存在，如果未传入则为 window\n  context &#x3D; context || window;\n  &#x2F;&#x2F; 将函数设为对象的方法\n  context.fn &#x3D; this;\n  &#x2F;&#x2F; 调用方法\n  if (arguments[1]) &#123;\n    result &#x3D; context.fn(...arguments[1]);\n  &#125; else &#123;\n    result &#x3D; context.fn();\n  &#125;\n  &#x2F;&#x2F; 将属性删除\n  delete context.fn;\n  return result;\n&#125;;\n复制代码</code></pre>\n\n<p><strong>（3）bind 函数的实现步骤：</strong></p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>保存当前函数的引用，获取其余传入参数值。</li>\n<li>创建一个函数返回</li>\n<li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Function.prototype.myBind &#x3D; function(context) &#123;\n  &#x2F;&#x2F; 判断调用对象是否为函数\n  if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123;\n    throw new TypeError(&quot;Error&quot;);\n  &#125;\n  &#x2F;&#x2F; 获取参数\n  var args &#x3D; [...arguments].slice(1),\n    fn &#x3D; this;\n  return function Fn() &#123;\n    &#x2F;&#x2F; 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  &#125;;\n&#125;;\n复制代码</code></pre>\n\n<h2 id=\"七、异步编程\"><a href=\"#七、异步编程\" class=\"headerlink\" title=\"七、异步编程\"></a>七、异步编程</h2><h3 id=\"1-异步编程的实现方式？\"><a href=\"#1-异步编程的实现方式？\" class=\"headerlink\" title=\"1. 异步编程的实现方式？\"></a>1. 异步编程的实现方式？</h3><p>JavaScript中的异步机制可以分为以下几种：</p>\n<ul>\n<li><strong>回调函数</strong> 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</li>\n<li><strong>Promise</strong> 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</li>\n<li><strong>generator</strong> 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。</li>\n<li><strong>async 函数</strong> 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。</li>\n</ul>\n<h3 id=\"2-setTimeout、Promise、Async-x2F-Await-的区别\"><a href=\"#2-setTimeout、Promise、Async-x2F-Await-的区别\" class=\"headerlink\" title=\"2. setTimeout、Promise、Async&#x2F;Await 的区别\"></a>2. setTimeout、Promise、Async&#x2F;Await 的区别</h3><h4 id=\"（1）setTimeout\"><a href=\"#（1）setTimeout\" class=\"headerlink\" title=\"（1）setTimeout\"></a>（1）setTimeout</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(&#39;script start&#39;)\t&#x2F;&#x2F;1. 打印 script start\nsetTimeout(function()&#123;\n    console.log(&#39;settimeout&#39;)\t&#x2F;&#x2F; 4. 打印 settimeout\n&#125;)\t&#x2F;&#x2F; 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数\nconsole.log(&#39;script end&#39;)\t&#x2F;&#x2F;3. 打印 script start\n&#x2F;&#x2F; 输出顺序：script start-&gt;script end-&gt;settimeout\n复制代码</code></pre>\n\n<h4 id=\"（2）Promise\"><a href=\"#（2）Promise\" class=\"headerlink\" title=\"（2）Promise\"></a>（2）Promise</h4><p>Promise本身是<strong>同步的立即执行函数</strong>， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then&#x2F;catch等，当主栈完成后，才会去调用resolve&#x2F;reject中存放的方法执行，打印p的时候，是打印的返回结果，一个Promise实例。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(&#39;script start&#39;)\nlet promise1 &#x3D; new Promise(function (resolve) &#123;\n    console.log(&#39;promise1&#39;)\n    resolve()\n    console.log(&#39;promise1 end&#39;)\n&#125;).then(function () &#123;\n    console.log(&#39;promise2&#39;)\n&#125;)\nsetTimeout(function()&#123;\n    console.log(&#39;settimeout&#39;)\n&#125;)\nconsole.log(&#39;script end&#39;)\n&#x2F;&#x2F; 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;settimeout\n复制代码</code></pre>\n\n<p>当JS主线程执行到Promise对象时：</p>\n<ul>\n<li>promise1.then() 的回调就是一个 task</li>\n<li>promise1 是 resolved或rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue</li>\n<li>promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中</li>\n<li>setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况</li>\n</ul>\n<h4 id=\"（3）async-x2F-await\"><a href=\"#（3）async-x2F-await\" class=\"headerlink\" title=\"（3）async&#x2F;await\"></a>（3）async&#x2F;await</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">async function async1()&#123;\n   console.log(&#39;async1 start&#39;);\n    await async2();\n    console.log(&#39;async1 end&#39;)\n&#125;\nasync function async2()&#123;\n    console.log(&#39;async2&#39;)\n&#125;\nconsole.log(&#39;script start&#39;);\nasync1();\nconsole.log(&#39;script end&#39;)\n&#x2F;&#x2F; 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end\n复制代码</code></pre>\n\n<p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">async function func1() &#123;\n    return 1\n&#125;\nconsole.log(func1())\n复制代码</code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e5a9d4b9bae48debd015574d9929c56~tplv-k3u1fbpfcp-zoom-1.image\"> func1的运行结果其实就是一个Promise对象。因此也可以使用then来处理后续逻辑。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func1().then(res &#x3D;&gt; &#123;\n    console.log(res);  &#x2F;&#x2F; 30\n&#125;)\n复制代码</code></pre>\n\n<p>await的含义为等待，也就是 async 函数需要等待await后的函数执行完成并且有了返回结果（Promise对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。</p>\n<h3 id=\"3-对Promise的理解\"><a href=\"#3-对Promise的理解\" class=\"headerlink\" title=\"3. 对Promise的理解\"></a>3. 对Promise的理解</h3><p>Promise是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。</p>\n<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p>（1）Promise的实例有<strong>三个状态</strong>:</p>\n<ul>\n<li>Pending（进行中）</li>\n<li>Resolved（已完成）</li>\n<li>Rejected（已拒绝）</li>\n</ul>\n<p>当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。</p>\n<p>（2）Promise的实例有<strong>两个过程</strong>：</p>\n<ul>\n<li>pending -&gt; fulfilled : Resolved（已完成）</li>\n<li>pending -&gt; rejected：Rejected（已拒绝）</li>\n</ul>\n<p>注意：一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n<p><strong>Promise的特点：</strong></p>\n<ul>\n<li>对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态，<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）、<code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是promise这个名字的由来——“<strong>承诺</strong>”；</li>\n<li>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从<code>pending</code>变为<code>fulfilled</code>，从<code>pending</code>变为<code>rejected</code>。这时就称为<code>resolved</code>（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。</li>\n</ul>\n<p><strong>Promise的缺点：</strong></p>\n<ul>\n<li>无法取消Promise，一旦新建它就会立即执行，无法中途取消。</li>\n<li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</li>\n<li>当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li>\n</ul>\n<p><strong>总结：</strong> Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。</p>\n<p><strong>注意：</strong> 在构造 <code>Promise</code> 的时候，构造函数内部的代码是立即执行的</p>\n<h3 id=\"4-Promise的基本用法\"><a href=\"#4-Promise的基本用法\" class=\"headerlink\" title=\"4. Promise的基本用法\"></a>4. Promise的基本用法</h3><h4 id=\"（1）创建Promise对象\"><a href=\"#（1）创建Promise对象\" class=\"headerlink\" title=\"（1）创建Promise对象\"></a>（1）创建Promise对象</h4><p>Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。</p>\n<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const promise &#x3D; new Promise(function(resolve, reject) &#123;\n  &#x2F;&#x2F; ... some code\n  if (&#x2F;* 异步操作成功 *&#x2F;)&#123;\n    resolve(value);\n  &#125; else &#123;\n    reject(error);\n  &#125;\n&#125;);\n复制代码</code></pre>\n\n<p><strong>一般情况下都会使用</strong><code>new Promise()</code><strong>来创建promise对象，但是也可以使用</strong><code>promise.resolve</code><strong>和</strong><code>promise.reject</code><strong>这两个方法：</strong></p>\n<ul>\n<li><strong>Promise.resolve</strong></li>\n</ul>\n<p><code>Promise.resolve(value)</code>的返回值也是一个promise对象，可以对返回值进行.then调用，代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Promise.resolve(11).then(function(value)&#123;\n  console.log(value); &#x2F;&#x2F; 打印出11\n&#125;);\n复制代码</code></pre>\n\n<p><code>resolve(11)</code>代码中，会让promise对象进入确定(<code>resolve</code>状态)，并将参数<code>11</code>传递给后面的<code>then</code>所指定的<code>onFulfilled</code> 函数；</p>\n<p>创建promise对象可以使用<code>new Promise</code>的形式创建对象，也可以使用<code>Promise.resolve(value)</code>的形式创建promise对象；</p>\n<ul>\n<li><strong>Promise.reject</strong></li>\n</ul>\n<p><code>Promise.reject</code> 也是<code>new Promise</code>的快捷形式，也创建一个promise对象。代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Promise.reject(new Error(“我错了，请原谅俺！！”));\n复制代码</code></pre>\n\n<p>就是下面的代码new Promise的简单形式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">new Promise(function(resolve,reject)&#123;\n   reject(new Error(&quot;我错了！&quot;));\n&#125;);\n复制代码</code></pre>\n\n<p>下面是使用resolve方法和reject方法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function testPromise(ready) &#123;\n  return new Promise(function(resolve,reject)&#123;\n    if(ready) &#123;\n      resolve(&quot;hello world&quot;);\n    &#125;else &#123;\n      reject(&quot;No thanks&quot;);\n    &#125;\n  &#125;);\n&#125;;\n&#x2F;&#x2F; 方法调用\ntestPromise(true).then(function(msg)&#123;\n  console.log(msg);\n&#125;,function(error)&#123;\n  console.log(error);\n&#125;);\n复制代码</code></pre>\n\n<p>上面的代码的含义是给<code>testPromise</code>方法传递一个参数，返回一个promise对象，如果为<code>true</code>的话，那么调用promise对象中的<code>resolve()</code>方法，并且把其中的参数传递给后面的<code>then</code>第一个函数内，因此打印出 “<code>hello world</code>”, 如果为<code>false</code>的话，会调用promise对象中的<code>reject()</code>方法，则会进入<code>then</code>的第二个函数内，会打印<code>No thanks</code>；</p>\n<h4 id=\"（2）Promise方法\"><a href=\"#（2）Promise方法\" class=\"headerlink\" title=\"（2）Promise方法\"></a>（2）Promise方法</h4><p>Promise有五个常用的方法：then()、catch()、all()、race()、finally。下面就来看一下这些方法。</p>\n<ol>\n<li><strong>then()</strong></li>\n</ol>\n<p>当Promise执行的内容符合成功条件时，调用<code>resolve</code>函数，失败就调用<code>reject</code>函数。Promise创建完了，那该如何调用呢？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">promise.then(function(value) &#123;\n  &#x2F;&#x2F; success\n&#125;, function(error) &#123;\n  &#x2F;&#x2F; failure\n&#125;);\n复制代码</code></pre>\n\n<p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为<code>resolved</code>时调用，第二个回调函数是Promise对象的状态变为<code>rejected</code>时调用。其中第二个参数可以省略。 <code>then</code>方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即<code>then</code>方法后面再调用另一个then方法。</p>\n<p>当要写有顺序的异步事件时，需要串行时，可以这样写：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let promise &#x3D; new Promise((resolve,reject)&#x3D;&gt;&#123;\n    ajax(&#39;first&#39;).success(function(res)&#123;\n        resolve(res);\n    &#125;)\n&#125;)\npromise.then(res&#x3D;&gt;&#123;\n    return new Promise((resovle,reject)&#x3D;&gt;&#123;\n        ajax(&#39;second&#39;).success(function(res)&#123;\n            resolve(res)\n        &#125;)\n    &#125;)\n&#125;).then(res&#x3D;&gt;&#123;\n    return new Promise((resovle,reject)&#x3D;&gt;&#123;\n        ajax(&#39;second&#39;).success(function(res)&#123;\n            resolve(res)\n        &#125;)\n    &#125;)\n&#125;).then(res&#x3D;&gt;&#123;\n    \n&#125;)\n复制代码</code></pre>\n\n<p>那当要写的事件没有顺序或者关系时，还如何写呢？可以使用<code>all</code> 方法来解决。</p>\n<p><strong>2. catch()</strong></p>\n<p>Promise对象除了有then方法，还有一个catch方法，该方法相当于<code>then</code>方法的第二个参数，指向<code>reject</code>的回调函数。不过<code>catch</code>方法还有一个作用，就是在执行<code>resolve</code>回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入<code>catch</code>方法中。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">p.then((data) &#x3D;&gt; &#123;\n     console.log(&#39;resolved&#39;,data);\n&#125;,(err) &#x3D;&gt; &#123;\n     console.log(&#39;rejected&#39;,err);\n     &#125;\n); \np.then((data) &#x3D;&gt; &#123;\n    console.log(&#39;resolved&#39;,data);\n&#125;).catch((err) &#x3D;&gt; &#123;\n    console.log(&#39;rejected&#39;,err);\n&#125;);\n复制代码</code></pre>\n\n<p><strong>3. all()</strong></p>\n<p><code>all</code>方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个<code>promise</code>对象。当数组中所有的<code>promise</code>的状态都达到<code>resolved</code>的时候，<code>all</code>方法的状态就会变成<code>resolved</code>，如果有一个状态变成了<code>rejected</code>，那么<code>all</code>方法的状态就会变成<code>rejected</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">javascript\nlet promise1 &#x3D; new Promise((resolve,reject)&#x3D;&gt;&#123;\n\tsetTimeout(()&#x3D;&gt;&#123;\n       resolve(1);\n\t&#125;,2000)\n&#125;);\nlet promise2 &#x3D; new Promise((resolve,reject)&#x3D;&gt;&#123;\n\tsetTimeout(()&#x3D;&gt;&#123;\n       resolve(2);\n\t&#125;,1000)\n&#125;);\nlet promise3 &#x3D; new Promise((resolve,reject)&#x3D;&gt;&#123;\n\tsetTimeout(()&#x3D;&gt;&#123;\n       resolve(3);\n\t&#125;,3000)\n&#125;);\nPromise.all([promise1,promise2,promise3]).then(res&#x3D;&gt;&#123;\n    console.log(res);\n    &#x2F;&#x2F;结果为：[1,2,3] \n&#125;)\n复制代码</code></pre>\n\n<p>调用<code>all</code>方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个promise对象<code>resolve</code>执行时的值。</p>\n<p><strong>（4）race()</strong></p>\n<p><code>race</code>方法和<code>all</code>一样，接受的参数是一个每项都是<code>promise</code>的数组，但是与<code>all</code>不同的是，当最先执行完的事件执行完之后，就直接返回该<code>promise</code>对象的值。如果第一个<code>promise</code>对象状态变成<code>resolved</code>，那自身的状态变成了<code>resolved</code>；反之第一个<code>promise</code>变成<code>rejected</code>，那自身状态就会变成<code>rejected</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let promise1 &#x3D; new Promise((resolve,reject)&#x3D;&gt;&#123;\n\tsetTimeout(()&#x3D;&gt;&#123;\n       reject(1);\n\t&#125;,2000)\n&#125;);\nlet promise2 &#x3D; new Promise((resolve,reject)&#x3D;&gt;&#123;\n\tsetTimeout(()&#x3D;&gt;&#123;\n       resolve(2);\n\t&#125;,1000)\n&#125;);\nlet promise3 &#x3D; new Promise((resolve,reject)&#x3D;&gt;&#123;\n\tsetTimeout(()&#x3D;&gt;&#123;\n       resolve(3);\n\t&#125;,3000)\n&#125;);\nPromise.race([promise1,promise2,promise3]).then(res&#x3D;&gt;&#123;\n\tconsole.log(res);\n\t&#x2F;&#x2F;结果：2\n&#125;,rej&#x3D;&gt;&#123;\n    console.log(rej)&#125;;\n)\n复制代码</code></pre>\n\n<p>那么<code>race</code>方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Promise.race([promise1,timeOutPromise(5000)]).then(res&#x3D;&gt;&#123;&#125;)\n复制代码</code></pre>\n\n<p><strong>5. finally()</strong></p>\n<p><code>finally</code>方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">promise\n.then(result &#x3D;&gt; &#123;···&#125;)\n.catch(error &#x3D;&gt; &#123;···&#125;)\n.finally(() &#x3D;&gt; &#123;···&#125;);\n复制代码</code></pre>\n\n<p>上面代码中，不管<code>promise</code>最后的状态，在执行完<code>then</code>或<code>catch</code>指定的回调函数以后，都会执行<code>finally</code>方法指定的回调函数。</p>\n<p>下面是一个例子，服务器使用 Promise 处理请求，然后使用<code>finally</code>方法关掉服务器。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server.listen(port)\n  .then(function () &#123;\n    &#x2F;&#x2F; ...\n  &#125;)\n  .finally(server.stop);\n复制代码</code></pre>\n\n<p><code>finally</code>方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是<code>fulfilled</code>还是<code>rejected</code>。这表明，<code>finally</code>方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。<code>finally</code>本质上是<code>then</code>方法的特例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">promise\n.finally(() &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 语句\n&#125;);\n&#x2F;&#x2F; 等同于\npromise\n.then(\n  result &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 语句\n    return result;\n  &#125;,\n  error &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 语句\n    throw error;\n  &#125;\n);\n复制代码</code></pre>\n\n<p>上面代码中，如果不使用<code>finally</code>方法，同样的语句需要为成功和失败两种情况各写一次。有了<code>finally</code>方法，则只需要写一次。</p>\n<h3 id=\"5-Promise解决了什么问题\"><a href=\"#5-Promise解决了什么问题\" class=\"headerlink\" title=\"5. Promise解决了什么问题\"></a>5. Promise解决了什么问题</h3><p>在工作中经常会碰到这样一个需求，比如我使用ajax发一个A请求后，成功后拿到数据，需要把数据传给B请求；那么需要如下编写代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let fs &#x3D; require(&#39;fs&#39;)\nfs.readFile(&#39;.&#x2F;a.txt&#39;,&#39;utf8&#39;,function(err,data)&#123;\n  fs.readFile(data,&#39;utf8&#39;,function(err,data)&#123;\n    fs.readFile(data,&#39;utf8&#39;,function(err,data)&#123;\n      console.log(data)\n    &#125;)\n  &#125;)\n&#125;)\n复制代码</code></pre>\n\n<p>上面的代码有如下缺点：</p>\n<ul>\n<li>后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个ajax请求嵌套的情况，代码不够直观。</li>\n<li>如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。</li>\n</ul>\n<p><code>Promise</code>出现之后，代码变成这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let fs &#x3D; require(&#39;fs&#39;)\nfunction read(url)&#123;\n  return new Promise((resolve,reject)&#x3D;&gt;&#123;\n    fs.readFile(url,&#39;utf8&#39;,function(error,data)&#123;\n      error &amp;&amp; reject(error)\n      resolve(data)\n    &#125;)\n  &#125;)\n&#125;\nread(&#39;.&#x2F;a.txt&#39;).then(data&#x3D;&gt;&#123;\n  return read(data) \n&#125;).then(data&#x3D;&gt;&#123;\n  return read(data)  \n&#125;).then(data&#x3D;&gt;&#123;\n  console.log(data)\n&#125;)\n复制代码</code></pre>\n\n<p>这样代码看起了就简洁了很多，解决了地狱回调的问题。</p>\n<h3 id=\"6-Promise-all和Promise-race的区别的使用场景\"><a href=\"#6-Promise-all和Promise-race的区别的使用场景\" class=\"headerlink\" title=\"6. Promise.all和Promise.race的区别的使用场景\"></a>6. Promise.all和Promise.race的区别的使用场景</h3><p><strong>（1）Promise.all</strong> <code>Promise.all</code>可以将多个<code>Promise</code>实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是<strong>一个结果数组</strong>，而失败的时候则返回<strong>最先被reject失败状态的值</strong>。</p>\n<p>Promise.all中传入的是数组，返回的也是是数组，并且会将进行映射，传入的promise对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</p>\n<p>需要注意，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决。</p>\n<p><strong>（2）Promise.race</strong></p>\n<p>顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Promise.race([promise1,timeOutPromise(5000)]).then(res&#x3D;&gt;&#123;&#125;)\n复制代码</code></pre>\n\n<h3 id=\"7-对async-x2F-await-的理解\"><a href=\"#7-对async-x2F-await-的理解\" class=\"headerlink\" title=\"7. 对async&#x2F;await 的理解\"></a>7. 对async&#x2F;await 的理解</h3><p>async&#x2F;await其实是<code>Generator</code> 的语法糖，它能实现的效果都能用then链来实现，它是为优化then链而开发出来的。从字面上来看，async是“异步”的简写，await则为等待，所以很好理解async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定await只能出现在asnyc函数中，先来看看async函数返回了什么：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">async function testAsy()&#123;\n   return &#39;hello world&#39;;\n&#125;\nlet result &#x3D; testAsy(); \nconsole.log(result)\n复制代码</code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/664493548f474168b9b55d414fd1fa9f~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 <code>return</code> 一个直接量，async 会把这个直接量通过 <code>Promise.resolve()</code> 封装成 Promise 对象。</p>\n<p>async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：<code>then()</code> 链来处理这个 Promise 对象，就像这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">async function testAsy()&#123;\n   return &#39;hello world&#39;\n&#125;\nlet result &#x3D; testAsy() \nconsole.log(result)\nresult.then(v&#x3D;&gt;&#123;\n    console.log(v)   &#x2F;&#x2F; hello world\n&#125;)\n复制代码</code></pre>\n\n<p>那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 <code>Promise.resolve(undefined)</code>。</p>\n<p>联想一下 Promise 的特点——无等待，所以在没有 <code>await</code> 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p>\n<p><strong>注意：</strong> <code>Promise.resolve(x)</code> 可以看作是 <code>new Promise(resolve =&gt; resolve(x))</code> 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。</p>\n<h3 id=\"8-await-到底在等啥？\"><a href=\"#8-await-到底在等啥？\" class=\"headerlink\" title=\"8. await 到底在等啥？\"></a>8. await 到底在等啥？</h3><p><strong>await 在等待什么呢？</strong> 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>\n<p>因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function getSomething() &#123;\n    return &quot;something&quot;;\n&#125;\nasync function testAsync() &#123;\n    return Promise.resolve(&quot;hello async&quot;);\n&#125;\nasync function test() &#123;\n    const v1 &#x3D; await getSomething();\n    const v2 &#x3D; await testAsync();\n    console.log(v1, v2);\n&#125;\ntest();\n复制代码</code></pre>\n\n<p>await 表达式的运算结果取决于它等的是什么。</p>\n<ul>\n<li>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</li>\n<li>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</li>\n</ul>\n<p>来看一个例子：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function testAsy(x)&#123;\n   return new Promise(resolve&#x3D;&gt;&#123;setTimeout(() &#x3D;&gt; &#123;\n       resolve(x);\n     &#125;, 3000)\n    &#125;\n   )\n&#125;\nasync function testAwt()&#123;    \n  let result &#x3D;  await testAsy(&#39;hello world&#39;);\n  console.log(result);    &#x2F;&#x2F; 3秒钟之后出现hello world\n  console.log(&#39;cuger&#39;)   &#x2F;&#x2F; 3秒钟之后出现cug\n&#125;\ntestAwt();\nconsole.log(&#39;cug&#39;)  &#x2F;&#x2F;立即输出cug\n复制代码</code></pre>\n\n<p>这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。await暂停当前async的执行，所以’cug’’最先输出，hello world’和‘cuger’是3秒钟后同时出现的。</p>\n<h3 id=\"9-async-x2F-await的优势\"><a href=\"#9-async-x2F-await的优势\" class=\"headerlink\" title=\"9. async&#x2F;await的优势\"></a>9. async&#x2F;await的优势</h3><p>单一的 Promise 链并不能发现 async&#x2F;await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async&#x2F;await 来进一步优化它）。</p>\n<p>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 <code>setTimeout</code> 来模拟异步操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n *&#x2F;\nfunction takeLongTime(n) &#123;\n    return new Promise(resolve &#x3D;&gt; &#123;\n        setTimeout(() &#x3D;&gt; resolve(n + 200), n);\n    &#125;);\n&#125;\nfunction step1(n) &#123;\n    console.log(&#96;step1 with $&#123;n&#125;&#96;);\n    return takeLongTime(n);\n&#125;\nfunction step2(n) &#123;\n    console.log(&#96;step2 with $&#123;n&#125;&#96;);\n    return takeLongTime(n);\n&#125;\nfunction step3(n) &#123;\n    console.log(&#96;step3 with $&#123;n&#125;&#96;);\n    return takeLongTime(n);\n&#125;\n复制代码</code></pre>\n\n<p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 &#x3D; 300;\n    step1(time1)\n        .then(time2 &#x3D;&gt; step2(time2))\n        .then(time3 &#x3D;&gt; step3(time3))\n        .then(result &#x3D;&gt; &#123;\n            console.log(&#96;result is $&#123;result&#125;&#96;);\n            console.timeEnd(&quot;doIt&quot;);\n        &#125;);\n&#125;\ndoIt();\n&#x2F;&#x2F; c:\\var\\test&gt;node --harmony_async_await .\n&#x2F;&#x2F; step1 with 300\n&#x2F;&#x2F; step2 with 500\n&#x2F;&#x2F; step3 with 700\n&#x2F;&#x2F; result is 900\n&#x2F;&#x2F; doIt: 1507.251ms\n复制代码</code></pre>\n\n<p>输出结果 <code>result</code> 是 <code>step3()</code> 的参数 <code>700 + 200</code> &#x3D; <code>900</code>。<code>doIt()</code> 顺序执行了三个步骤，一共用了 <code>300 + 500 + 700 = 1500</code> 毫秒，和 <code>console.time()/console.timeEnd()</code> 计算的结果一致。</p>\n<p>如果用 async&#x2F;await 来实现呢，会是这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">async function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 &#x3D; 300;\n    const time2 &#x3D; await step1(time1);\n    const time3 &#x3D; await step2(time2);\n    const result &#x3D; await step3(time3);\n    console.log(&#96;result is $&#123;result&#125;&#96;);\n    console.timeEnd(&quot;doIt&quot;);\n&#125;\ndoIt();\n复制代码</code></pre>\n\n<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<h3 id=\"10-async-x2F-await对比Promise的优势\"><a href=\"#10-async-x2F-await对比Promise的优势\" class=\"headerlink\" title=\"10. async&#x2F;await对比Promise的优势\"></a>10. async&#x2F;await对比Promise的优势</h3><ul>\n<li>代码读起来更加同步，Promise虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担</li>\n<li>Promise传递中间值⾮常麻烦，⽽async&#x2F;await⼏乎是同步的写法，⾮常优雅</li>\n<li>错误处理友好，async&#x2F;await可以⽤成熟的try&#x2F;catch，Promise的错误捕获⾮常冗余</li>\n<li>调试友好，Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。</li>\n</ul>\n<h3 id=\"11-async-x2F-await-如何捕获异常\"><a href=\"#11-async-x2F-await-如何捕获异常\" class=\"headerlink\" title=\"11. async&#x2F;await 如何捕获异常\"></a>11. async&#x2F;await 如何捕获异常</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">async function fn()&#123;\n    try&#123;\n        let a &#x3D; await Promise.reject(&#39;error&#39;)\n    &#125;catch(error)&#123;\n        console.log(error)\n    &#125;\n&#125;\n复制代码</code></pre>\n\n<h2 id=\"八、面向对象\"><a href=\"#八、面向对象\" class=\"headerlink\" title=\"八、面向对象\"></a>八、面向对象</h2><h3 id=\"1-对象创建的方式有哪些？\"><a href=\"#1-对象创建的方式有哪些？\" class=\"headerlink\" title=\"1. 对象创建的方式有哪些？\"></a>1. 对象创建的方式有哪些？</h3><p>一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：</p>\n<p>（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。</p>\n<p>（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。</p>\n<p>（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。</p>\n<p>（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。</p>\n<p>（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。</p>\n<p>（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。</p>\n<h3 id=\"2-对象继承的方式有哪些？\"><a href=\"#2-对象继承的方式有哪些？\" class=\"headerlink\" title=\"2. 对象继承的方式有哪些？\"></a>2. 对象继承的方式有哪些？</h3><p>（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</p>\n<p>（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</p>\n<p>（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</p>\n<p>（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。</p>\n<p>（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。</p>\n<p>（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</p>\n<h2 id=\"九、垃圾回收与内存泄漏\"><a href=\"#九、垃圾回收与内存泄漏\" class=\"headerlink\" title=\"九、垃圾回收与内存泄漏\"></a>九、垃圾回收与内存泄漏</h2><h3 id=\"1-浏览器的垃圾回收机制\"><a href=\"#1-浏览器的垃圾回收机制\" class=\"headerlink\" title=\"1. 浏览器的垃圾回收机制\"></a>1. 浏览器的垃圾回收机制</h3><h4 id=\"（1）垃圾回收的概念\"><a href=\"#（1）垃圾回收的概念\" class=\"headerlink\" title=\"（1）垃圾回收的概念\"></a>（1）垃圾回收的概念</h4><p><strong>垃圾回收</strong>：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。</p>\n<p><strong>回收机制</strong>：</p>\n<ul>\n<li>Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。</li>\n<li>JavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。</li>\n<li>不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。</li>\n</ul>\n<h4 id=\"（2）垃圾回收的方式\"><a href=\"#（2）垃圾回收的方式\" class=\"headerlink\" title=\"（2）垃圾回收的方式\"></a>（2）垃圾回收的方式</h4><p>浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。 <strong>1）标记清除</strong></p>\n<ul>\n<li>标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。</li>\n<li>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</li>\n</ul>\n<p><strong>2）引用计数</strong></p>\n<ul>\n<li>另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。</li>\n<li>这种方法会引起<strong>循环引用</strong>的问题：例如：<code> obj1</code>和<code>obj2</code>通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，<code>obj1</code>和<code>obj2</code>还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function fun() &#123;\n    let obj1 &#x3D; &#123;&#125;;\n    let obj2 &#x3D; &#123;&#125;;\n    obj1.a &#x3D; obj2; &#x2F;&#x2F; obj1 引用 obj2\n    obj2.a &#x3D; obj1; &#x2F;&#x2F; obj2 引用 obj1\n&#125;\n复制代码</code></pre>\n\n<p>这种情况下，就要手动释放变量占用的内存：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">obj1.a &#x3D;  null\n obj2.a &#x3D;  null\n复制代码</code></pre>\n\n<h4 id=\"（3）减少垃圾回收\"><a href=\"#（3）减少垃圾回收\" class=\"headerlink\" title=\"（3）减少垃圾回收\"></a>（3）减少垃圾回收</h4><p>虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。</p>\n<ul>\n<li><strong>对数组进行优化：</strong> 在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。</li>\n<li><strong>对</strong><code>object</code><strong>进行优化：</strong> 对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。</li>\n<li><strong>对函数进行优化：</strong> 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。</li>\n</ul>\n<h3 id=\"2-哪些情况会导致内存泄漏\"><a href=\"#2-哪些情况会导致内存泄漏\" class=\"headerlink\" title=\"2. 哪些情况会导致内存泄漏\"></a>2. 哪些情况会导致内存泄漏</h3><p>以下四种情况会造成内存的泄漏：</p>\n<ul>\n<li><strong>意外的全局变量：</strong> 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</li>\n<li><strong>被遗忘的计时器或回调函数：</strong> 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li>\n<li><strong>脱离 DOM 的引用：</strong> 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</li>\n<li><strong>闭包：</strong> 不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li>\n</ul>\n","text":"六、this&#x2F;call&#x2F;apply&#x2F;bind1. 对this对象的理解this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。 第一种是函数调用模式，当一个函数不是一个对象的属性...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81this-x2F-call-x2F-apply-x2F-bind\"><span class=\"toc-text\">六、this&#x2F;call&#x2F;apply&#x2F;bind</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AF%B9this%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">1. 对this对象的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-call-%E5%92%8C-apply-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">2. call() 和 apply() 的区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E7%8E%B0call%E3%80%81apply-%E5%8F%8A-bind-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3. 实现call、apply 及 bind 函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">七、异步编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">1. 异步编程的实现方式？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-setTimeout%E3%80%81Promise%E3%80%81Async-x2F-Await-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">2. setTimeout、Promise、Async&#x2F;Await 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89setTimeout\"><span class=\"toc-text\">（1）setTimeout</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89Promise\"><span class=\"toc-text\">（2）Promise</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89async-x2F-await\"><span class=\"toc-text\">（3）async&#x2F;await</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AF%B9Promise%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">3. 对Promise的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">4. Promise的基本用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E5%88%9B%E5%BB%BAPromise%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">（1）创建Promise对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89Promise%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（2）Promise方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Promise%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">5. Promise解决了什么问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-Promise-all%E5%92%8CPromise-race%E7%9A%84%E5%8C%BA%E5%88%AB%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">6. Promise.all和Promise.race的区别的使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%AF%B9async-x2F-await-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">7. 对async&#x2F;await 的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-await-%E5%88%B0%E5%BA%95%E5%9C%A8%E7%AD%89%E5%95%A5%EF%BC%9F\"><span class=\"toc-text\">8. await 到底在等啥？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-async-x2F-await%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">9. async&#x2F;await的优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-async-x2F-await%E5%AF%B9%E6%AF%94Promise%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">10. async&#x2F;await对比Promise的优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-async-x2F-await-%E5%A6%82%E4%BD%95%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">11. async&#x2F;await 如何捕获异常</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">八、面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">1. 对象创建的方式有哪些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">2. 对象继承的方式有哪些？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">九、垃圾回收与内存泄漏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1. 浏览器的垃圾回收机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">（1）垃圾回收的概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">（2）垃圾回收的方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E5%87%8F%E5%B0%91%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">（3）减少垃圾回收</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%93%AA%E4%BA%9B%E6%83%85%E5%86%B5%E4%BC%9A%E5%AF%BC%E8%87%B4%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">2. 哪些情况会导致内存泄漏</span></a></li></ol></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"面试题笔记——VUE篇(上)","uid":"be5afecc963f0a7007cee0b82bb652a1","slug":"面试题笔记——VUE篇(上)","date":"2021-06-23T02:33:53.000Z","updated":"2023-04-21T08:34:36.787Z","comments":true,"path":"api/articles/面试题笔记——VUE篇(上).json","keywords":null,"cover":[],"text":"一、Vue 基础1. Vue的基本原理当一个Vue实例创建时，Vue会遍历data中的属性，用 Object.defineProperty（vue3.0使用proxy ）将它们转为 getter&#x2F;setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个...","link":"","photos":[],"count_time":{"symbolsCount":"45k","symbolsTime":"41 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"面试题笔记——JS篇(上)","uid":"7fd56521850f8ad3304286dc32e903a9","slug":"面试题笔记——JS篇(上)","date":"2021-06-20T02:11:19.000Z","updated":"2023-04-21T08:26:42.826Z","comments":true,"path":"api/articles/面试题笔记——JS篇(上).json","keywords":null,"cover":[],"text":" 一、数据类型1. JavaScript有哪些数据类型，它们的区别？JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。 其中 Symbol 和 BigInt 是ES6 ...","link":"","photos":[],"count_time":{"symbolsCount":"57k","symbolsTime":"51 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}