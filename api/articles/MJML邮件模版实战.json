{"title":"MJML邮件模版实战","uid":"d15af8effdd73a8b6f9c6e84242a848d","slug":"MJML邮件模版实战","date":"2022-09-07T14:13:14.000Z","updated":"2023-04-21T09:46:29.872Z","comments":true,"path":"api/articles/MJML邮件模版实战.json","keywords":null,"cover":[],"content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cccc1ec36bf4e82a22a74ff7d6d9f85~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"MJML邮件模版实战\"></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近画个邮件模版使用table布局一言难尽，还要兼容各种邮件厂商，最后找了一个邮件模版来处理。</p>\n<h3 id=\"MJML\"><a href=\"#MJML\" class=\"headerlink\" title=\"MJML\"></a>MJML</h3><p>MJML是一种标记语言，旨在减少编写响应电子邮件的痛苦。它的语义语法使它简单明了，它丰富的标准组件库加快了您的开发时间，并减轻了您的电子邮件代码库。MJML的开源引擎生成符合最佳实践的高质量响应HTML。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>创建个文件夹<code>demo</code> -&gt; 进入<code>demo</code>目录</p>\n<p>初始化项目</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm init -y\n复制代码</code></pre>\n\n<p>安装mjml包</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install mjml\n复制代码</code></pre>\n\n<p>创建<code>demo.mjml</code>文件</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a82543baef74d83909c357cd5f1efc8~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<h3 id=\"页面编写\"><a href=\"#页面编写\" class=\"headerlink\" title=\"页面编写\"></a>页面编写</h3><p>vscode 和 webstorm都有预览插件，直接搜索MJML即可。 建议还是在官网在线编写，然后在复制到代码保存。</p>\n<p>在线编写地址: <a href=\"https://link.juejin.cn/?target=https://mjml.io/try-it-live\" title=\"https://mjml.io/try-it-live\">mjml.io&#x2F;try-it-live</a></p>\n<p>当然你也可以用可视化界面来编辑：<a href=\"https://link.juejin.cn/?target=https://grapesjs.com/demo-mjml.html\" title=\"https://grapesjs.com/demo-mjml.html\">grapesjs.com&#x2F;demo-mjml.h…</a></p>\n<p>这是一封回复邮件</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8612992840f443cb58645835b81387b~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<p>像普通的HTML模板一样，我们可以将这个模板分成不同的部分以适应网格。 电子邮件正文，由<code>mj-body</code>标记包含文档的全部内容：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10bb16773d0f48308af1b2701d527252~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mjml&gt;\n  &lt;mj-body&gt;\n    to do..\n  &lt;&#x2F;mj-body&gt;\n&lt;&#x2F;mjml&gt;\n复制代码</code></pre>\n\n<p>从这里，您可以首先定义您的分区：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11a8f18c2322433bb0ab1a9b064aa46b~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mjml&gt;\n  &lt;mj-body&gt;\n    &lt;mj-section&gt;\n      1\n    &lt;&#x2F;mj-section&gt;\n    &lt;mj-section&gt;\n      2\n    &lt;&#x2F;mj-section&gt;\n    &lt;mj-section&gt;\n      3\n    &lt;&#x2F;mj-section&gt;\n    &lt;mj-section&gt;\n      4\n    &lt;&#x2F;mj-section&gt;\n  &lt;&#x2F;mj-body&gt;\n&lt;&#x2F;mjml&gt;\n复制代码</code></pre>\n\n<p>在任何部分中，都应该有列（即使您只需要一列），列是使MJML响应的原因。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/360589202c5f42329369958d37b7e3dc~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mjml&gt;\n  &lt;mj-body&gt;\n     &lt;!-- 1 --&gt;\n     &lt;mj-section background-url&#x3D;&quot;http:&#x2F;&#x2F;1.bp.blogspot.com&#x2F;-TPrfhxbYpDY&#x2F;Uh3Refzk02I&#x2F;AAAAAAAALw8&#x2F;5sUJ0UUGYuw&#x2F;s1600&#x2F;New+York+in+The+1960&#39;s+-+70&#39;s+(2).jpg&quot; background-size&#x3D;&quot;cover&quot; background-repeat&#x3D;&quot;no-repeat&quot;&gt;\n      &lt;mj-column width&#x3D;&quot;600px&quot;&gt;\n        &lt;mj-text align&#x3D;&quot;center&quot; color&#x3D;&quot;#fff&quot; font-size&#x3D;&quot;40px&quot; font-family&#x3D;&quot;Helvetica Neue&quot;&gt;Subject&lt;&#x2F;mj-text&gt;\n      &lt;&#x2F;mj-column&gt;\n    &lt;&#x2F;mj-section&gt;\n    &lt;!-- 2 --&gt;\n    &lt;mj-section&gt;\n      &lt;mj-column &gt;\n        &lt;mj-text color&#x3D;&quot;#000&quot; font-size&#x3D;&quot;16px&quot; font-family&#x3D;&quot;Helvetica Neue&quot;&gt;Lorem ipsum dolor sit amet,consectetur adipiscing elit.sit amet,consectetur adipiscing elit.sit amet,consectetur adipiscing elit.sit amet,consectetur adipiscing elit.sit amet,consectetur adipiscing elit.&lt;&#x2F;mj-text&gt;\n      &lt;&#x2F;mj-column&gt;\n    &lt;&#x2F;mj-section&gt;\n    &lt;!-- 3 --&gt;\n    &lt;mj-section&gt;\n      &lt;mj-column &gt;\n       &lt;mj-divider padding-left&#x3D;&quot;0px&quot; padding-right&#x3D;&quot;0px&quot;&gt;&lt;&#x2F;mj-divider&gt;\n      &lt;&#x2F;mj-column&gt;\n    &lt;&#x2F;mj-section&gt;\n    &lt;!-- 4 --&gt;\n    &lt;mj-section background-color&#x3D;&quot;#ffffff&quot;  full-width&#x3D;&quot;full-width&quot;&gt;\n      &lt;mj-column vertical-align&#x3D;&quot;top&quot; width&#x3D;&quot;33.33333333333333%&quot;&gt;\n        &lt;mj-image src&#x3D;&quot;http:&#x2F;&#x2F;191n.mj.am&#x2F;img&#x2F;191n&#x2F;1t&#x2F;hs.png&quot; alt&#x3D;&quot;&quot; width&#x3D;&quot;50px&quot;&gt;&lt;&#x2F;mj-image&gt;\n        &lt;mj-text align&#x3D;&quot;center&quot; color&#x3D;&quot;#9da3a3&quot; font-size&#x3D;&quot;11px&quot; padding-bottom&#x3D;&quot;30px&quot;&gt;&lt;span style&#x3D;&quot;font-size: 14px; color: #e85034&quot;&gt;Best audience&lt;&#x2F;span&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eleifend sagittis nunc, et fermentum est ullamcorper dignissim.&lt;&#x2F;mj-text&gt;\n      &lt;&#x2F;mj-column&gt;\n      &lt;mj-column vertical-align&#x3D;&quot;top&quot; width&#x3D;&quot;33.33333333333333%&quot;&gt;\n        &lt;mj-image src&#x3D;&quot;http:&#x2F;&#x2F;191n.mj.am&#x2F;img&#x2F;191n&#x2F;1t&#x2F;hm.png&quot; alt&#x3D;&quot;&quot; width&#x3D;&quot;50px&quot;&gt;&lt;&#x2F;mj-image&gt;\n        &lt;mj-text align&#x3D;&quot;center&quot; color&#x3D;&quot;#9da3a3&quot; font-size&#x3D;&quot;11px&quot; padding-bottom&#x3D;&quot;30px&quot;&gt;&lt;span style&#x3D;&quot;font-size: 14px; color: #e85034&quot;&gt;Higher rates&lt;&#x2F;span&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eleifend sagittis nunc, et fermentum est ullamcorper dignissim.&lt;&#x2F;mj-text&gt;\n      &lt;&#x2F;mj-column&gt;\n      &lt;mj-column vertical-align&#x3D;&quot;top&quot; width&#x3D;&quot;33.33333333333333%&quot;&gt;\n        &lt;mj-image src&#x3D;&quot;http:&#x2F;&#x2F;191n.mj.am&#x2F;img&#x2F;191n&#x2F;1t&#x2F;hl.png&quot; alt&#x3D;&quot;&quot; width&#x3D;&quot;50px&quot;&gt;&lt;&#x2F;mj-image&gt;\n        &lt;mj-text align&#x3D;&quot;center&quot; color&#x3D;&quot;#9da3a3&quot; font-size&#x3D;&quot;11px&quot; padding-bottom&#x3D;&quot;30px&quot; padding-top&#x3D;&quot;3px&quot;&gt;&lt;span style&#x3D;&quot;font-size: 14px; color: #e85034&quot;&gt;24&#x2F;7 Support&lt;&#x2F;span&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eleifend sagittis nunc, et fermentum est ullamcorper dignissim.&lt;&#x2F;mj-text&gt;\n      &lt;&#x2F;mj-column&gt;\n    &lt;&#x2F;mj-section&gt;\n  &lt;&#x2F;mj-body&gt;\n&lt;&#x2F;mjml&gt;\n复制代码</code></pre>\n\n<p>至此我们就得到一个响应式布局的模板。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">mjml demo.mjml -o demo.html\n复制代码</code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2177848a62f64ceba727eb97e4155c2a~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<p>编译完成即可看到我们生成的html，打开浏览器进行预览。</p>\n<h3 id=\"发送测试邮件\"><a href=\"#发送测试邮件\" class=\"headerlink\" title=\"发送测试邮件\"></a>发送测试邮件</h3><p>这里采用 <code>nodemailer</code>包，来发送邮件。 官网地址: <a href=\"https://link.juejin.cn/?target=https://nodemailer.com/\" title=\"https://nodemailer.com/\">nodemailer</a>.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install nodemailer fs path\n复制代码</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; send.js\n\nvar nodemailer &#x3D; require(&#39;nodemailer&#39;);\nvar fs &#x3D; require(&#39;fs&#39;)\nvar path &#x3D; require(&#39;path&#39;)\nvar transporter &#x3D; nodemailer.createTransport(&#123;\n    service: &#39;qq&#39;,\n    auth: &#123;\n        user: &#39;11111111@qq.com&#39;, &#x2F;&#x2F; 你的账号\n        pass: &#39;xxxxxxxx&#39; &#x2F;&#x2F;你的qq授权码\n    &#125;\n&#125;);\nvar mailOptions &#x3D; &#123;\n    from: &#39;&quot;nick&quot; &lt;11111111@qq.com&gt;&#39;, &#x2F;&#x2F; 你的账号名 | 你的账号\n    to: &#39;222222@qq.com,333333@qq.com,&#39;, &#x2F;&#x2F; 接受者,可以同时发送多个,以逗号隔开\n    subject: &#39;MJML&#39;, &#x2F;&#x2F; 标题\n    html: fs.createReadStream(path.resolve(__dirname,&#39;demo.html&#39;)) &#x2F;&#x2F; 指定发送文件路径\n&#125;;\n\ntransporter.sendMail(mailOptions, function (err, info) &#123;\n    if (err) &#123;\n        console.log(err);\n        return;\n    &#125;\n    console.log(&#39;发送成功&#39;);\n&#125;);\n\n复制代码</code></pre>\n\n<p>qq授权码获取:打开qq邮箱，找到设置，打开配置，你就能得到qq授权码。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/305258bcf0834ea79e3d5259ca332fd1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<p>运行命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">node send.js\n复制代码</code></pre>\n\n<p>至此邮件已经发送到你的邮箱。</p>\n<h3 id=\"自动编译\"><a href=\"#自动编译\" class=\"headerlink\" title=\"自动编译\"></a>自动编译</h3><p>后续邮件越写越多，文件目标很多，不太想一个个手动编译成html,所以写个脚本自动编译输出html文件。</p>\n<p>新增 src目录 新增 build.js</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baa55d9dc7e34d328b4b4b5560a1e908~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; build.js\n\nconst fs &#x3D; require(&#39;fs&#39;)\nconst path &#x3D; require(&#39;path&#39;);\nconst child_process &#x3D; require(&#39;child_process&#39;);\n\n&#x2F;**\n * src 目录下文件\n * dist 打包的目标文件\n *&#x2F;\ncopyDir(&#39;.&#x2F;src&#x2F;*&#39;, &#39;.&#x2F;dist&#39;)\n\n\n&#x2F;&#x2F; 复制文件 -&gt; 编译文件\nfunction copyDir(src, dist) &#123;\n    if (fs.existsSync(dist)) &#123;\n        copyFile(src, dist)\n    &#125;else&#123;\n        fs.mkdir(dist, function (err) &#123;\n            if (err) &#123;\n                console.log(err)\n                return\n            &#125;\n            copyFile(src, dist)\n        &#125;)\n    &#125;\n    function copyFile(src, dist)&#123;\n        &#x2F;&#x2F; 如果是windows\n        if(process.platform &#x3D;&#x3D;&#x3D; &#39;win32&#39;)&#123;\n            child_process.exec(&#96;ROBOCOPY src $&#123;dist&#125; &#x2F;E &#x2F;MT:30&#96;,function () &#123;\n                compile()\n            &#125;);\n        &#125;else&#123;\n            child_process.exec(&#96;cp -r $&#123;src&#125; $&#123;dist&#125;&#96;,function () &#123;\n                compile()\n            &#125;);\n        &#125;\n    &#125;\n&#125;\n&#x2F;&#x2F; 编译文件\nfunction compile( src &#x3D; &#39;dist&#39;) &#123;\n    let startPath &#x3D; process.cwd()\n    fs.readdir(src,&#123;withFileTypes:true&#125;,  function (err, files) &#123;\n        files.forEach(file&#x3D;&gt;&#123;\n            if(file.isDirectory())&#123;\n                let dir &#x3D; &#96;$&#123;src&#125;&#x2F;$&#123;file.name&#125;&#96;\n                compile(dir)\n            &#125;else&#123;\n                &#x2F;&#x2F; 获取当前文件名称\n                let fileName &#x3D; file.name.split(&#39;.&#39;)[0]\n                &#x2F;&#x2F; 具体目录\n                process.chdir(src);\n                &#x2F;&#x2F; 如果是windows\n                if(process.platform &#x3D;&#x3D;&#x3D; &#39;win32&#39;)&#123;\n                    &#x2F;&#x2F; 编译MJML文件\n                    const compile &#x3D; child_process.exec(&#96;mjml $&#123;fileName&#125;.mjml -o $&#123;fileName&#125;.html&#96;)\n                    compile.on(&#39;close&#39;, (code) &#x3D;&gt; &#123;\n                        console.log(&#39;编译成功:&#39;,&#96;$&#123;fileName&#125;.mjml&#96;)\n                        let filePath &#x3D; path.join(__dirname,&#96;$&#123;src&#125;&#x2F;$&#123;fileName&#125;.mjml&#96;)\n                        child_process.exec(&#96;del $&#123;filePath&#125;&#96;)\n                    &#125;);\n                &#125;else&#123;\n                    &#x2F;&#x2F; 编译MJML文件\n                    const compile &#x3D; child_process.spawn(&#96;mjml&#96;, [&#96;$&#123;fileName&#125;.mjml&#96;,&#96;-o&#96;,&#96;$&#123;fileName&#125;.html&#96;], &#123;cwd: path.resolve(__dirname, src)&#125;)\n                    compile.on(&#39;close&#39;, code &#x3D;&gt; &#123;\n                        &#x2F;&#x2F; 删除MJML文件\n                        child_process.spawn(&#96;rm&#96;, [&#96;$&#123;fileName&#125;.mjml&#96;], &#123;cwd: path.resolve(__dirname, src)&#125;)\n                        console.log(&#39;编译成功:&#39;,&#96;$&#123;fileName&#125;.mjml&#96;)\n                    &#125;)\n                &#125;\n                &#x2F;&#x2F; 复原目录\n                process.chdir(startPath);\n            &#125;\n        &#125;)\n    &#125;)\n&#125;\n\n复制代码</code></pre>\n\n<p>运行命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">node build.js\n复制代码</code></pre>\n\n<p>会自动编译生成和src目录相同的html结构。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24c8a12fa17e4412ae6667090a4fc843~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>MJML在几个邮件厂商测试样式偏差不大，值得使用。 如果文章对你有帮助，请帮我点赞收藏，谢谢大家。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>HTML Email 编写指南【阮一峰】：<a href=\"https://link.juejin.cn/?target=http://www.ruanyifeng.com/blog/2013/06/html_email.html\" title=\"http://www.ruanyifeng.com/blog/2013/06/html_email.html\">地址</a></p>\n<p>github demo地址:<a href=\"https://link.juejin.cn/?target=https://github.com/anick-xs/MJML-Node\" title=\"https://github.com/anick-xs/MJML-Node\">github</a></p>\n","text":" 前言最近画个邮件模版使用table布局一言难尽，还要兼容各种邮件厂商，最后找了一个邮件模版来处理。 MJMLMJML是一种标记语言，旨在减少编写响应电子邮件的痛苦。它的语义语法使它简单明了，它丰富的标准组件库加快了您的开发时间，并减轻了您的电子邮件代码库。MJML的开源引擎生成...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MJML\"><span class=\"toc-text\">MJML</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">环境搭建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E9%9D%A2%E7%BC%96%E5%86%99\"><span class=\"toc-text\">页面编写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">编译</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E6%B5%8B%E8%AF%95%E9%82%AE%E4%BB%B6\"><span class=\"toc-text\">发送测试邮件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">自动编译</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"微前端实战篇","uid":"a110b92c4e47b4fc49cc33cb7f9c3765","slug":"微前端实战篇","date":"2022-09-15T15:16:31.000Z","updated":"2023-04-21T09:51:24.739Z","comments":true,"path":"api/articles/微前端实战篇.json","keywords":null,"cover":[],"text":"一.为什么需要微前端?我们通过3W(what,why,how)的方式来讲解微前端 What?什么是微前端? 微前端就是将不同的功能按照不同的维度拆分成多个子应用。通过主应用来加载这些子应用。 微前端的核心在于拆, 拆完后在合! Why?为什么去使用他? 不同团队间开发同一个应用技...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"面试题笔记——代码输出结果篇","uid":"52a992a246e40d85d4ae950cdaebc053","slug":"面试题笔记——代码输出结果篇","date":"2022-06-25T10:41:12.000Z","updated":"2023-04-21T09:44:01.905Z","comments":true,"path":"api/articles/面试题笔记——代码输出结果篇.json","keywords":null,"cover":[],"text":"一、异步&amp;事件循环1. 代码输出结果const promise &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123; console.log(1); console.log(2); &#125;); promise....","link":"","photos":[],"count_time":{"symbolsCount":"41k","symbolsTime":"38 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}