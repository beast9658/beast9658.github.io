{"title":"Antv X6 绘制拖拽流程图","uid":"41fa294c894ff0de66f9b80c0c4a5c37","slug":"Antv X6 绘制拖拽流程图","date":"2021-10-20T09:21:06.000Z","updated":"2023-04-21T09:03:09.746Z","comments":true,"path":"api/articles/Antv X6 绘制拖拽流程图.json","keywords":null,"cover":[],"content":"<h1 id=\"使用antv-x6-绘制拖拽流程图\"><a href=\"#使用antv-x6-绘制拖拽流程图\" class=\"headerlink\" title=\"使用antv x6 绘制拖拽流程图\"></a>使用antv x6 绘制拖拽流程图</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\"># npm\n$ npm install @antv&#x2F;x6 --save\n\n# yarn\n$ yarn add @antv&#x2F;x6\n复制代码</code></pre>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><strong>创建容器</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- 画布 --&gt;\n&lt;div class&#x3D;&quot;graph&quot; ref&#x3D;&quot;graph&quot;&gt;&lt;&#x2F;div&gt;\n&lt;!-- 工具栏 --&gt;\n&lt;div class&#x3D;&quot;stencil&quot; ref&#x3D;&quot;stencil&quot;&gt;&lt;&#x2F;div&gt;\n复制代码</code></pre>\n\n<p><strong>创建实例画布</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 引入\nimport &#123; Graph, Addon, Shape &#125; from &#39;@antv&#x2F;x6&#39;;\n&#x2F;&#x2F; 创建实例\nconst graph &#x3D; new Graph(&#123;\n    container: this.$refs.graph, &#x2F;&#x2F; 画布的容器\n    &#x2F;&#x2F; grid: true, &#x2F;&#x2F; 网格\n    width: 770, \n    height: 590,\n    mousewheel: &#123;\n       enabled: true,\n       zoomAtMousePosition: true,\n       modifiers: &#39;ctrl&#39;,\n       minScale: 0.5,\n       maxScale: 3,\n    &#125;, &#x2F;&#x2F; 鼠标滚轮缩放\n    resizing: true, &#x2F;&#x2F; 缩放节点\n    selecting: &#123;\n        enabled: true,\n        rubberband: true,\n        showNodeSelectionBox: true,\n    &#125;, &#x2F;&#x2F; 点选&#x2F;框选\n    connecting: &#123;\n        router: &#123;\n            name: &#39;manhattan&#39;,\n            args: &#123;\n                padding: 1,\n            &#125;,\n        &#125;,\n        connector: &#123;\n            name: &#39;rounded&#39;,\n            args: &#123;\n                radius: 8,\n            &#125;,\n        &#125;,\n        anchor: &#39;center&#39;,\n        connectionPoint: &#39;anchor&#39;,\n        allowBlank: false,\n        snap: &#123;\n            radius: 20,\n        &#125;,\n        createEdge() &#123;\n            return new Shape.Edge(&#123;\n                attrs: &#123;\n                    line: &#123;\n                        stroke: &#39;#9ED4FF&#39;,\n                        strokeWidth: 2,\n                        targetMarker: &#123;\n                            name: &#39;block&#39;,\n                            width: 12,\n                            height: 8,\n                        &#125;,\n                    &#125;,\n                &#125;,\n                zIndex: 0,\n            &#125;);\n        &#125;,\n        validateConnection(&#123; targetMagnet &#125;) &#123;\n            return !!targetMagnet;\n        &#125;,\n    &#125;, &#x2F;&#x2F; 连线选项\n    highlighting: &#123;\n        magnetAdsorbed: &#123;\n            name: &#39;stroke&#39;,\n            args: &#123;\n                attrs: &#123;\n                    fill: &#39;#5F95FF&#39;,\n                    stroke: &#39;#5F95FF&#39;,\n                &#125;,\n            &#125;,\n        &#125;,\n    &#125;, &#x2F;&#x2F; 高亮选项。\n    snapline: true, &#x2F;&#x2F; 对齐线\n    keyboard: true, &#x2F;&#x2F; 键盘快捷键\n    clipboard: true, &#x2F;&#x2F; 剪切板\n&#125;);\n复制代码</code></pre>\n\n<p><strong>创建工具栏实例</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 工具栏\nconst stencil &#x3D; new Addon.Stencil(&#123;\n    title: &#39;流程图&#39;, &#x2F;&#x2F; 标题\n    target: graph, &#x2F;&#x2F; 目标画布\n    stencilGraphWidth: 600,\n    stencilGraphHeight: 500,\n    collapsable: false, &#x2F;&#x2F; 分组是否可折叠\n    groups: [\n        &#123;\n        title: &#39;基础流程图&#39;,\n        name: &#39;group1&#39;,\n        &#125;,\n    ], &#x2F;&#x2F; 提供的分组\n    layoutOptions: &#123; \n        columns: 1,\n        columnWidth: 80,\n        rowHeight: 50,\n    &#125;, &#x2F;&#x2F; 来对节点进行自动布局\n&#125;);\n&#x2F;&#x2F; 将     this.$refs.stencil.appendChild(stencil.container);\n复制代码</code></pre>\n\n<p><strong>连接点配置</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd208184e6674fb5877f7023a777170d~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"微信图片_20220328104037.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 连接点 上下左右四个连接点\nconst ports &#x3D; &#123;\n    groups: &#123;\n        top: &#123;\n            position: &#39;top&#39;,\n            attrs: &#123;\n                circle: &#123;\n                    r: 4,\n                    magnet: true,\n                    stroke: &#39;#5F95FF&#39;,\n                    strokeWidth: 1,\n                    fill: &#39;#fff&#39;,\n                    style: &#123;\n                        visibility: &#39;hidden&#39;,\n                    &#125;,\n                &#125;,\n            &#125;,\n        &#125;,\n        right: &#123;\n            position: &#39;right&#39;,\n            attrs: &#123;\n                circle: &#123;\n                    r: 4,\n                    magnet: true,\n                    stroke: &#39;#5F95FF&#39;,\n                    strokeWidth: 1,\n                    fill: &#39;#fff&#39;,\n                    style: &#123;\n                        visibility: &#39;hidden&#39;,\n                    &#125;,\n                &#125;,\n            &#125;,\n        &#125;,\n        bottom: &#123;\n            position: &#39;bottom&#39;,\n            attrs: &#123;\n                circle: &#123;\n                    r: 4,\n                    magnet: true,\n                    stroke: &#39;#5F95FF&#39;,\n                    strokeWidth: 1,\n                    fill: &#39;#fff&#39;,\n                    style: &#123;\n                        visibility: &#39;hidden&#39;,\n                    &#125;,\n                &#125;,\n            &#125;,\n        &#125;,\n        left: &#123;\n            position: &#39;left&#39;,\n            attrs: &#123;\n                circle: &#123;\n                    r: 4,\n                    magnet: true,\n                    stroke: &#39;#5F95FF&#39;,\n                    strokeWidth: 1,\n                    fill: &#39;#fff&#39;,\n                    style: &#123;\n                        visibility: &#39;hidden&#39;,\n                    &#125;,\n                &#125;,\n            &#125;,\n        &#125;,\n    &#125;,\n    items: [\n        &#123;\n            group: &#39;top&#39;,\n        &#125;,\n        &#123;\n            group: &#39;right&#39;,\n        &#125;,\n        &#123;\n            group: &#39;bottom&#39;,\n        &#125;,\n        &#123;\n            group: &#39;left&#39;,\n        &#125;,\n    ],\n&#125;;\n复制代码</code></pre>\n\n<p><strong>自定义节点</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 自定义节点\nGraph.registerNode(\n    &#39;custom-rect&#39;,\n    &#123;\n        inherit: &#39;rect&#39;,\n        width: 66,\n        height: 36,\n        attrs: &#123;\n            body: &#123;\n                strokeWidth: 1,\n                stroke: &#39;#5F95FF&#39;,\n                fill: &#39;#EFF4FF&#39;,\n            &#125;,\n            text: &#123;\n                fontSize: 12,\n                fill: &#39;#262626&#39;,\n            &#125;,\n        &#125;,\n        ports: &#123; ...ports &#125;,\n    &#125;,\n    true\n);\n\nGraph.registerNode(\n    &#39;custom-polygon&#39;,\n    &#123;\n        inherit: &#39;polygon&#39;,\n        width: 66,\n        height: 36,\n        attrs: &#123;\n            body: &#123;\n                strokeWidth: 1,\n                stroke: &#39;#5F95FF&#39;,\n                fill: &#39;#EFF4FF&#39;,\n            &#125;,\n            text: &#123;\n                fontSize: 12,\n                fill: &#39;#262626&#39;,\n            &#125;,\n        &#125;,\n        ports: &#123;\n            ...ports,\n            items: [\n                &#123;\n                    group: &#39;top&#39;,\n                &#125;,\n                &#123;\n                    group: &#39;bottom&#39;,\n                &#125;,\n            ],\n        &#125;,\n    &#125;,\n    true\n);\n\nGraph.registerNode(\n    &#39;custom-circle&#39;,\n    &#123;\n        inherit: &#39;circle&#39;,\n        width: 45,\n        height: 45,\n        attrs: &#123;\n            body: &#123;\n                strokeWidth: 1,\n                stroke: &#39;#5F95FF&#39;,\n                fill: &#39;#EFF4FF&#39;,\n            &#125;,\n            text: &#123;\n                fontSize: 12,\n                fill: &#39;#262626&#39;,\n            &#125;,\n        &#125;,\n        ports: &#123; ...ports &#125;,\n    &#125;,\n    true\n);\n\nconst r1 &#x3D; graph.createNode(&#123;\n    shape: &#39;custom-rect&#39;,\n    attrs: &#123;\n        text: &#123;\n            fontSize: 18,\n        &#125;,\n        body: &#123;\n            rx: 40,\n            ry: 26,\n        &#125;,\n    &#125;,\n&#125;);\nconst r2 &#x3D; graph.createNode(&#123;\n    shape: &#39;custom-rect&#39;,\n    attrs: &#123;\n        text: &#123;\n            fontSize: 18,\n        &#125;,\n    &#125;,\n&#125;);\nconst r3 &#x3D; graph.createNode(&#123;\n    shape: &#39;custom-rect&#39;,\n    attrs: &#123;\n        text: &#123;\n            fontSize: 18,\n        &#125;,\n        body: &#123;\n            rx: 6,\n            ry: 6,\n        &#125;,\n    &#125;,\n&#125;);\nconst r4 &#x3D; graph.createNode(&#123;\n    shape: &#39;custom-polygon&#39;,\n    attrs: &#123;\n        body: &#123;\n            refPoints: &#39;0,10 10,0 20,10 10,20&#39;,\n        &#125;,\n        text: &#123;\n            fontSize: 18,\n        &#125;,\n    &#125;,\n&#125;);\nstencil.load([r1, r2, r3, r4], &#39;group1&#39;);\n复制代码</code></pre>\n\n<p><strong>快捷键和事件触发</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 快捷键与事件\n&#x2F;&#x2F; 复制粘贴\ngraph.bindKey([&#39;meta+c&#39;, &#39;ctrl+c&#39;], () &#x3D;&gt; &#123;\n    const cells &#x3D; graph.getSelectedCells();\n    if (cells.length) &#123;\n    \tgraph.copy(cells);\n    &#125;\n\treturn false;\n&#125;);\ngraph.bindKey([&#39;meta+x&#39;, &#39;ctrl+x&#39;], () &#x3D;&gt; &#123;\n    const cells &#x3D; graph.getSelectedCells();\n    if (cells.length) &#123;\n    \tgraph.cut(cells);\n\t&#125;\n\treturn false;\n&#125;);\ngraph.bindKey([&#39;meta+v&#39;, &#39;ctrl+v&#39;], () &#x3D;&gt; &#123;\n    if (!graph.isClipboardEmpty()) &#123;\n        const cells &#x3D; graph.paste(&#123; offset: 32 &#125;);\n        graph.cleanSelection();\n        graph.select(cells);\n    &#125;\n    return false;\n&#125;);\n&#x2F;&#x2F; 控制连接桩显示&#x2F;隐藏\nvar showPorts &#x3D; function (ports, show) &#123;\n    for (var i &#x3D; 0, len &#x3D; ports.length; i &lt; len; i &#x3D; i + 1) &#123;\n    \tports[i].style.visibility &#x3D; show ? &#39;visible&#39; : &#39;hidden&#39;;\n    &#125;\n&#125;;\n&#x2F;&#x2F; 触摸\ngraph.on(&#39;node:mouseenter&#39;, (&#123; node &#125;) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 显示节点删除按钮\n    node.addTools(&#123;\n        name: &#39;button-remove&#39;,\n        args: &#123;\n            x: &#39;100%&#39;,\n            y: 0,\n            offset: &#123; x: -10, y: 10 &#125;,\n        &#125;,\n\t&#125;);\n    var container &#x3D; this.$refs.graph;\n    var ports &#x3D; container.querySelectorAll(&#39;.x6-port-body&#39;);\n    showPorts(ports, true);\n&#125;);\ngraph.on(&#39;node:mouseleave&#39;, (&#123; node &#125;) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 移除节点删除按钮\n    node.removeTools();\n    var container &#x3D; this.$refs.graph;\n    var ports &#x3D; container.querySelectorAll(&#39;.x6-port-body&#39;);\n    showPorts(ports, false);\n&#125;);\n&#x2F;&#x2F; 文字输入\ngraph.on(&#39;cell:dblclick&#39;, (&#123; cell, e &#125;) &#x3D;&gt; &#123;\n    const isNode &#x3D; cell.isNode();\n    const name &#x3D; cell.isNode() ? &#39;node-editor&#39; : &#39;edge-editor&#39;;\n    cell.removeTool(name);\n    cell.addTools(&#123;\n        name,\n        args: &#123;\n            event: e,\n            attrs: &#123;\n                backgroundColor: isNode ? &#39;#EFF4FF&#39; : &#39;#FFF&#39;,\n                fontSize: 18,\n            &#125;,\n        &#125;,\n    &#125;);\n&#125;);   \n复制代码</code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e610c6d1942b4941ae6f1b68b0996e53~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image-20220328103743007.png\"></p>\n","text":"使用antv x6 绘制拖拽流程图安装# npm $ npm install @antv&#x2F;x6 --save # yarn $ yarn add @antv&#x2F;x6 复制代码 使用创建容器 &lt;!-- 画布 --&gt; &lt;div class&#x3D...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8antv-x6-%E7%BB%98%E5%88%B6%E6%8B%96%E6%8B%BD%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">使用antv x6 绘制拖拽流程图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a></li></ol></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"分片加载超长列表渲染","uid":"22a53fdfd136fdbe0a4b16b8cca4b9ec","slug":"分片加载超长列表渲染","date":"2021-11-03T13:50:32.000Z","updated":"2023-04-21T09:05:05.486Z","comments":true,"path":"api/articles/分片加载超长列表渲染.json","keywords":null,"cover":null,"text":"很早以前就有面试问超长列表如何优化，那时候觉得一般前端不会有这种功能，有也是分页，也就没有去关注。今天分享一个超长列表渲染的优化方法，分片加载，现在几乎也都不会用了，但是还是要知道这个东西。 先明确eventloop的机制，js是单线程的，当你第一个主线程执行过程中，遇到宏任务就...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"React Hooks的学习笔记","uid":"15b860383ab68e267beb31ba2d0c1dea","slug":"React Hooks的学习笔记","date":"2021-09-15T12:50:54.000Z","updated":"2023-04-21T08:53:56.671Z","comments":true,"path":"api/articles/React Hooks的学习笔记.json","keywords":null,"cover":null,"text":"Hooks的起步使用其实Hooks主要常用的可以有以下几个： useState useEffect useContext useMemo useRef useReducer useCallback 列举的以上这几个，其实已经算是比较常用的，尤其是前两个，接下来就会介绍它们部分几个...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}