{"title":"webpack 优化打包大全","uid":"3e28ba7063fc55b29481d21803e77406","slug":"webpack 优化打包大全","date":"2023-03-02T05:46:21.000Z","updated":"2023-04-24T09:45:57.704Z","comments":true,"path":"api/articles/webpack 优化打包大全.json","keywords":null,"cover":null,"content":"<h1 id=\"webpack-优化打包大全\"><a href=\"#webpack-优化打包大全\" class=\"headerlink\" title=\"webpack 优化打包大全\"></a>webpack 优化打包大全</h1><p>随着我们的项目项目越做越大，引入的第三方库会越来越多，打包的依赖也越来越多，每次 build 的时间越来越长，打包出来的文件会越来越大。最糟糕的是单页面应用首页白屏时间长，用户体验差。</p>\n<p>此时优化 webpack 打包方法不可回避。下面我们来整理一下常用的 webpack 打包优化方法。</p>\n<p><strong>我们的目的</strong></p>\n<ul>\n<li>减小打包后的文件大小</li>\n<li>首页按需引入文件，减少白屏时间</li>\n<li>优化 webpack 打包时间</li>\n</ul>\n<h2 id=\"分析-webpack-打包性能瓶颈\"><a href=\"#分析-webpack-打包性能瓶颈\" class=\"headerlink\" title=\"分析 webpack 打包性能瓶颈\"></a><a href=\"\"></a>分析 webpack 打包性能瓶颈</h2><p>首先我们来分析一下 webpack 打包性能瓶颈，找出问题所在，然后才能对症下药。</p>\n<h4 id=\"1、webpack-bundle-analyzer-分析体积\"><a href=\"#1、webpack-bundle-analyzer-分析体积\" class=\"headerlink\" title=\"1、webpack-bundle-analyzer 分析体积\"></a><a href=\"\"></a>1、webpack-bundle-analyzer 分析体积</h4><ul>\n<li>vue-cli3 需要安装依赖 <code>webpack-bundle-analyzer</code></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install webpack-bundle-analyzer -D\nconst &#123; BundleAnalyzerPlugin &#125; &#x3D; require(&#39;webpack-bundle-analyzer&#39;);\nplugins:[\n  new BundleAnalyzerPlugin(),\n]</code></pre>\n\n<ul>\n<li>vue-cli2 直接在命令行输入 <code>npm run build --report</code>, 构建完成后会在 8888 端口展示大小</li>\n</ul>\n<h4 id=\"2、测量构建时间\"><a href=\"#2、测量构建时间\" class=\"headerlink\" title=\"2、测量构建时间\"></a><a href=\"\"></a>2、测量构建时间</h4><p>我们可以通过 <code>speed-measure-webpack-plugin</code> 测量你的 webpack 构建期间各个阶段花费的时间。</p>\n<ol>\n<li>步骤一：安装依赖包</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install speed-measure-webpack-plugin --save-dev</code></pre>\n\n<ol>\n<li>配置 vue.config.js</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 分析打包时间\nconst SpeedMeasurePlugin &#x3D; require(&#39;speed-measure-webpack-plugin&#39;)\nconst smp &#x3D; new SpeedMeasurePlugin()\n&#x2F;&#x2F; ...\nmodule.exports &#x3D; &#123;\n  configureWebpack: smp.wrap(&#123;\n    plugins: [new BundleAnalyzerPlugin()],\n  &#125;),\n&#125;</code></pre>\n\n<p><strong>找出问题所在后我们开始来总结一下优化方法。</strong></p>\n<h2 id=\"1、-按需加载\"><a href=\"#1、-按需加载\" class=\"headerlink\" title=\"1、 按需加载\"></a><a href=\"\"></a>1、 按需加载</h2><p>1.1 路由组件按需加载</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const router &#x3D; [\n  &#123;\n    path: &#39;&#x2F;index&#39;,\n    component: (resolve) &#x3D;&gt; require.ensure([], () &#x3D;&gt; resolve(require(&#39;@&#x2F;components&#x2F;index&#39;))),\n  &#125;,\n  &#123;\n    path: &#39;&#x2F;about&#39;,\n    component: (resolve) &#x3D;&gt; require.ensure([], () &#x3D;&gt; resolve(require(&#39;@&#x2F;components&#x2F;about&#39;))),\n  &#125;,\n]</code></pre>\n\n<p>1.2 第三方组件和插件。按需加载需引入第三方组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 引入全部组件\nimport ElementUI from &#39;element-ui&#39;\nimport &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;\nVue.use(ElementUI)\n\n&#x2F;&#x2F; 按需引入组件\nimport &#123; Button &#125; from &#39;element-ui&#39;\nVue.component(Button.name, Button)</code></pre>\n\n<p>1.3 对于一些插件，如果只是在个别组件中用的到，也可以不要在 main.js 里面引入，而是在组件中按需引入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 在main.js引入\nimport Vue from vue\nimport Vuelidate from &#39;vuelidate&#39;\nVue.use(Vuelidate)\n\n&#x2F;&#x2F; 按组件按需引入\nimport &#123; Vuelidate &#125; from &#39;vuelidate&#39;</code></pre>\n\n<p>1.4 去除打包后文件的预加载 prefetch&#x2F;preload</p>\n<p>vuecli 3 默认开启 prefetch(预先加载模块)，提前获取用户未来可能会访问的内容，在首屏会把这十几个路由文件，都一口气下载了。所以我们要关闭这个功能</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;细节配置修改\nchainWebpack: (config) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 移除 prefetch 插件\n  config.plugins.delete(&#39;prefetch-index&#39;)\n  &#x2F;&#x2F; 移除 preload 插件\n  config.plugins.delete(&#39;preload-index&#39;)\n&#125;</code></pre>\n\n<ul>\n<li>preload 是告诉浏览器页面必定需要的资源，浏览器一定会加载这些资源</li>\n<li>prefetch 是告诉浏览器页面可能需要的资源，浏览器不一定会加载这些资源</li>\n</ul>\n<p>当 prefetch 插件被禁用时，你可以通过 webpack 的内联注释手动选定要提前获取的代码区块：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import(&#x2F;* webpackPrefetch: true *&#x2F; &#39;.&#x2F;someAsyncComponent.vue&#39;)</code></pre>\n\n<h2 id=\"2、缩小构建目标\"><a href=\"#2、缩小构建目标\" class=\"headerlink\" title=\"2、缩小构建目标\"></a><a href=\"\"></a>2、缩小构建目标</h2><h4 id=\"优化-loader-配置\"><a href=\"#优化-loader-配置\" class=\"headerlink\" title=\"优化 loader 配置\"></a><a href=\"\"></a>优化 loader 配置</h4><p>排除 Webpack 不需要解析的模块，即使用 loader 的时候，在尽量少的模块中去使用。</p>\n<ul>\n<li>优化正则匹配</li>\n<li>通过 <code>cacheDirectory</code> 选项开启缓存</li>\n<li>通过 <code>include、exclude</code> 来减少被处理的文件。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module: &#123;\n  rules: [\n    &#123;\n      test: &#x2F;.js$&#x2F;,\n      loader: &#39;babel-loader?cacheDirectory&#39;,\n      include: [resolve(&#39;src&#39;)],\n    &#125;,\n  ]\n&#125;</code></pre>\n\n<p>注意：保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 loader 使用此 loader。</p>\n<h4 id=\"合理使用-resolve-extensions\"><a href=\"#合理使用-resolve-extensions\" class=\"headerlink\" title=\"合理使用 resolve.extensions\"></a><a href=\"\"></a>合理使用 resolve.extensions</h4><p>在导入语句没带文件后缀时，Webpack 会自动带上后缀后去尝试询问文件是否存在，查询的顺序是按照我们配置 的 resolve.extensions 顺序从前到后查找，Webpack 默认支持的后缀是 js 与 json。</p>\n<h4 id=\"配置别名-alias\"><a href=\"#配置别名-alias\" class=\"headerlink\" title=\"配置别名 alias\"></a><a href=\"\"></a>配置别名 alias</h4><p>alias 的意思为 别名，能把原导入路径映射成一个新的导入路径，我们可以使用 alias 配置来减少查找过程。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">resolve: &#123;\n  extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],\n  alias: &#123;\n    &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;,\n    &#39;@&#39;: resolve(&#39;src&#39;),\n  &#125;\n&#125;,</code></pre>\n\n<h4 id=\"使用-module-noParse\"><a href=\"#使用-module-noParse\" class=\"headerlink\" title=\"使用 module.noParse:\"></a><a href=\"\"></a>使用 module.noParse:</h4><p>让 webpack 忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能。 因为如 <code>jQuery</code> 、<code>echart</code> 等库庞大又没有采用模块化标准，让 webpack 去解析这些文件耗时又没有意义。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module:&#123;\n    noParse:&#x2F;jquery&#x2F;,&#x2F;&#x2F;不去解析jquery中的依赖库\n  ...\n&#125;,</code></pre>\n\n<h2 id=\"4、生产环境关闭-sourceMap\"><a href=\"#4、生产环境关闭-sourceMap\" class=\"headerlink\" title=\"4、生产环境关闭 sourceMap\"></a><a href=\"\"></a>4、生产环境关闭 sourceMap</h2><p><code>sourceMap</code> 本质上是一种映射关系，打包出来的 js 文件中的代码可以映射到代码文件的具体位置,这种映射关系会帮助我们直接找到在源代码中的错误。<br>在生产环境，打包速度减慢，生产文件变大，所以开发环境使用 <code>sourceMap</code>，生产环境则关闭。</p>\n<p>sourceMap 的种类</p>\n<ul>\n<li>source-map: 会生成 map 格式的文件，里面包含映射关系的代码</li>\n<li>inline-source-map: 不会生成 map 格式的文件，包含映射关系的代码会放在打包后生成的代码中</li>\n<li>inline-cheap-source-map: 一是将错误只定位到行，不定位到列。二是映射业务代码，不映射 loader 和第三方库等。会提升打包构建的速度。</li>\n<li>inline-cheap-module-source-map: module 会映射 loader 和第三方库</li>\n<li>eval: 用 eval 的方式生成映射关系代码，效率和性能最佳。但是当代码复杂时，提示信息可能不精确。</li>\n</ul>\n<h2 id=\"5、代码压缩\"><a href=\"#5、代码压缩\" class=\"headerlink\" title=\"5、代码压缩\"></a><a href=\"\"></a>5、代码压缩</h2><h4 id=\"UglifyJS\"><a href=\"#UglifyJS\" class=\"headerlink\" title=\"UglifyJS\"></a><a href=\"\"></a>UglifyJS</h4><p><code>UglifyJS</code> 是 vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">plugins: [\n  new UglifyJsPlugin(&#123;\n    uglifyOptions: &#123;\n      compress: &#123;\n        warnings: false\n      &#125;\n    &#125;,\n    sourceMap: true,\n    parallel: true\n  &#125;)</code></pre>\n\n<h4 id=\"ParallelUglifyPlugin\"><a href=\"#ParallelUglifyPlugin\" class=\"headerlink\" title=\"ParallelUglifyPlugin\"></a><a href=\"\"></a>ParallelUglifyPlugin</h4><p><code>ParallelUglifyPlugin</code> 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成，每个子进程其实还是通过 <code>UglifyJS</code> 去压缩代码，但是变成了并行执行。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">plugins: [\n  new ParallelUglifyPlugin(&#123;\n    &#x2F;&#x2F;缓存压缩后的结果，下次遇到一样的输入时直接从缓存中获取压缩后的结果并返回，\n    &#x2F;&#x2F;cacheDir 用于配置缓存存放的目录路径。\n    cacheDir: &#39;.cache&#x2F;&#39;,\n    sourceMap: true,\n    uglifyJS: &#123;\n      output: &#123;\n        comments: false,\n      &#125;,\n      compress: &#123;\n        warnings: false,\n      &#125;,\n    &#125;,\n  &#125;),\n]</code></pre>\n\n<p>打包速度和打包后的文件大小对比</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>文件大小</th>\n<th>打包速度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>不用插件</td>\n<td>14.6M</td>\n<td>32s</td>\n</tr>\n<tr>\n<td>UglifyJsPlugin</td>\n<td>12.9M</td>\n<td>33s</td>\n</tr>\n<tr>\n<td>ParallelUglifyPlugi</td>\n<td>7.98M</td>\n<td>17s</td>\n</tr>\n</tbody></table>\n<h4 id=\"terser-webpack-plugin\"><a href=\"#terser-webpack-plugin\" class=\"headerlink\" title=\"terser-webpack-plugin\"></a><a href=\"\"></a>terser-webpack-plugin</h4><p>Webpack4.0 默认是使用 <code>terser-webpack-plugin</code> 这个压缩插件，在此之前是使用 <code>uglifyjs-webpack-plugin</code>，两者的区别是后者对 ES6 的压缩不是很好，同时我们可以开启 <code>parallel</code> 参数，使用多进程压缩，加快压缩。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const TerserPlugin &#x3D; require(&#39;terser-webpack-plugin&#39;) &#x2F;&#x2F; 压缩js代码\nconst OptimizeCSSAssetsPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;) &#x2F;&#x2F; 压缩css代码\n\noptimization: &#123;\n  minimizer: [\n    new TerserPlugin(&#123;\n      parallel: 4, &#x2F;&#x2F; 开启几个进程来处理压缩，默认是 os.cpus().length - 1\n      cache: true, &#x2F;&#x2F; 是否缓存\n      sourceMap: false,\n    &#125;),\n  ]\n&#125;</code></pre>\n\n<h4 id=\"CSS-压缩\"><a href=\"#CSS-压缩\" class=\"headerlink\" title=\"CSS 压缩\"></a><a href=\"\"></a>CSS 压缩</h4><p>我们可以借助 optimize-css-assets-webpack-plugin 插件来压缩 css，其默认使用的压缩引擎是 cssnano</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const OptimizeCSSAssetsPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;) &#x2F;&#x2F; 压缩css代码\n\noptimization: &#123;\n  minimizer: [\n    &#x2F;&#x2F; 压缩css\n    new OptimizeCSSAssetsPlugin(&#123;&#125;),\n  ]\n&#125;</code></pre>\n\n<h2 id=\"6、提取公共代码\"><a href=\"#6、提取公共代码\" class=\"headerlink\" title=\"6、提取公共代码\"></a><a href=\"\"></a>6、提取公共代码</h2><p>在用 webpack 打包的时候，对于一些不经常更新的第三方库，比如 <code>react，lodash，vue</code> 我们希望能和自己的代码分离开，webpack 社区有以下两种方案：</p>\n<h4 id=\"CommonsChunkPlugin-及-splitChunks\"><a href=\"#CommonsChunkPlugin-及-splitChunks\" class=\"headerlink\" title=\"CommonsChunkPlugin 及 splitChunks\"></a><a href=\"\"></a>CommonsChunkPlugin 及 splitChunks</h4><p>通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。</p>\n<p>webpack3 使用 <code>CommonsChunkPlugin</code> 的实现：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">plugins: [\n  new webpack.optimize.CommonsChunkPlugin(&#123;\n    name: &#39;vendor&#39;,\n    minChunks: function (module, count) &#123;\n      console.log(module.resource, &#96;引用次数$&#123;count&#125;&#96;)\n      &#x2F;&#x2F;&quot;有正在处理文件&quot; + &quot;这个文件是 .js 后缀&quot; + &quot;这个文件是在 node_modules 中&quot;\n      return (\n        module.resource &amp;&amp;\n        &#x2F;.js$&#x2F;.test(module.resource) &amp;&amp;\n        module.resource.indexOf(path.join(__dirname, &#39;.&#x2F;node_modules&#39;)) &#x3D;&#x3D;&#x3D; 0\n      )\n    &#125;,\n  &#125;),\n  new webpack.optimize.CommonsChunkPlugin(&#123;\n    name: &#39;common&#39;,\n    chunks: &#39;initial&#39;,\n    minChunks: 2,\n  &#125;),\n]</code></pre>\n\n<p>webpack4 使用 <code>splitChunks</code> 的实现：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports &#x3D; &#123;\n  optimization: &#123;\n    splitChunks: &#123;\n      cacheGroups: &#123;\n        vendor: &#123;\n          priority: 1, &#x2F;&#x2F;添加权重\n          test: &#x2F;node_modules&#x2F;, &#x2F;&#x2F;把这个目录下符合下面几个条件的库抽离出来\n          chunks: &#39;initial&#39;, &#x2F;&#x2F;刚开始就要抽离\n          minChunks: 2, &#x2F;&#x2F;重复2次使用的时候需要抽离出来\n        &#125;,\n        common: &#123;\n          &#x2F;&#x2F;公共的模块\n          chunks: &#39;initial&#39;,\n          minChunks: 2,\n        &#125;,\n      &#125;,\n    &#125;,\n  &#125;,\n&#125;</code></pre>\n\n<h4 id=\"DLLPlugin\"><a href=\"#DLLPlugin\" class=\"headerlink\" title=\"DLLPlugin\"></a><a href=\"\"></a>DLLPlugin</h4><p>webpack.DllPlugin 就是来解决这个问题的插件，使用它可以在第一次编译打包后就生成一份不变的代码供其他模块引用，这样下一次构建的时候就可以节省开发时编译打包的时间。</p>\n<p>1、在 build 下创建 <code>webpack.dll.config.js</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const path &#x3D; require(&#39;path&#39;)\nconst webpack &#x3D; require(&#39;webpack&#39;)\nmodule.exports &#x3D; &#123;\n  entry: &#123;\n    vendor: [\n      &#39;vue-router&#39;,\n      &#39;vuex&#39;,\n      &#39;vue&#x2F;dist&#x2F;vue.common.js&#39;,\n      &#39;vue&#x2F;dist&#x2F;vue.js&#39;,\n      &#39;vue-loader&#x2F;lib&#x2F;component-normalizer.js&#39;,\n      &#39;vue&#39;,\n      &#39;axios&#39;,\n      &#39;echarts&#39;,\n    ],\n  &#125;,\n  output: &#123;\n    path: path.resolve(&#39;.&#x2F;dist&#39;),\n    filename: &#39;[name].dll.js&#39;,\n    library: &#39;[name]_library&#39;,\n  &#125;,\n  plugins: [\n    new webpack.DllPlugin(&#123;\n      path: path.resolve(&#39;.&#x2F;dist&#39;, &#39;[name]-manifest.json&#39;),\n      name: &#39;[name]_library&#39;,\n    &#125;),\n    &#x2F;&#x2F; 建议加上代码压缩插件，否则dll包会比较大。\n    new webpack.optimize.UglifyJsPlugin(&#123;\n      compress: &#123;\n        warnings: false,\n      &#125;,\n    &#125;),\n  ],\n&#125;</code></pre>\n\n<ul>\n<li><code>library</code> 的意思其实就是将 dll 文件以一个全局变量的形式导出出去，便于接下来引用。</li>\n<li><code>mainfest.json</code> 文件是一个映射关系，它的作用就是帮助 webpack 使用我们之前打包好的 <code>***.dll.js</code> 文件，而不是重新再去 <code>node_modules</code> 中去寻找。</li>\n</ul>\n<p>2、在 <code>webpack.prod.conf.js</code> 的 plugin 后面加入配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">new webpack.DllReferencePlugin(&#123;\n  manifest: require(&#39;..&#x2F;dist&#x2F;vendor-manifest.json&#39;),\n&#125;)</code></pre>\n\n<p>3、<code>package.json</code>文件中添加快捷命令<code>(build:dll)</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;scripts&quot;: &#123;\n  &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build&#x2F;webpack.dev.conf.js&quot;,\n  &quot;start&quot;: &quot;npm run dev&quot;,\n  &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;,\n  &quot;build&quot;: &quot;node build&#x2F;build.js&quot;,\n  &quot;build:dll&quot;: &quot;webpack --config build&#x2F;webpack.dll.conf.js&quot;\n&#125;</code></pre>\n\n<p>生产环境打包的时候先<code>npm run build:dll</code>命令会在打包目录下生成 <code>vendor-manifest.json</code> 文件与 vendor.dll.js 文件。然后<code>npm run build</code>生产其他文件。</p>\n<p>4、根目录下的入口 <code>index.html</code> 加入引用</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;vendor.dll.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"7、CDN-优化\"><a href=\"#7、CDN-优化\" class=\"headerlink\" title=\"7、CDN 优化\"></a><a href=\"\"></a>7、CDN 优化</h2><ul>\n<li>随着项目越做越大，依赖的第三方 npm 包越来越多，构建之后的文件也会越来越大。</li>\n<li>再加上又是单页应用，这就会导致在网速较慢或者服务器带宽有限的情况出现长时间的白屏。</li>\n</ul>\n<p>1、将 <code>vue、vue-router、vuex、element-ui 和 axios</code> 这五个库，全部改为通过 CDN 链接获取，在 <code>index.html</code> 里插入 相应链接。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;head&gt;\n  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;element-ui&#x2F;2.0.7&#x2F;theme-chalk&#x2F;index.css&quot; &#x2F;&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.6.10&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;axios&#x2F;0.19.0-beta.1&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vuex&#x2F;3.1.0&#x2F;vuex.min.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue-router&#x2F;3.0.2&#x2F;vue-router.min.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;element-ui&#x2F;2.6.1&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;!-- built files will be auto injected --&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>2、在 <code>webpack.config.js</code> 配置文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports &#x3D; &#123;\n ···\n    externals: &#123;\n      &#39;vue&#39;: &#39;Vue&#39;,\n      &#39;vuex&#39;: &#39;Vuex&#39;,\n      &#39;vue-router&#39;: &#39;VueRouter&#39;,\n      &#39;element-ui&#39;: &#39;ELEMENT&#39;,\n      &#39;Axios&#39;:&#39;axios&#39;\n    &#125;\n  &#125;,</code></pre>\n\n<p>3、卸载依赖的 npm 包</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm uninstall axios element-ui vue vue-router vuex</code></pre>\n\n<p>4、修改 <code>main.js</code> 文件里之前的引包方式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; import Vue from &#39;vue&#39;\n&#x2F;&#x2F; import ElementUI from &#39;element-ui&#39;\n&#x2F;&#x2F; import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;\n&#x2F;&#x2F; import VueRouter from &#39;vue-router&#39;\n\nimport App from &#39;.&#x2F;App.vue&#39;\nimport routes from &#39;.&#x2F;router&#39;\nimport utils from &#39;.&#x2F;utils&#x2F;Utils&#39;\n\nVue.use(ELEMENT)\nVue.use(VueRouter)\n\nconst router &#x3D; new VueRouter(&#123;\n  mode: &#39;hash&#39;, &#x2F;&#x2F;路由的模式\n  routes,\n&#125;)\n\nnew Vue(&#123;\n  router,\n  el: &#39;#app&#39;,\n  render: (h) &#x3D;&gt; h(App),\n&#125;)</code></pre>\n\n<h4 id=\"html-webpack-externals-plugin\"><a href=\"#html-webpack-externals-plugin\" class=\"headerlink\" title=\"html-webpack-externals-plugin\"></a><a href=\"\"></a>html-webpack-externals-plugin</h4><p>这种方法每次都需要在 index.html 模板中手动引入需要的 cdn 文件，然后还要在 webpack 里配置，有点繁琐了<br><code>html-webpack-externals-plugin</code>这样的插件就应运而生了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; webpack.config.js文件\nconst HtmlWebpackExternalsPlugin &#x3D; require(&#39;html-webpack-externals-plugin&#39;)\n\nmodule.exports &#x3D; &#123;\n  plugins: [\n    new HtmlWebpackExternalsPlugin(&#123;\n      externals: [\n        &#123;\n          &#x2F;&#x2F; 引入的模块\n          module: &#39;jquery&#39;,\n          &#x2F;&#x2F; cdn的地址\n          entry: &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.4.1&#x2F;jquery.min.js&#39;,\n          &#x2F;&#x2F; 挂载到了window上的名称\n          global: &#39;jQuery&#39;,\n        &#125;,\n        &#123;\n          module: &#39;vue&#39;,\n          entry: &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.6.10&#x2F;vue.min.js&#39;,\n          global: &#39;Vue&#39;,\n        &#125;,\n      ],\n    &#125;),\n  ],\n&#125;</code></pre>\n\n<h2 id=\"8、多进程解析和处理文件\"><a href=\"#8、多进程解析和处理文件\" class=\"headerlink\" title=\"8、多进程解析和处理文件\"></a><a href=\"\"></a>8、多进程解析和处理文件</h2><p>由于运行在 Node.js 之上的 webpack 是单线程模型的，所以 webpack 需要处理的事情需要一件一件的做，不能多件事一起做。当 webpack 需要打包大量文件时，打包时间就会比较漫长。</p>\n<p>以下两个方法能让 webpack 在同一时刻处理多个任务发挥多核 CPU 电脑的功能，提升构建速度。</p>\n<h4 id=\"thread-loader\"><a href=\"#thread-loader\" class=\"headerlink\" title=\"thread loader\"></a><a href=\"\"></a>thread loader</h4><p>把这个 <code>thread loader</code> 放置在其他 loader 之前， 放置在这个 loader 之后的 loader 就会在一个单独的 worker 池(worker pool)中运行。</p>\n<p>在 worker 池(worker pool)中运行的 loader 是受到限制的。例如：</p>\n<ul>\n<li>这些 loader 不能产生新的文件。</li>\n<li>这些 loader 不能使用定制的 loader API（也就是说，通过插件）。</li>\n<li>这些 loader 无法获取 webpack 的选项设置。</li>\n</ul>\n<p>每个 worker 都是一个单独的有 600ms 限制的 node.js 进程。同时跨进程的数据交换也会被限制。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports &#x3D; &#123;\n  module: &#123;\n    rules: [\n      &#123;\n        test: &#x2F;.js$&#x2F;,\n        include: path.resolve(&#39;src&#39;),\n        use: [&#39;thread-loader&#39;, &#39;expensive-loader&#39;],\n      &#125;,\n    ],\n  &#125;,\n&#125;</code></pre>\n\n<h4 id=\"HappyPack\"><a href=\"#HappyPack\" class=\"headerlink\" title=\"HappyPack\"></a><a href=\"\"></a>HappyPack</h4><p><code>HappyPack</code> 能让 webpack 把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。要注意的是 HappyPack 对 file-loader、url-loader 支持的不友好，所以不建议对该 loader 使用。</p>\n<p>使用方法如下：</p>\n<p>1、 HappyPack 插件安装</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i -D happypack</code></pre>\n\n<p>2、 <code>webpack.base.conf.js</code> 文件对 module.rules 进行配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module: &#123;\n  rules: [\n    &#123;\n      test: &#x2F;.js$&#x2F;,\n      use: [&#39;happypack&#x2F;loader?id&#x3D;babel&#39;],\n      include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;)],\n      exclude: path.resolve(__dirname, &#39;node_modules&#39;),\n    &#125;,\n    &#123;\n      test: &#x2F;.vue$&#x2F;,\n      use: [&#39;happypack&#x2F;loader?id&#x3D;vue&#39;],\n    &#125;,\n  ]\n&#125;</code></pre>\n\n<p>3、在生产环境 <code>webpack.prod.conf.js</code> 文件进行配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const HappyPack &#x3D; require(&#39;happypack&#39;)\n&#x2F;&#x2F; 构造出共享进程池，在进程池中包含5个子进程\nconst HappyPackThreadPool &#x3D; HappyPack.ThreadPool(&#123; size: 5 &#125;)\nplugins: [\n  new HappyPack(&#123;\n    &#x2F;&#x2F; 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件\n    id: &#39;babel&#39;,\n    &#x2F;&#x2F; 如何处理.js文件，用法和Loader配置中一样\n    loaders: [&#39;babel-loader?cacheDirectory&#39;],\n    threadPool: HappyPackThreadPool,\n  &#125;),\n  new HappyPack(&#123;\n    id: &#39;vue&#39;, &#x2F;&#x2F; 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件\n    loaders: [\n      &#123;\n        loader: &#39;vue-loader&#39;,\n        options: vueLoaderConfig,\n      &#125;,\n    ],\n    threadPool: HappyPackThreadPool,\n  &#125;),\n]</code></pre>\n\n<p><strong>注意，当项目较小时，多线程打包反而会使打包速度变慢。</strong></p>\n<h2 id=\"9-启用-gzip-压缩\"><a href=\"#9-启用-gzip-压缩\" class=\"headerlink\" title=\"9. 启用 gzip 压缩\"></a><a href=\"\"></a>9. 启用 gzip 压缩</h2><p>使用 Gzip 两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。</p>\n<p>1、安装依赖</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i compression-webpack-plugin --save</code></pre>\n\n<p>2、在 vue.congig.js 中引入并修改 webpack 配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const CompressionPlugin &#x3D; require(&#39;compression-webpack-plugin&#39;)\nmodule.exports &#x3D; &#123;\n  configureWebpack: (config) &#x3D;&gt; &#123;\n    if (progress.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;\n      return &#123;\n        plugins: [\n          new CompressionPlugin(&#123;\n            test: &#x2F;.js$|.html$|.\\css&#x2F;, &#x2F;&#x2F;匹配文件名\n            threshold: 10240, &#x2F;&#x2F;对超过10k的数据压缩\n            deleteOriginalAssets: false, &#x2F;&#x2F;不删除源文件\n          &#125;),\n        ],\n      &#125;\n    &#125;\n  &#125;,\n&#125;\n\n复制</code></pre>\n\n<p><strong>? compression遇到的坑</strong></p>\n<p>vue 使用webpack插件打包时候报错出现 <code>Cannot read property &#39;tapPromise&#39; of undefined</code></p>\n<p>compression-webpack-plugin 目前最新版是 7.1.0</p>\n<p><strong>解决方法：</strong></p>\n<p>先卸载，再装个低一点的版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm uninstall compression-webpack-plugin</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i compression-webpack-plugin@5.0.1</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"\"></a>总结</h3><ol>\n<li>比较实用的方法: 按需加载，优化 loader 配置，关闭生产环境的 sourceMap，CDN 优化。</li>\n<li>vue-cli 已做的优化： 代码压缩，提取公共代码，再优化空间不大。</li>\n<li>根据项目实际需要和自身开发水平选择优化方法，必须避免因为优化产生 bug。</li>\n</ol>\n","feature":true,"text":"webpack 优化打包大全随着我们的项目项目越做越大，引入的第三方库会越来越多，打包的依赖也越来越多，每次 build 的时间越来越长，打包出来的文件会越来越大。最糟糕的是单页面应用首页白屏时间长，用户体验差。 此时优化 webpack 打包方法不可回避。下面我们来整理一下常用...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#webpack-%E4%BC%98%E5%8C%96%E6%89%93%E5%8C%85%E5%A4%A7%E5%85%A8\"><span class=\"toc-text\">webpack 优化打包大全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90-webpack-%E6%89%93%E5%8C%85%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88\"><span class=\"toc-text\">分析 webpack 打包性能瓶颈</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81webpack-bundle-analyzer-%E5%88%86%E6%9E%90%E4%BD%93%E7%A7%AF\"><span class=\"toc-text\">1、webpack-bundle-analyzer 分析体积</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%B5%8B%E9%87%8F%E6%9E%84%E5%BB%BA%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">2、测量构建时间</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81-%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">1、 按需加载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%BC%A9%E5%B0%8F%E6%9E%84%E5%BB%BA%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">2、缩小构建目标</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96-loader-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">优化 loader 配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%88%E7%90%86%E4%BD%BF%E7%94%A8-resolve-extensions\"><span class=\"toc-text\">合理使用 resolve.extensions</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%88%AB%E5%90%8D-alias\"><span class=\"toc-text\">配置别名 alias</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-module-noParse\"><span class=\"toc-text\">使用 module.noParse:</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%85%B3%E9%97%AD-sourceMap\"><span class=\"toc-text\">4、生产环境关闭 sourceMap</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">5、代码压缩</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UglifyJS\"><span class=\"toc-text\">UglifyJS</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ParallelUglifyPlugin\"><span class=\"toc-text\">ParallelUglifyPlugin</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#terser-webpack-plugin\"><span class=\"toc-text\">terser-webpack-plugin</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CSS-%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">CSS 压缩</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%8F%90%E5%8F%96%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">6、提取公共代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CommonsChunkPlugin-%E5%8F%8A-splitChunks\"><span class=\"toc-text\">CommonsChunkPlugin 及 splitChunks</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DLLPlugin\"><span class=\"toc-text\">DLLPlugin</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81CDN-%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">7、CDN 优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#html-webpack-externals-plugin\"><span class=\"toc-text\">html-webpack-externals-plugin</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%A7%A3%E6%9E%90%E5%92%8C%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">8、多进程解析和处理文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#thread-loader\"><span class=\"toc-text\">thread loader</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HappyPack\"><span class=\"toc-text\">HappyPack</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E5%90%AF%E7%94%A8-gzip-%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">9. 启用 gzip 压缩</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于 ChatGPT 和 React 搭建 JSON 转 TS 的 Web 应用","uid":"b3d40160b165ebd8debc4be9e2a0af94","slug":"基于 ChatGPT 和 React 搭建 JSON 转 TS 的 Web 应用","date":"2023-03-23T10:06:07.000Z","updated":"2023-04-24T09:38:33.002Z","comments":true,"path":"api/articles/基于 ChatGPT 和 React 搭建 JSON 转 TS 的 Web 应用.json","keywords":null,"cover":[],"text":" 在本文中，你将学习如何使用 ChatGPT API 构建一个将 JSON 对象转换为 Typescript interface 的 Web 应用 为什么你需要它？许多网站为不同的场景提供 API 简单的解决方案是发送 JSON 并返回 Typescript 中的interfac...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"一些VSCode上经常使用的代码格式配置","uid":"423c486a461adf5a32b327715f1653d3","slug":"一些VSCode上经常使用的代码格式配置","date":"2023-02-25T08:30:49.000Z","updated":"2023-04-24T09:50:29.218Z","comments":true,"path":"api/articles/一些VSCode上经常使用的代码格式配置.json","keywords":null,"cover":null,"text":"使用到的插件Prettier ， vetur 具体JSON &#123; &quot;workbench.iconTheme&quot;: &quot;material-icon-theme&quot;, &quot;vsicons.dontShowNewVersionMessa...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}