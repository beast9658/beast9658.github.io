{"title":"基于 ChatGPT 和 React 搭建 JSON 转 TS 的 Web 应用","uid":"b3d40160b165ebd8debc4be9e2a0af94","slug":"基于 ChatGPT 和 React 搭建 JSON 转 TS 的 Web 应用","date":"2023-03-23T10:06:07.000Z","updated":"2023-04-24T09:38:33.002Z","comments":true,"path":"api/articles/基于 ChatGPT 和 React 搭建 JSON 转 TS 的 Web 应用.json","keywords":null,"cover":[],"content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e893c20864414c458c847125c8db7f80~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"基于 ChatGPT 和 React 搭建 JSON 转 TS 的 Web 应用\"></p>\n<p>在本文中，你将学习如何使用 ChatGPT API 构建一个将 JSON 对象转换为 Typescript interface 的 Web 应用</p>\n<h1 id=\"为什么你需要它？\"><a href=\"#为什么你需要它？\" class=\"headerlink\" title=\"为什么你需要它？\"></a>为什么你需要它？</h1><p>许多网站为不同的场景提供 API</p>\n<p>简单的解决方案是发送 JSON 并返回 Typescript 中的interface</p>\n<p>你也可以使用 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/json-to-ts\" title=\"https://www.npmjs.com/package/json-to-ts\">JSON-to-typescript</a> 库来实现，但我将使用 ChatGPT 向你展示这一点，因为你知道，我喜欢魔法（AI） 🪄⭐️</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a803b743da9487ebb3b79d736e9fcf8~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"1.webp\"></p>\n<h1 id=\"什么是-ChatGPT-？\"><a href=\"#什么是-ChatGPT-？\" class=\"headerlink\" title=\"什么是 ChatGPT ？\"></a>什么是 <strong>ChatGPT ？</strong></h1><p>ChatGPT 是一种由 <a href=\"https://link.juejin.cn/?target=https://openai.com/\" title=\"https://openai.com/\">OpenAI</a> 训练的 AI 语言模型，可以生成文本并以类似人类的对话方式与用户进行交互。用户可以在短短几秒钟内提交请求并获得信息或从广泛的主题中获得问题的答案。</p>\n<p><a href=\"https://link.juejin.cn/?target=https://openai.com/blog/chatgpt\" title=\"https://openai.com/blog/chatgpt\">ChatGPT</a> 还有助于编写、调试和解释代码片段。 值得一提的是，ChatGPT 及其 API 目前免费开放给公众使用。</p>\n<p>因此在本文中，我们将使用它的 API 构建一个 JSON 到 Typescript 的转换器</p>\n<h1 id=\"项目设置\"><a href=\"#项目设置\" class=\"headerlink\" title=\"项目设置\"></a>项目设置</h1><p>在这里，我们会为 Web 应用创建项目环境。 我们将在前端使用 React.js，在后端使用 Node.js</p>\n<p>通过运行以下代码为 Web 应用创建项目文件夹：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir json-to-typescript-cn\ncd json-to-typescript-cn\n复制代码</code></pre>\n\n<h2 id=\"设置-Node-js-服务端\"><a href=\"#设置-Node-js-服务端\" class=\"headerlink\" title=\"设置 Node.js 服务端\"></a>设置 <strong>Node.js</strong> 服务端</h2><p>进入 server 目录并创建一个 <code>package.json</code> 文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir server\n\ncd server &amp; npm init -y\n复制代码</code></pre>\n\n<p>安装 Express， Nodemon ， CORS， dotenv 包</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install express cors nodemon dotenv\n复制代码</code></pre>\n\n<p><a href=\"https://link.juejin.cn/?target=https://expressjs.com/\" title=\"https://expressjs.com/\">ExpressJS</a> 是一个快速、极简的框架，它提供了多种用于在 Node.js 中构建 Web 应用程序的功能； <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/cors\" title=\"https://www.npmjs.com/package/cors\">CORS</a> 是一个允许不同域之间通信的 Node.js 包，而 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/nodemon\" title=\"https://www.npmjs.com/package/nodemon\">Nodemon</a> 是一个在检测到文件更改后自动重启服务器的 Node.js 工具。<a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/dotenv\" title=\"https://www.npmjs.com/package/dotenv\">Dotenv</a> 是一个零依赖模块，它将环境变量从 .env 文件加载到 process.env 中。</p>\n<p>创建一个 <code>index.js</code> 文件作为 Web 服务器的入口</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">touch index.js\n复制代码</code></pre>\n\n<p>使用 Express.js 设置 Node.js 服务器。 当浏览器访问 <a href=\"https://link.juejin.cn/?target=http://localhost:4000/api\" title=\"http://localhost:4000/api\"></a><a href=\"https://link.juejin.cn/?target=http://localhost:4000/api\" title=\"http://localhost:4000/api\">http://localhost:4000/api</a> 时，下面的代码片段会返回一个 JSON 对象</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;👇🏻index.js\nconst express &#x3D; require(&quot;express&quot;);\nconst cors &#x3D; require(&quot;cors&quot;);\nconst app &#x3D; express();\nconst PORT &#x3D; 4000;\n\napp.use(express.urlencoded(&#123; extended: true &#125;));\napp.use(express.json());\napp.use(cors());\n\napp.get(&quot;&#x2F;api&quot;, (req, res) &#x3D;&gt; &#123;\n    res.json(&#123;\n        message: &quot;Hello world&quot;,\n    &#125;);\n&#125;);\n\napp.listen(PORT, () &#x3D;&gt; &#123;\n    console.log(&#96;Node.js 服务正在监听 $&#123;PORT&#125; 端口 ...&#96;);\n&#125;);\n复制代码</code></pre>\n\n<p>通过将 start 命令添加到 <code>package.json</code> 文件中的 scripts 列表来配置 Nodemon。 下面的代码片段使用 Nodemon 启动服务器。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;在 server&#x2F;package.json 文件中\n\n&quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo &quot;Error: no test specified&quot; &amp;&amp; exit 1&quot;,\n    &quot;start&quot;: &quot;nodemon index.js&quot;\n  &#125;,\n复制代码</code></pre>\n\n<p>恭喜！ 你现在可以使用以下命令启动服务器。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm start\n复制代码</code></pre>\n\n<h2 id=\"设置-React-应用\"><a href=\"#设置-React-应用\" class=\"headerlink\" title=\"设置 React 应用\"></a>设置 React 应用</h2><p>通过终端导航到根目录并创建一个新的 React.js 项目</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm create vite@latest\n\n✔ Project name:  client\n✔ Select a framework: › React\n✔ Select a variant: › JavaScript\n\ncd client \n\nnpm i \n复制代码</code></pre>\n\n<p>在 client 目录安装  <a href=\"https://link.juejin.cn/?target=https://github.com/suren-atoyan/monaco-react\" title=\"https://github.com/suren-atoyan/monaco-react\">Monaco Editor for React</a> 和  <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/react-copy-to-clipboard\" title=\"https://www.npmjs.com/package/react-copy-to-clipboard\">React Copy to Clipboard</a> 库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\nnpm install @monaco-editor&#x2F;react react-copy-to-clipboard\n复制代码</code></pre>\n\n<p><a href=\"https://link.juejin.cn/?target=https://github.com/suren-atoyan/monaco-react\" title=\"https://github.com/suren-atoyan/monaco-react\">Monaco Editor for React</a> 是一个十分简单的包，用于将代码编辑器添加到 React 应用程序，而 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/react-copy-to-clipboard\" title=\"https://www.npmjs.com/package/react-copy-to-clipboard\">React Copy to Clipboard</a> 包允许我们通过单击按钮复制和粘贴内容</p>\n<p>从 React 应用程序中删除多余的文件，并更新 <code>App.jsx</code> 文件以显示 “Hello World” ，如下所示。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function App() &#123;\n    return (\n        &lt;div&gt;\n            &lt;p&gt;Hello World!&lt;&#x2F;p&gt;\n        &lt;&#x2F;div&gt;\n    );\n&#125;\nexport default App;\n复制代码</code></pre>\n\n<p>如下所示，更新 <code>src/index.css</code> 样式文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@import url(&quot;&lt;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css2?family&#x3D;Space+Grotesk:wght@300;400;500;600;700&amp;display&#x3D;swap&gt;&quot;);\n\n* &#123;\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: &quot;Space Grotesk&quot;, sans-serif;\n&#125;\n.app &#123;\n    width: 100%;\n    min-height: 100vh;\n&#125;\n.loading &#123;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100vh;\n&#125;\n.header__container &#123;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    height: 10vh;\n    background-color: #e0f2fe;\n&#125;\n.header__right &#123;\n    display: flex;\n    align-items: center;\n&#125;\n.runBtn &#123;\n    padding: 10px 5px;\n    width: 100px;\n    margin-right: 10px;\n    cursor: pointer;\n    border: none;\n    border-radius: 3px;\n    box-shadow: 0 0 1px 1px #e0e0ea;\n    background-color: #065f46;\n    outline: none;\n    color: #fff;\n&#125;\n.header &#123;\n    border: 1px solid #ddd;\n    padding: 10px 20px;\n    border: 1px solid #e8e2e2;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex: 0.5;\n    height: 100%;\n&#125;\n.code__container &#123;\n    display: flex;\n    height: 95vh;\n    width: 100%;\n    align-items: flex-start;\n&#125;\n.minimap &#123;\n    display: none;\n&#125;\n.editor &#123;\n    padding: 10px 0px;\n    width: 100%;\n&#125;\n.code,\n.output &#123;\n    width: 50vw;\n&#125;\n.deleteIcon &#123;\n    height: 25px;\n    color: #cf0a0a;\n    cursor: pointer;\n&#125;\n.copyIcon &#123;\n    height: 25px;\n    color: #3e54ac;\n    cursor: pointer;\n&#125;\n复制代码</code></pre>\n\n<h2 id=\"构建应用用户界面\"><a href=\"#构建应用用户界面\" class=\"headerlink\" title=\"构建应用用户界面\"></a>构建应用用户界面</h2><p>在这里，我们将为 JSON 到 Typescript 转换器创建用户界面，使用户能够在屏幕左侧添加 JSON 对象，并在屏幕右侧查看 Typescript 中的结果。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/186981da6ba44b7a8feb72cfa1065fdd~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"3.jpg\"></p>\n<p>首先，在 <code>client/src</code> 文件夹中创建一个 icons 文件夹。 icons 文件夹将包含上图中的删除和复制图标</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd client&#x2F;src\nmkdir icons\ncd icons\ntouch Copy.jsx Delete.jsx\n复制代码</code></pre>\n\n<p>更新 <code>Copy.jsx</code> 文件以添加来自 <a href=\"https://link.juejin.cn/?target=https://heroicons.com/\" title=\"https://heroicons.com/\">Heroicons</a> 的 SVG 图标</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import React from &quot;react&quot;;\n\nconst Copy &#x3D; () &#x3D;&gt; &#123;\n    return (\n        &lt;svg\n            xmlns&#x3D;&#39;&lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&gt;&#39;\n            viewBox&#x3D;&#39;0 0 24 24&#39;\n            fill&#x3D;&#39;currentColor&#39;\n            className&#x3D;&#39;w-6 h-6 copyIcon&#39;\n        &gt;\n            &lt;path d&#x3D;&#39;M7.5 3.375c0-1.036.84-1.875 1.875-1.875h.375a3.75 3.75 0 013.75 3.75v1.875C13.5 8.161 14.34 9 15.375 9h1.875A3.75 3.75 0 0121 12.75v3.375C21 17.16 20.16 18 19.125 18h-9.75A1.875 1.875 0 017.5 16.125V3.375z&#39; &#x2F;&gt;\n            &lt;path d&#x3D;&#39;M15 5.25a5.23 5.23 0 00-1.279-3.434 9.768 9.768 0 016.963 6.963A5.23 5.23 0 0017.25 7.5h-1.875A.375.375 0 0115 7.125V5.25zM4.875 6H6v10.125A3.375 3.375 0 009.375 19.5H16.5v1.125c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625V7.875C3 6.839 3.84 6 4.875 6z&#39; &#x2F;&gt;\n        &lt;&#x2F;svg&gt;\n    );\n&#125;;\n\nexport default Copy;\n复制代码</code></pre>\n\n<p>将下面的代码复制到 <code>Delete.jsx</code> 文件中。 它为删除按钮呈现一个 SVG 图标。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import React from &quot;react&quot;;\n\nconst Delete &#x3D; () &#x3D;&gt; &#123;\n    return (\n        &lt;svg\n            xmlns&#x3D;&#39;&lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&gt;&#39;\n            viewBox&#x3D;&#39;0 0 24 24&#39;\n            fill&#x3D;&#39;currentColor&#39;\n            className&#x3D;&#39;w-6 h-6 deleteIcon&#39;\n        &gt;\n            &lt;path\n                fillRule&#x3D;&#39;evenodd&#39;\n                d&#x3D;&#39;M16.5 4.478v.227a48.816 48.816 0 013.878.512.75.75 0 11-.256 1.478l-.209-.035-1.005 13.07a3 3 0 01-2.991 2.77H8.084a3 3 0 01-2.991-2.77L4.087 6.66l-.209.035a.75.75 0 01-.256-1.478A48.567 48.567 0 017.5 4.705v-.227c0-1.564 1.213-2.9 2.816-2.951a52.662 52.662 0 013.369 0c1.603.051 2.815 1.387 2.815 2.951zm-6.136-1.452a51.196 51.196 0 013.273 0C14.39 3.05 15 3.684 15 4.478v.113a49.488 49.488 0 00-6 0v-.113c0-.794.609-1.428 1.364-1.452zm-.355 5.945a.75.75 0 10-1.5.058l.347 9a.75.75 0 101.499-.058l-.346-9zm5.48.058a.75.75 0 10-1.498-.058l-.347 9a.75.75 0 001.5.058l.345-9z&#39;\n                clipRule&#x3D;&#39;evenodd&#39;\n            &#x2F;&gt;\n        &lt;&#x2F;svg&gt;\n    );\n&#125;;\n\nexport default Delete;\n复制代码</code></pre>\n\n<p>更新 <code>App.jsx</code> 文件来渲染 header 元素，如下所示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import React from &quot;react&quot;;\nimport Delete from &quot;.&#x2F;icons&#x2F;Delete&quot;;\nimport Copy from &quot;.&#x2F;icons&#x2F;Copy&quot;;\n\nconst App &#x3D; () &#x3D;&gt; &#123;\n    const handleSubmit &#x3D; () &#x3D;&gt; &#123;\n        console.log(&quot;运行按钮点击&quot;);\n    &#125;;\n\n    return (\n        &lt;main className&#x3D;&#39;app&#39;&gt;\n            &lt;header className&#x3D;&#39;header__container&#39;&gt;\n                &lt;div className&#x3D;&#39;header&#39;&gt;\n                    &lt;h3&gt;JSON&lt;&#x2F;h3&gt;\n                    &lt;div className&#x3D;&#39;header__right&#39;&gt;\n                        &lt;button className&#x3D;&#39;runBtn&#39; onClick&#x3D;&#123;handleSubmit&#125;&gt;\n                            运行\n                        &lt;&#x2F;button&gt;\n                        &lt;Delete &#x2F;&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n\n                &lt;div className&#x3D;&#39;header&#39;&gt;\n                    &lt;h3&gt;Typescript&lt;&#x2F;h3&gt;\n                    &lt;Copy &#x2F;&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;header&gt;\n\n            &lt;div className&#x3D;&#39;code__container&#39;&gt;&lt;&#x2F;div&gt;\n        &lt;&#x2F;main&gt;\n    );\n&#125;;\n\nexport default App;\n复制代码</code></pre>\n\n<p>上面的代码片段显示了 Web 应用程序的 header 组件。 在接下来的部分中，我会说明如何将 Monaco 代码编辑器添加到 React 应用程序</p>\n<h2 id=\"添加-Monaco-代码编辑器到-React\"><a href=\"#添加-Monaco-代码编辑器到-React\" class=\"headerlink\" title=\"添加 Monaco 代码编辑器到 React\"></a>添加 <strong>Monaco 代码编辑器到 React</strong></h2><p>Monaco Editor 是一款著名的基于 Web 技术的代码编辑器，为 VS Code 提供支持，它只需要一行集成即可支持多种编程语言。</p>\n<p>我们已经在上一节中安装了库。 接下来，将其导入 <code>App.jsx</code> 文件，如下所示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import React, &#123; useState &#125; from &quot;react&quot;;\nimport Delete from &quot;.&#x2F;icons&#x2F;Delete&quot;;\nimport Copy from &quot;.&#x2F;icons&#x2F;Copy&quot;;\nimport Editor from &quot;@monaco-editor&#x2F;react&quot;;\n\nconst App &#x3D; () &#x3D;&gt; &#123;\n    const [value, setValue] &#x3D; useState(&quot;&quot;);\n    const [output, setOutput] &#x3D; useState(&quot;&quot;);\n    const handleSubmit &#x3D; () &#x3D;&gt; &#123;\n        console.log(&quot;Run Button Clicked&quot;);\n    &#125;;\n\n    return (\n        &lt;main className&#x3D;&#39;app&#39;&gt;\n            &lt;header className&#x3D;&#39;header__container&#39;&gt;\n                &lt;div className&#x3D;&#39;header&#39;&gt;\n                    &lt;h3&gt;JSON&lt;&#x2F;h3&gt;\n                    &lt;div className&#x3D;&#39;header__right&#39;&gt;\n                        &lt;button className&#x3D;&#39;runBtn&#39; onClick&#x3D;&#123;handleSubmit&#125;&gt;\n                            RUN\n                        &lt;&#x2F;button&gt;\n                        &lt;Delete &#x2F;&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n\n                &lt;div&gt;\n                    &lt;h3&gt;Typescript&lt;&#x2F;h3&gt;\n                    &lt;Copy &#x2F;&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;header&gt;\n\n            &lt;div className&#x3D;&#39;code__container&#39;&gt;\n                &lt;div className&#x3D;&#39;code&#39;&gt;\n                    &lt;Editor\n                        height&#x3D;&#39;90vh&#39;\n                        className&#x3D;&#39;editor&#39;\n                        defaultLanguage&#x3D;&#39;json&#39;\n                        defaultValue&#x3D;&#39;&#123; &#125;&#39;\n                        value&#x3D;&#123;value&#125;\n                        onChange&#x3D;&#123;(value) &#x3D;&gt; setValue(value)&#125;\n                    &#x2F;&gt;\n                &lt;&#x2F;div&gt;\n                &lt;div className&#x3D;&#39;output&#39;&gt;\n                    &lt;Editor\n                        height&#x3D;&#39;90vh&#39;\n                        className&#x3D;&#39;editor&#39;\n                        defaultLanguage&#x3D;&#39;typescript&#39;\n                        options&#x3D;&#123;&#123;\n                            domReadOnly: true,\n                            readOnly: true,\n                        &#125;&#125;\n                        defaultValue&#x3D;&#39;&#39;\n                        value&#x3D;&#123;output&#125;\n                        onChange&#x3D;&#123;(value) &#x3D;&gt; setOutput(value)&#125;\n                    &#x2F;&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;main&gt;\n    );\n&#125;;\n\nexport default App;\n复制代码</code></pre>\n\n<p>从上面的代码片段中，我从 Monaco Editor 包中导入了 <code>Editor</code> 组件。 第一个编辑器组件接受诸如 <em>height</em>、<em>value</em>、<em>defaultLanguage</em> 和 <em>onChange</em> 事件之类的 props 第二个编辑器组件接受与第一个相同的 props，但有一个名为 <code>options</code> 的附加 props，由于它是只读的，因此会禁止用户编辑它的值</p>\n<h1 id=\"如何在-Node-js-中与-ChatGPT-进行通信\"><a href=\"#如何在-Node-js-中与-ChatGPT-进行通信\" class=\"headerlink\" title=\"如何在 Node.js 中与 ChatGPT 进行通信\"></a>如何在 Node.js 中与 ChatGPT 进行通信</h1><p>在本节中，你将学习如何通过 Node.js 服务器中的 API 与 ChatGPT 进行通信。 我们会将用户提供的 JSON 代码发送到 API，以将代码转换为其等效的 Typescript。 要做到这一点：</p>\n<p>通过运行以下代码安装 OpenAI API Node.js 库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install openai\n复制代码</code></pre>\n\n<p>在 <a href=\"https://link.juejin.cn/?target=https://platform.openai.com/overview\" title=\"https://platform.openai.com/overview\">此处</a> 登录或创建 OpenAI 帐户</p>\n<p>单击导航栏上的 <code>Personal</code> 并从菜单栏中选择 <code>View API Keys</code> 以创建新的密钥。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea0dfc4729e74d849f420199c55cb0a4~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"4.jpg\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68371891961141058020c50c05ab81f4~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"5.jpg\"></p>\n<p>将 API 密钥复制到计算机上安全的地方； 我们很快就会用到它</p>\n<p>通过将以下代码复制到 server&#x2F;index.js 文件来配置 API。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; Configuration, OpenAIApi &#125; &#x3D; require(&quot;openai&quot;);\nconst dotenv &#x3D; require(&#39;dotenv&#39;)\n\ndotenv.config()\nconst GPT_API_KEY &#x3D; process.env.GPT_API_KEY\n\nif (!GPT_API_KEY) &#123;\n    console.log(&quot;请配置 ChatGPT API Key&quot;)\n    return\n&#125;\n\nconst configuration &#x3D; new Configuration(&#123;\n    apiKey: GPT_API_KEY,\n&#125;);\n\nconst openai &#x3D; new OpenAIApi(configuration);\n复制代码</code></pre>\n\n<p>在 server 目录下创建 <code>.env</code> 文件， 将 <code>GPT_API_KEY</code> 的值替换为你的 API 密钥。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GPT_API_KEY&#x3D;&quot;&lt;你的 GPT API 密钥&gt;&quot;\n复制代码</code></pre>\n\n<p>在服务器上创建一个 <code>POST</code> 路由，它将接受来自前端的 JSON 代码并生成其等效的 Typescript</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; server&#x2F;index.js 文件中\n\napp.post(&quot;&#x2F;convert&quot;, (req, res) &#x3D;&gt; &#123;\n    console.log(req.body);\n&#125;);\n复制代码</code></pre>\n\n<p>更新前端 <code>App.jsx</code> 文件中的 <code>handleSubmit</code> 函数，将用户输入的 JSON 对象发送到服务器上的 <code>/convert</code> 接口</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const handleSubmit &#x3D; () &#x3D;&gt; &#123;\n    fetch(&quot;http:&#x2F;&#x2F;localhost:4000&#x2F;convert&quot;, &#123;\n        method: &quot;POST&quot;,\n        body: JSON.stringify(&#123;\n            value,\n        &#125;),\n        headers: &#123;\n            &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,\n        &#125;,\n    &#125;)\n        .then((res) &#x3D;&gt; res.json())\n        .then((data) &#x3D;&gt; &#123;\n            setOutput(data.response);\n        &#125;)\n        .catch((err) &#x3D;&gt; console.error(err));\n&#125;;\n复制代码</code></pre>\n\n<p>更新 <code>/convert</code> 接口，如下所示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">app.post(&quot;&#x2F;convert&quot;, async (req, res) &#x3D;&gt; &#123;\n    &#x2F;&#x2F;👇🏻 解构 JSON 对象\n    let &#123; value &#125; &#x3D; req.body;\n\n    &#x2F;&#x2F;👇🏻 向 ChatGPT 提问\n    const prompt &#x3D; &#96;Convert the JSON object into Typescript interfaces \\n $&#123;value&#125; Please, I need the only the code, I don&#39;t need any explanations.&#96;;\n\n    const completion &#x3D; await openai.createChatCompletion(&#123;\n        model: &quot;gpt-3.5-turbo&quot;,\n        messages: [&#123; role: &quot;user&quot;, content: prompt &#125;],\n    &#125;);\n    res.json(&#123;\n        message: &quot;Successful&quot;,\n        response: completion.data.choices[0].message.content,\n    &#125;);\n&#125;);\n复制代码</code></pre>\n\n<p>上面的代码片段从 React 应用程序接受 JSON 对象，使用 JSON 代码创建提问，并将其发送到 ChatGPT API。 包含与请求的 JSON 等效的 Typescript 的响应被发送回客户端。</p>\n<p>由于我们是从 Node.js 服务请求到响应，因此向应用程序添加 loading 状态用于在请求还没有返回时通知用户正在请求中。</p>\n<p>首先，创建一个 <code>Loading.jsx</code> 文件并将以下代码复制到该文件中</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const Loading &#x3D; () &#x3D;&gt; &#123;\n    return (\n        &lt;div className&#x3D;&#39;loading&#39;&gt;\n            &lt;h2&gt;Loading...&lt;&#x2F;h2&gt;\n        &lt;&#x2F;div&gt;\n    );\n&#125;;\n\nexport default Loading;\n复制代码</code></pre>\n\n<p>在 <code>App.jsx</code> 文件中添加 loading 状态</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const [loading, setLoading] &#x3D; useState(false);\n复制代码</code></pre>\n\n<p>更新 <code>handleSubmit</code> 函数以在用户单击 “运行” 按钮或请求成功时更新加载状态</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const handleSubmit &#x3D; () &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 👇🏻 打开 loading\n      setLoading(true);\n      fetch(&quot;http:&#x2F;&#x2F;localhost:4000&#x2F;convert&quot;, &#123;\n          method: &quot;POST&quot;,\n          body: JSON.stringify(&#123;\n              value,\n          &#125;),\n          headers: &#123;\n              &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,\n          &#125;,\n      &#125;)\n          .then((res) &#x3D;&gt; res.json())\n          .then((data) &#x3D;&gt; &#123;\n              &#x2F;&#x2F; 👇🏻 关闭 loading\n              setLoading(false);\n              setOutput(data.response);\n          &#125;)\n          .catch((err) &#x3D;&gt; console.error(err));\n  &#125;;\n复制代码</code></pre>\n\n<p>有条件地渲染第二个代码编辑器，如下所示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">return (\n        &lt;main className&#x3D;&#39;app&#39;&gt;\n           &#123;&#x2F;* -- 其他组件 --*&#x2F;&#125;\n\n            &lt;div className&#x3D;&#39;code__container&#39;&gt;\n              &lt;div className&#x3D;&#39;code&#39;&gt;\n                    &lt;Editor\n                        height&#x3D;&#39;90vh&#39;\n                        className&#x3D;&#39;editor&#39;\n                        defaultLanguage&#x3D;&#39;json&#39;\n                        defaultValue&#x3D;&#39;&#123; &#125;&#39;\n                        value&#x3D;&#123;value&#125;\n                        onChange&#x3D;&#123;(value) &#x3D;&gt; setValue(value)&#125;\n                    &#x2F;&gt;\n                &lt;&#x2F;div&gt;\n                &lt;div className&#x3D;&#39;output&#39;&gt;\n                  &#123;loading ? (\n                      &lt;Loading &#x2F;&gt;\n                  ) : (\n                      &lt;Editor\n                          height&#x3D;&#39;90vh&#39;\n                          className&#x3D;&#39;editor&#39;\n                          defaultLanguage&#x3D;&#39;typescript&#39;\n                          options&#x3D;&#123;&#123;\n                              domReadOnly: true,\n                              readOnly: true,\n                          &#125;&#125;\n                          defaultValue&#x3D;&#39;&#39;\n                          value&#x3D;&#123;output&#125;\n                          onChange&#x3D;&#123;(value) &#x3D;&gt; setOutput(value)&#125;\n                      &#x2F;&gt;\n                  )&#125;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;main&gt;\n    );\n复制代码</code></pre>\n\n<p>当用户提交一个 JSON 对象进行转换时，会立即显示 Loading 组件，直到请求成功，然后在代码编辑器上显示结果</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42fbbdfe8932477897641cc807f0b00b~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"6.jpg\"></p>\n<p>恭喜！🎊 应用就快要完成了。 接下来，让我们添加一些额外的功能，例如通过单击按钮复制所有 Typescript 代码以及通过单击按钮清除输入编辑器的所有内容的能力。</p>\n<h1 id=\"复制-Typescript-代码\"><a href=\"#复制-Typescript-代码\" class=\"headerlink\" title=\"复制 Typescript 代码\"></a>复制 Typescript 代码</h1><p>在这里，你将学习如何使用 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/react-copy-to-clipboard\" title=\"https://www.npmjs.com/package/react-copy-to-clipboard\">React-copy-to-clipboard</a> 库在单击按钮时复制和粘贴内容</p>\n<p>我们已经在本教程开头安装了该包。 接下来，将其导入 <code>App.jsx</code> 文件，如下所示。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; CopyToClipboard &#125; from &quot;react-copy-to-clipboard&quot;;\n复制代码</code></pre>\n\n<p>在成功复制内容后运行的 App.jsx 文件中的一个函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const copyToClipBoard &#x3D; () &#x3D;&gt; alert(&#96;已复制 ✅&#96;);\n复制代码</code></pre>\n\n<p>编写 <code>CopyToClipboard</code> 组件，如下所示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;CopyToClipboard text&#x3D;&#123;output&#125; onCopy&#x3D;&#123;copyToClipBoard&#125;&gt;\n    &lt;span&gt;\n        &lt;Copy &#x2F;&gt;\n    &lt;&#x2F;span&gt;\n&lt;&#x2F;CopyToClipboard&gt;\n复制代码</code></pre>\n\n<p><code>CopyToClipboard</code> 组件接收一个 text props（包含要复制的内容）和一个 onCopy 属性（一个在复制内容成功后运行的函数）</p>\n<h1 id=\"删除用户输入\"><a href=\"#删除用户输入\" class=\"headerlink\" title=\"删除用户输入\"></a>删除用户输入</h1><p>如果要删除所有用户的输入，需要将 value 作为 prop 传递到 <code>&lt;Delete/&gt;</code> 组件中</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;Delete setValue&#x3D;&#123;setValue&#125; &#x2F;&gt;\n复制代码</code></pre>\n\n<p>当用户单击删除图标时更新 value 状态</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const Delete &#x3D; (&#123; setValue &#125;) &#x3D;&gt; &#123;\n    return (\n        &lt;svg\n            xmlns&#x3D;&#39;&lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&gt;&#39;\n            viewBox&#x3D;&#39;0 0 24 24&#39;\n            fill&#x3D;&#39;currentColor&#39;\n            className&#x3D;&#39;w-6 h-6 deleteIcon&#39;\n            onClick&#x3D;&#123;() &#x3D;&gt; setValue(&quot;&#123; &#125;&quot;)&#125;\n        &gt;\n            &lt;path\n                fillRule&#x3D;&#39;evenodd&#39;\n                d&#x3D;&#39;M16.5 4.478v.227a48.816 48.816 0 013.878.512.75.75 0 11-.256 1.478l-.209-.035-1.005 13.07a3 3 0 01-2.991 2.77H8.084a3 3 0 01-2.991-2.77L4.087 6.66l-.209.035a.75.75 0 01-.256-1.478A48.567 48.567 0 017.5 4.705v-.227c0-1.564 1.213-2.9 2.816-2.951a52.662 52.662 0 013.369 0c1.603.051 2.815 1.387 2.815 2.951zm-6.136-1.452a51.196 51.196 0 013.273 0C14.39 3.05 15 3.684 15 4.478v.113a49.488 49.488 0 00-6 0v-.113c0-.794.609-1.428 1.364-1.452zm-.355 5.945a.75.75 0 10-1.5.058l.347 9a.75.75 0 101.499-.058l-.346-9zm5.48.058a.75.75 0 10-1.498-.058l-.347 9a.75.75 0 001.5.058l.345-9z&#39;\n                clipRule&#x3D;&#39;evenodd&#39;\n            &#x2F;&gt;\n        &lt;&#x2F;svg&gt;\n    );\n&#125;;\n\nexport default Delete;\n复制代码</code></pre>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>到目前为止，我们已经学习了</p>\n<ul>\n<li>ChatGPT 是什么</li>\n<li>如何在 React 应用程序中添加高效的代码编辑器</li>\n<li>如何在 Node.js 中与 ChatGPT 通信</li>\n<li>如何在 React 中单击按钮时复制与删除内容</li>\n</ul>\n<p>本教程完成一个可以使用 ChatGPT API 构建的应用程序示例。 通过 API，你还可以创建功能强大的应用程序，在各个领域都有用，例如翻译、问答、代码解释或生成等。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>本教程的源代码可在此处获得：<a href=\"https://link.juejin.cn/?target=https://github.com/zidanDirk/json-to-typescript-chatgpt-cn\" title=\"https://github.com/zidanDirk/json-to-typescript-chatgpt-cn\"></a><a href=\"https://link.juejin.cn/?target=https://github.com/zidanDirk/json-to-typescript-chatgpt-cn\" title=\"https://github.com/zidanDirk/json-to-typescript-chatgpt-cn\">github.com&#x2F;zidanDirk&#x2F;j…</a></li>\n<li>本文为翻译文，<a href=\"https://link.juejin.cn/?target=https://dev.to/novu/building-a-json-to-typescript-converter-with-react-nodejs-and-chatgpt-46p2\" title=\"https://dev.to/novu/building-a-json-to-typescript-converter-with-react-nodejs-and-chatgpt-46p2\">原文地址</a></li>\n</ul>\n","feature":true,"text":" 在本文中，你将学习如何使用 ChatGPT API 构建一个将 JSON 对象转换为 Typescript interface 的 Web 应用 为什么你需要它？许多网站为不同的场景提供 API 简单的解决方案是发送 JSON 并返回 Typescript 中的interfac...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AE%83%EF%BC%9F\"><span class=\"toc-text\">为什么你需要它？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-ChatGPT-%EF%BC%9F\"><span class=\"toc-text\">什么是 ChatGPT ？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">项目设置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE-Node-js-%E6%9C%8D%E5%8A%A1%E7%AB%AF\"><span class=\"toc-text\">设置 Node.js 服务端</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE-React-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">设置 React 应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2\"><span class=\"toc-text\">构建应用用户界面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0-Monaco-%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%E5%88%B0-React\"><span class=\"toc-text\">添加 Monaco 代码编辑器到 React</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8-Node-js-%E4%B8%AD%E4%B8%8E-ChatGPT-%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">如何在 Node.js 中与 ChatGPT 进行通信</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6-Typescript-%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">复制 Typescript 代码</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">删除用户输入</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"webpack 优化打包大全","uid":"3e28ba7063fc55b29481d21803e77406","slug":"webpack 优化打包大全","date":"2023-03-02T05:46:21.000Z","updated":"2023-04-24T09:45:57.704Z","comments":true,"path":"api/articles/webpack 优化打包大全.json","keywords":null,"cover":null,"text":"webpack 优化打包大全随着我们的项目项目越做越大，引入的第三方库会越来越多，打包的依赖也越来越多，每次 build 的时间越来越长，打包出来的文件会越来越大。最糟糕的是单页面应用首页白屏时间长，用户体验差。 此时优化 webpack 打包方法不可回避。下面我们来整理一下常用...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}