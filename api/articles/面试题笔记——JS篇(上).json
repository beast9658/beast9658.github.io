{"title":"面试题笔记——JS篇(上)","uid":"7fd56521850f8ad3304286dc32e903a9","slug":"面试题笔记——JS篇(上)","date":"2021-06-20T02:11:19.000Z","updated":"2023-04-21T08:26:42.826Z","comments":true,"path":"api/articles/面试题笔记——JS篇(上).json","keywords":null,"cover":[],"content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/902fcf3e6da84b7f85398e0c80caeaac~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"JavaScript面试题.png\"></p>\n<h2 id=\"一、数据类型\"><a href=\"#一、数据类型\" class=\"headerlink\" title=\"一、数据类型\"></a>一、数据类型</h2><h3 id=\"1-JavaScript有哪些数据类型，它们的区别？\"><a href=\"#1-JavaScript有哪些数据类型，它们的区别？\" class=\"headerlink\" title=\"1. JavaScript有哪些数据类型，它们的区别？\"></a>1. JavaScript有哪些数据类型，它们的区别？</h3><p>JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p>\n<p>其中 Symbol 和 BigInt 是ES6 中新增的数据类型：</p>\n<ul>\n<li>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li>\n<li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li>\n</ul>\n<p>这些数据可以分为原始数据类型和引用数据类型：</p>\n<ul>\n<li>栈：原始数据类型（Undefined、Null、Boolean、Number、String）</li>\n<li>堆：引用数据类型（对象、数组和函数）</li>\n</ul>\n<p>两种类型的区别在于<strong>存储位置的不同：</strong></p>\n<ul>\n<li>原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li>\n<li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li>\n</ul>\n<p>堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</p>\n<ul>\n<li>在数据结构中，栈中数据的存取方式为先进后出。</li>\n<li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li>\n</ul>\n<p>在操作系统中，内存被分为栈区和堆区：</p>\n<ul>\n<li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>\n<li>堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li>\n</ul>\n<h3 id=\"2-数据类型检测的方式有哪些\"><a href=\"#2-数据类型检测的方式有哪些\" class=\"headerlink\" title=\"2. 数据类型检测的方式有哪些\"></a>2. 数据类型检测的方式有哪些</h3><p><strong>（1）typeof</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(typeof 2);               &#x2F;&#x2F; number\nconsole.log(typeof true);            &#x2F;&#x2F; boolean\nconsole.log(typeof &#39;str&#39;);           &#x2F;&#x2F; string\nconsole.log(typeof []);              &#x2F;&#x2F; object    \nconsole.log(typeof function()&#123;&#125;);    &#x2F;&#x2F; function\nconsole.log(typeof &#123;&#125;);              &#x2F;&#x2F; object\nconsole.log(typeof undefined);       &#x2F;&#x2F; undefined\nconsole.log(typeof null);            &#x2F;&#x2F; object\n复制代码</code></pre>\n\n<p>其中数组、对象、null都会被判断为object，其他判断都正确。</p>\n<p><strong>（2）instanceof</strong></p>\n<p><code>instanceof</code>可以正确判断对象的类型，<strong>其内部运行机制是判断在其原型链中能否找到该类型的原型</strong>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(2 instanceof Number);                    &#x2F;&#x2F; false\nconsole.log(true instanceof Boolean);                &#x2F;&#x2F; false \nconsole.log(&#39;str&#39; instanceof String);                &#x2F;&#x2F; false \n \nconsole.log([] instanceof Array);                    &#x2F;&#x2F; true\nconsole.log(function()&#123;&#125; instanceof Function);       &#x2F;&#x2F; true\nconsole.log(&#123;&#125; instanceof Object);                   &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<p>可以看到，<code>instanceof</code><strong>只能正确判断引用数据类型</strong>，而不能判断基本数据类型。<code>instanceof</code> 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 <code>prototype</code> 属性。</p>\n<p><strong>（3） constructor</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log((2).constructor &#x3D;&#x3D;&#x3D; Number); &#x2F;&#x2F; true\nconsole.log((true).constructor &#x3D;&#x3D;&#x3D; Boolean); &#x2F;&#x2F; true\nconsole.log((&#39;str&#39;).constructor &#x3D;&#x3D;&#x3D; String); &#x2F;&#x2F; true\nconsole.log(([]).constructor &#x3D;&#x3D;&#x3D; Array); &#x2F;&#x2F; true\nconsole.log((function() &#123;&#125;).constructor &#x3D;&#x3D;&#x3D; Function); &#x2F;&#x2F; true\nconsole.log((&#123;&#125;).constructor &#x3D;&#x3D;&#x3D; Object); &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<p><code>constructor</code>有两个作用，一是判断数据的类型，二是对象实例通过 <code>constrcutor</code> 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型了：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function Fn()&#123;&#125;;\n \nFn.prototype &#x3D; new Array();\n \nvar f &#x3D; new Fn();\n \nconsole.log(f.constructor&#x3D;&#x3D;&#x3D;Fn);    &#x2F;&#x2F; false\nconsole.log(f.constructor&#x3D;&#x3D;&#x3D;Array); &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<p><strong>（4）Object.prototype.toString.call()</strong></p>\n<p><code>Object.prototype.toString.call()</code> 使用 Object 对象的原型方法 toString 来判断数据类型：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D; Object.prototype.toString;\n \nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call(&#39;str&#39;));\nconsole.log(a.call([]));\nconsole.log(a.call(function()&#123;&#125;));\nconsole.log(a.call(&#123;&#125;));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n复制代码</code></pre>\n\n<p>同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？</p>\n<p>这是因为toString是Object的原型方法，而Array、function等<strong>类型作为Object的实例，都重写了toString方法</strong>。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。</p>\n<h3 id=\"3-判断数组的方式有哪些\"><a href=\"#3-判断数组的方式有哪些\" class=\"headerlink\" title=\"3. 判断数组的方式有哪些\"></a>3. 判断数组的方式有哪些</h3><ul>\n<li>通过Object.prototype.toString.call()做判断</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Object.prototype.toString.call(obj).slice(8,-1) &#x3D;&#x3D;&#x3D; &#39;Array&#39;;\n复制代码</code></pre>\n\n<ul>\n<li>通过原型链做判断</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">obj.__proto__ &#x3D;&#x3D;&#x3D; Array.prototype;\n复制代码</code></pre>\n\n<ul>\n<li>通过ES6的Array.isArray()做判断</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.isArrray(obj);\n复制代码</code></pre>\n\n<ul>\n<li>通过instanceof做判断</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">obj instanceof Array\n复制代码</code></pre>\n\n<ul>\n<li>通过Array.prototype.isPrototypeOf</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.prototype.isPrototypeOf(obj)\n复制代码</code></pre>\n\n<h3 id=\"4-null和undefined区别\"><a href=\"#4-null和undefined区别\" class=\"headerlink\" title=\"4. null和undefined区别\"></a>4. null和undefined区别</h3><p>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</p>\n<p>undefined 代表的含义是<strong>未定义</strong>，null 代表的含义是<strong>空对象</strong>。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。</p>\n<p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p>\n<p>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</p>\n<h3 id=\"5-typeof-null-的结果是什么，为什么？\"><a href=\"#5-typeof-null-的结果是什么，为什么？\" class=\"headerlink\" title=\"5. typeof null 的结果是什么，为什么？\"></a>5. typeof null 的结果是什么，为什么？</h3><p>typeof null 的结果是Object。</p>\n<p>在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 <strong>类型标签(1-3 bits)</strong> 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">000: object   - 当前存储的数据指向一个对象。\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\n010: double   - 当前存储的数据指向一个双精度的浮点数。\n100: string   - 当前存储的数据指向一个字符串。\n110: boolean  - 当前存储的数据是布尔值。\n复制代码</code></pre>\n\n<p>如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。</p>\n<p>有两种特殊数据类型：</p>\n<ul>\n<li>undefined的值是 (-2)30(一个超出整数范围的数字)；</li>\n<li>null 的值是机器码 NULL 指针(null 指针的值全是 0)</li>\n</ul>\n<p>那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。</p>\n<h3 id=\"6-intanceof-操作符的实现原理及实现\"><a href=\"#6-intanceof-操作符的实现原理及实现\" class=\"headerlink\" title=\"6. intanceof 操作符的实现原理及实现\"></a>6. intanceof 操作符的实现原理及实现</h3><p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function myInstanceof(left, right) &#123;\n  &#x2F;&#x2F; 获取对象的原型\n  let proto &#x3D; Object.getPrototypeOf(left)\n  &#x2F;&#x2F; 获取构造函数的 prototype 对象\n  let prototype &#x3D; right.prototype; \n \n  &#x2F;&#x2F; 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) &#123;\n    if (!proto) return false;\n    if (proto &#x3D;&#x3D;&#x3D; prototype) return true;\n    &#x2F;&#x2F; 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto &#x3D; Object.getPrototypeOf(proto);\n  &#125;\n&#125;\n复制代码</code></pre>\n\n<h3 id=\"7-为什么0-1-0-2-x3D-x3D-0-3，如何让其相等\"><a href=\"#7-为什么0-1-0-2-x3D-x3D-0-3，如何让其相等\" class=\"headerlink\" title=\"7. 为什么0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等\"></a>7. 为什么0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等</h3><p>在开发过程中遇到类似这样的问题：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let n1 &#x3D; 0.1, n2 &#x3D; 0.2\nconsole.log(n1 + n2)  &#x2F;&#x2F; 0.30000000000000004\n复制代码</code></pre>\n\n<p>这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(n1 + n2).toFixed(2) &#x2F;&#x2F; 注意，toFixed为四舍五入\n复制代码</code></pre>\n\n<p><code>toFixed(num)</code> 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？</p>\n<p>计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是<code>0.0001100110011001100...</code>（1100循环），0.2的二进制是：<code>0.00110011001100...</code>（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？</p>\n<p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。</p>\n<p>根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：<code>0.30000000000000004</code>。</p>\n<p>下面看一下<strong>双精度数是如何保存</strong>的： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17405e84de984f7f9e21422301bae002~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<ul>\n<li>第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位</li>\n<li>第二部分（绿色）：用来存储指数（exponent），占用11位</li>\n<li>第三部分（红色）：用来存储小数（fraction），占用52位</li>\n</ul>\n<p>对于0.1，它的二进制为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0.00011001100110011001100110011001100110011001100110011001 10011...\n复制代码</code></pre>\n\n<p>转为科学计数法（科学计数法的结果就是浮点数）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1.1001100110011001100110011001100110011001100110011001*2^-4\n复制代码</code></pre>\n\n<p>可以看出0.1的符号位为0，指数位为-4，小数位为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1001100110011001100110011001100110011001100110011001\n复制代码</code></pre>\n\n<p>那么问题又来了，<strong>指数位是负数，该如何保存</strong>呢？</p>\n<p>IEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定<strong>双精度数的偏移量为1023</strong>。</p>\n<ul>\n<li>当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023&#x3D; -1022，e最大值是2046，则2046-1023&#x3D;1023，可以看到，这种情况下取值范围是<code>-1022~1013</code>。</li>\n<li>当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023&#x3D; -1022。</li>\n<li>当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s&#x3D;0时表示正无穷，s&#x3D;1时候表示负无穷。</li>\n</ul>\n<p>对于上面的0.1的指数位为-4，-4+1023 &#x3D; 1019 转化为二进制就是：<code>1111111011</code>.</p>\n<p>所以，0.1表示为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 1111111011 1001100110011001100110011001100110011001100110011001\n复制代码</code></pre>\n\n<p>说了这么多，是时候该最开始的问题了，如何实现0.1+0.2&#x3D;0.3呢？</p>\n<p>对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了<code>Number.EPSILON</code>属性，而它的值就是2-52，只要判断<code>0.1+0.2-0.3</code>是否小于<code>Number.EPSILON</code>，如果小于，就可以判断为0.1+0.2 &#x3D;&#x3D;&#x3D;0.3</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function numberepsilon(arg1,arg2)&#123;                   \n  return Math.abs(arg1 - arg2) &lt; Number.EPSILON;        \n&#125;        \n\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<h3 id=\"8-如何获取安全的-undefined-值？\"><a href=\"#8-如何获取安全的-undefined-值？\" class=\"headerlink\" title=\"8. 如何获取安全的 undefined 值？\"></a>8. 如何获取安全的 undefined 值？</h3><p>因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。</p>\n<h3 id=\"9-typeof-NaN-的结果是什么？\"><a href=\"#9-typeof-NaN-的结果是什么？\" class=\"headerlink\" title=\"9. typeof NaN 的结果是什么？\"></a>9. typeof NaN 的结果是什么？</h3><p>NaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typeof NaN; &#x2F;&#x2F; &quot;number&quot;\n复制代码</code></pre>\n\n<p>NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x &#x3D;&#x3D;&#x3D; x 不成立）的值。而 NaN !&#x3D;&#x3D; NaN 为 true。</p>\n<h3 id=\"10-isNaN-和-Number-isNaN-函数的区别？\"><a href=\"#10-isNaN-和-Number-isNaN-函数的区别？\" class=\"headerlink\" title=\"10. isNaN 和 Number.isNaN 函数的区别？\"></a>10. isNaN 和 Number.isNaN 函数的区别？</h3><ul>\n<li>函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。</li>\n<li>函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</li>\n</ul>\n<h3 id=\"12-其他值到字符串的转换规则？\"><a href=\"#12-其他值到字符串的转换规则？\" class=\"headerlink\" title=\"12. 其他值到字符串的转换规则？\"></a>12. 其他值到字符串的转换规则？</h3><ul>\n<li>Null 和 Undefined 类型 ，null 转换为 “null”，undefined 转换为 “undefined”，</li>\n<li>Boolean 类型，true 转换为 “true”，false 转换为 “false”。</li>\n<li>Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。</li>\n<li>Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</li>\n<li>对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如”[object Object]”。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。</li>\n</ul>\n<h3 id=\"13-其他值到数字值的转换规则？\"><a href=\"#13-其他值到数字值的转换规则？\" class=\"headerlink\" title=\"13. 其他值到数字值的转换规则？\"></a>13. 其他值到数字值的转换规则？</h3><ul>\n<li>Undefined 类型的值转换为 NaN。</li>\n<li>Null 类型的值转换为 0。</li>\n<li>Boolean 类型的值，true 转换为 1，false 转换为 0。</li>\n<li>String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</li>\n<li>Symbol 类型的值不能转换为数字，会报错。</li>\n<li>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</li>\n</ul>\n<p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。</p>\n<p>如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。</p>\n<h3 id=\"14-其他值到布尔类型的值的转换规则？\"><a href=\"#14-其他值到布尔类型的值的转换规则？\" class=\"headerlink\" title=\"14. 其他值到布尔类型的值的转换规则？\"></a>14. 其他值到布尔类型的值的转换规则？</h3><p>以下这些是假值： • undefined • null • false • +0、-0 和 NaN • “”</p>\n<p>假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。</p>\n<h3 id=\"15-和-amp-amp-操作符的返回值？\"><a href=\"#15-和-amp-amp-操作符的返回值？\" class=\"headerlink\" title=\"15. || 和 &amp;&amp; 操作符的返回值？\"></a>15. || 和 &amp;&amp; 操作符的返回值？</h3><p>|| 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。</p>\n<ul>\n<li>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</li>\n<li>&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</li>\n</ul>\n<p>|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果</p>\n<h3 id=\"16-Object-is-与比较操作符-“-x3D-x3D-x3D-”、“-x3D-x3D-”-的区别？\"><a href=\"#16-Object-is-与比较操作符-“-x3D-x3D-x3D-”、“-x3D-x3D-”-的区别？\" class=\"headerlink\" title=\"16. Object.is() 与比较操作符 “&#x3D;&#x3D;&#x3D;”、“&#x3D;&#x3D;” 的区别？\"></a>16. Object.is() 与比较操作符 “&#x3D;&#x3D;&#x3D;”、“&#x3D;&#x3D;” 的区别？</h3><ul>\n<li>使用双等号（&#x3D;&#x3D;）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</li>\n<li>使用三等号（&#x3D;&#x3D;&#x3D;）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</li>\n<li>使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。</li>\n</ul>\n<h3 id=\"17-什么是-JavaScript-中的包装类型？\"><a href=\"#17-什么是-JavaScript-中的包装类型？\" class=\"headerlink\" title=\"17. 什么是 JavaScript 中的包装类型？\"></a>17. 什么是 JavaScript 中的包装类型？</h3><p>在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const a &#x3D; &quot;abc&quot;;\na.length; &#x2F;&#x2F; 3\na.toUpperCase(); &#x2F;&#x2F; &quot;ABC&quot;\n复制代码</code></pre>\n\n<p>在访问<code>&#39;abc&#39;.length</code>时，JavaScript 将<code>&#39;abc&#39;</code>在后台转换成<code>String(&#39;abc&#39;)</code>，然后再访问其<code>length</code>属性。</p>\n<p>JavaScript也可以使用<code>Object</code>函数显式地将基本类型转换为包装类型：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D; &#39;abc&#39;\nObject(a) &#x2F;&#x2F; String &#123;&quot;abc&quot;&#125;\n复制代码</code></pre>\n\n<p>也可以使用<code>valueOf</code>方法将包装类型倒转成基本类型：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D; &#39;abc&#39;\nvar b &#x3D; Object(a)\nvar c &#x3D; b.valueOf() &#x2F;&#x2F; &#39;abc&#39;\n复制代码</code></pre>\n\n<p>看看如下代码会打印出什么：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D; new Boolean( false );\nif (!a) &#123;\n\tconsole.log( &quot;Oops&quot; ); &#x2F;&#x2F; never runs\n&#125;\n复制代码</code></pre>\n\n<p>答案是什么都不会打印，因为虽然包裹的基本类型是<code>false</code>，但是<code>false</code>被包裹成包装类型后就成了对象，所以其非值为<code>false</code>，所以循环体中的内容不会运行。</p>\n<h3 id=\"18-JavaScript-中如何进行隐式类型转换？\"><a href=\"#18-JavaScript-中如何进行隐式类型转换？\" class=\"headerlink\" title=\"18. JavaScript 中如何进行隐式类型转换？\"></a>18. JavaScript 中如何进行隐式类型转换？</h3><p>首先要介绍<code>ToPrimitive</code>方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*&#x2F;\nToPrimitive(obj,type)\n复制代码</code></pre>\n\n<p><code>type</code>的值为<code>number</code>或者<code>string</code>。</p>\n<p><strong>（1）当</strong><code>type</code><strong>为</strong><code>number</code><strong>时规则如下：</strong></p>\n<ul>\n<li>调用<code>obj</code>的<code>valueOf</code>方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用<code>obj</code>的<code>toString</code>方法，后续同上；</li>\n<li>抛出<code>TypeError</code> 异常。</li>\n</ul>\n<p><strong>（2）当</strong><code>type</code><strong>为</strong><code>string</code><strong>时规则如下：</strong></p>\n<ul>\n<li>调用<code>obj</code>的<code>toString</code>方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用<code>obj</code>的<code>valueOf</code>方法，后续同上；</li>\n<li>抛出<code>TypeError</code> 异常。</li>\n</ul>\n<p>可以看出两者的主要区别在于调用<code>toString</code>和<code>valueOf</code>的先后顺序。默认情况下：</p>\n<ul>\n<li>如果对象为 Date 对象，则<code>type</code>默认为<code>string</code>；</li>\n<li>其他情况下，<code>type</code>默认为<code>number</code>。</li>\n</ul>\n<p>总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var objToNumber &#x3D; value &#x3D;&gt; Number(value.valueOf().toString())\nobjToNumber([]) &#x3D;&#x3D;&#x3D; 0\nobjToNumber(&#123;&#125;) &#x3D;&#x3D;&#x3D; NaN\n复制代码</code></pre>\n\n<p>而 JavaScript 中的隐式类型转换主要发生在<code>+、-、*、/</code>以及<code>==、&gt;、&lt;</code>这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用<code>ToPrimitive</code>转换成基本类型，再进行操作。</p>\n<p>以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被<code>ToPrimitive</code>转换成基本类型，所以最终还是要应用基本类型转换规则）：</p>\n<ol>\n<li><code>+</code><strong>操作符</strong> <code>+</code>操作符的两边有至少一个<code>string</code>类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 + &#39;23&#39; &#x2F;&#x2F; &#39;123&#39;\n 1 + false &#x2F;&#x2F; 1 \n 1 + Symbol() &#x2F;&#x2F; Uncaught TypeError: Cannot convert a Symbol value to a number\n &#39;1&#39; + false &#x2F;&#x2F; &#39;1false&#39;\n false + true &#x2F;&#x2F; 1\n复制代码</code></pre>\n\n<ol start=\"2\">\n<li><code>-</code>、<code>*</code>、&#96;&#96;<strong>操作符</strong></li>\n</ol>\n<p><code>NaN</code>也是一个数字</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 * &#39;23&#39; &#x2F;&#x2F; 23\n 1 * false &#x2F;&#x2F; 0\n 1 &#x2F; &#39;aa&#39; &#x2F;&#x2F; NaN\n复制代码</code></pre>\n\n<ol start=\"3\">\n<li><strong>对于</strong><code>==</code><strong>操作符</strong></li>\n</ol>\n<p>操作符两边的值都尽量转成<code>number</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">3 &#x3D;&#x3D; true &#x2F;&#x2F; false, 3 转为number为3，true转为number为1\n&#39;0&#39; &#x3D;&#x3D; false &#x2F;&#x2F;true, &#39;0&#39;转为number为0，false转为number为0\n&#39;0&#39; &#x3D;&#x3D; 0 &#x2F;&#x2F; &#39;0&#39;转为number为0\n复制代码</code></pre>\n\n<ol start=\"4\">\n<li><strong>对于</strong><code>&lt;</code><strong>和</strong><code>&gt;</code><strong>比较符</strong></li>\n</ol>\n<p>如果两边都是字符串，则比较字母表顺序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#39;ca&#39; &lt; &#39;bd&#39; &#x2F;&#x2F; false\n&#39;a&#39; &lt; &#39;b&#39; &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<p>其他情况下，转换为数字再比较：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#39;12&#39; &lt; 13 &#x2F;&#x2F; true\nfalse &gt; -1 &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<p>以上说的是基本类型的隐式转换，而对象会被<code>ToPrimitive</code>转换为基本类型再进行转换：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D; &#123;&#125;\na &gt; 2 &#x2F;&#x2F; false\n复制代码</code></pre>\n\n<p>其对比过程如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a.valueOf() &#x2F;&#x2F; &#123;&#125;, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() &#x2F;&#x2F; &quot;[object Object]&quot;，现在是一个字符串了\nNumber(a.toString()) &#x2F;&#x2F; NaN，根据上面 &lt; 和 &gt; 操作符的规则，要转换成数字\nNaN &gt; 2 &#x2F;&#x2F;false，得出比较结果\n复制代码</code></pre>\n\n<p>又比如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D; &#123;name:&#39;Jack&#39;&#125;\nvar b &#x3D; &#123;age: 18&#125;\na + b &#x2F;&#x2F; &quot;[object Object][object Object]&quot;\n复制代码</code></pre>\n\n<p>运算过程如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a.valueOf() &#x2F;&#x2F; &#123;&#125;，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() &#x2F;&#x2F; &quot;[object Object]&quot;\nb.valueOf() &#x2F;&#x2F; 同理\nb.toString() &#x2F;&#x2F; &quot;[object Object]&quot;\na + b &#x2F;&#x2F; &quot;[object Object][object Object]&quot;\n复制代码</code></pre>\n\n<h3 id=\"19-操作符什么时候用于字符串的拼接？\"><a href=\"#19-操作符什么时候用于字符串的拼接？\" class=\"headerlink\" title=\"19. + 操作符什么时候用于字符串的拼接？\"></a>19. <code>+</code> 操作符什么时候用于字符串的拼接？</h3><p>根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。</p>\n<p>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。</p>\n<p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。</p>\n<h3 id=\"20-为什么会有BigInt的提案？\"><a href=\"#20-为什么会有BigInt的提案？\" class=\"headerlink\" title=\"20. 为什么会有BigInt的提案？\"></a>20. 为什么会有<strong>BigInt</strong>的提案？</h3><p>JavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。</p>\n<h3 id=\"21-object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别\"><a href=\"#21-object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别\" class=\"headerlink\" title=\"21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别\"></a>21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别</h3><p>扩展运算符：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let outObj &#x3D; &#123;\n  inObj: &#123;a: 1, b: 2&#125;\n&#125;\nlet newObj &#x3D; &#123;...outObj&#125;\nnewObj.inObj.a &#x3D; 2\nconsole.log(outObj) &#x2F;&#x2F; &#123;inObj: &#123;a: 2, b: 2&#125;&#125;\n复制代码</code></pre>\n\n<p>Object.assign():</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let outObj &#x3D; &#123;\n  inObj: &#123;a: 1, b: 2&#125;\n&#125;\nlet newObj &#x3D; Object.assign(&#123;&#125;, outObj)\nnewObj.inObj.a &#x3D; 2\nconsole.log(outObj) &#x2F;&#x2F; &#123;inObj: &#123;a: 2, b: 2&#125;&#125;\n复制代码</code></pre>\n\n<p>可以看到，两者都是浅拷贝。</p>\n<ul>\n<li>Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。</li>\n<li>扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。</li>\n</ul>\n<h2 id=\"二、ES6\"><a href=\"#二、ES6\" class=\"headerlink\" title=\"二、ES6\"></a>二、ES6</h2><h3 id=\"1-let、const、var的区别\"><a href=\"#1-let、const、var的区别\" class=\"headerlink\" title=\"1. let、const、var的区别\"></a>1. let、const、var的区别</h3><p><strong>（1）块级作用域：</strong> 块作用域由 <code>&#123; &#125;</code>包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：</p>\n<ul>\n<li>内层变量可能覆盖外层变量</li>\n<li>用来计数的循环变量泄露为全局变量</li>\n</ul>\n<p><strong>（2）变量提升：</strong> var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p>\n<p><strong>（3）给全局添加属性：</strong> 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</p>\n<p><strong>（4）重复声明：</strong> var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。</p>\n<p><strong>（5）暂时性死区：</strong> 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为<strong>暂时性死区</strong>。使用var声明的变量不存在暂时性死区。</p>\n<p><strong>（6）初始值设置：</strong> 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</p>\n<p><strong>（7）指针指向：</strong> let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。</p>\n<table>\n<thead>\n<tr>\n<th><strong>区别</strong></th>\n<th><strong>var</strong></th>\n<th><strong>let</strong></th>\n<th><strong>const</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是否有块级作用域</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否存在变量提升</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否添加全局属性</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>能否重复声明变量</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否存在暂时性死区</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否必须设置初始值</td>\n<td>×</td>\n<td>×</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>能否改变指针指向</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-const对象的属性可以修改吗\"><a href=\"#2-const对象的属性可以修改吗\" class=\"headerlink\" title=\"2. const对象的属性可以修改吗\"></a>2. const对象的属性可以修改吗</h3><p>const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。</p>\n<p>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>\n<h3 id=\"3-如果new一个箭头函数的会怎么样\"><a href=\"#3-如果new一个箭头函数的会怎么样\" class=\"headerlink\" title=\"3. 如果new一个箭头函数的会怎么样\"></a>3. 如果new一个箭头函数的会怎么样</h3><p>箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。</p>\n<p>new操作符的实现步骤如下：</p>\n<ol>\n<li>创建一个对象</li>\n<li>将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）</li>\n<li>指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）</li>\n<li>返回新的对象</li>\n</ol>\n<p>所以，上面的第二、三步，箭头函数都是没有办法执行的。</p>\n<h3 id=\"4-箭头函数与普通函数的区别\"><a href=\"#4-箭头函数与普通函数的区别\" class=\"headerlink\" title=\"4. 箭头函数与普通函数的区别\"></a>4. 箭头函数与普通函数的区别</h3><p><strong>（1）箭头函数比普通函数更加简洁</strong></p>\n<ul>\n<li>如果没有参数，就直接写一个空括号即可</li>\n<li>如果只有一个参数，可以省去参数的括号</li>\n<li>如果有多个参数，用逗号分割</li>\n<li>如果函数体的返回值只有一句，可以省略大括号</li>\n<li>如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let fn &#x3D; () &#x3D;&gt; void doesNotReturn();\n复制代码</code></pre>\n\n<p><strong>（2）箭头函数没有自己的this</strong></p>\n<p>箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。</p>\n<p><strong>（3）箭头函数继承来的this指向永远不会改变</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var id &#x3D; &#39;GLOBAL&#39;;\nvar obj &#x3D; &#123;\n  id: &#39;OBJ&#39;,\n  a: function()&#123;\n    console.log(this.id);\n  &#125;,\n  b: () &#x3D;&gt; &#123;\n    console.log(this.id);\n  &#125;\n&#125;;\nobj.a();    &#x2F;&#x2F; &#39;OBJ&#39;\nobj.b();    &#x2F;&#x2F; &#39;GLOBAL&#39;\nnew obj.a()  &#x2F;&#x2F; undefined\nnew obj.b()  &#x2F;&#x2F; Uncaught TypeError: obj.b is not a constructor\n复制代码</code></pre>\n\n<p>对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号<code>&#123;&#125;</code>是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</p>\n<p><strong>（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var id &#x3D; &#39;Global&#39;;\nlet fun1 &#x3D; () &#x3D;&gt; &#123;\n    console.log(this.id)\n&#125;;\nfun1();                     &#x2F;&#x2F; &#39;Global&#39;\nfun1.call(&#123;id: &#39;Obj&#39;&#125;);     &#x2F;&#x2F; &#39;Global&#39;\nfun1.apply(&#123;id: &#39;Obj&#39;&#125;);    &#x2F;&#x2F; &#39;Global&#39;\nfun1.bind(&#123;id: &#39;Obj&#39;&#125;)();   &#x2F;&#x2F; &#39;Global&#39;\n复制代码</code></pre>\n\n<p><strong>（5）箭头函数不能作为构造函数使用</strong></p>\n<p>构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<p><strong>（6）箭头函数没有自己的arguments</strong></p>\n<p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。</p>\n<p><strong>（7）箭头函数没有prototype</strong></p>\n<p><strong>（8）箭头函数不能用作Generator函数，不能使用yeild关键字</strong></p>\n<h3 id=\"5-箭头函数的this指向哪⾥？\"><a href=\"#5-箭头函数的this指向哪⾥？\" class=\"headerlink\" title=\"5. 箭头函数的this指向哪⾥？\"></a>5. 箭头函数的<strong>this</strong>指向哪⾥？</h3><p>箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。</p>\n<p>可以⽤Babel理解⼀下箭头函数:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES6 \nconst obj &#x3D; &#123; \n  getArrow() &#123; \n    return () &#x3D;&gt; &#123; \n      console.log(this &#x3D;&#x3D;&#x3D; obj); \n    &#125;; \n  &#125; \n&#125;\n复制代码</code></pre>\n\n<p>转化后：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5，由 Babel 转译\nvar obj &#x3D; &#123; \n   getArrow: function getArrow() &#123; \n     var _this &#x3D; this; \n     return function () &#123; \n        console.log(_this &#x3D;&#x3D;&#x3D; obj); \n     &#125;; \n   &#125; \n&#125;;\n复制代码</code></pre>\n\n<h3 id=\"6-扩展运算符的作用及使用场景\"><a href=\"#6-扩展运算符的作用及使用场景\" class=\"headerlink\" title=\"6. 扩展运算符的作用及使用场景\"></a>6. 扩展运算符的作用及使用场景</h3><p><strong>（1）对象扩展运算符</strong></p>\n<p>对象的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let bar &#x3D; &#123; a: 1, b: 2 &#125;;\nlet baz &#x3D; &#123; ...bar &#125;; &#x2F;&#x2F; &#123; a: 1, b: 2 &#125;\n复制代码</code></pre>\n\n<p>上述方法实际上等价于:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let bar &#x3D; &#123; a: 1, b: 2 &#125;;\nlet baz &#x3D; Object.assign(&#123;&#125;, bar); &#x2F;&#x2F; &#123; a: 1, b: 2 &#125;\n复制代码</code></pre>\n\n<p><code>Object.assign</code>方法用于对象的合并，将源对象<code>（source）</code>的所有可枚举属性，复制到目标对象<code>（target）</code>。<code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。(<strong>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性</strong>)。</p>\n<p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let bar &#x3D; &#123;a: 1, b: 2&#125;;\nlet baz &#x3D; &#123;...bar, ...&#123;a:2, b: 4&#125;&#125;;  &#x2F;&#x2F; &#123;a: 2, b: 4&#125;\n复制代码</code></pre>\n\n<p>利用上述特性就可以很方便的修改对象的部分属性。在<code>redux</code>中的<code>reducer</code>函数规定必须是<strong>一个纯函数</strong>，<code>reducer</code>中的<code>state</code>对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。</p>\n<p>需要注意：<strong>扩展运算符对对象实例的拷贝属于浅拷贝</strong>。</p>\n<p><strong>（2）数组扩展运算符</strong></p>\n<p>数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(...[1, 2, 3])\n&#x2F;&#x2F; 1 2 3\nconsole.log(...[1, [2, 3, 4], 5])\n&#x2F;&#x2F; 1 [2, 3, 4] 5\n复制代码</code></pre>\n\n<p>下面是数组的扩展运算符的应用：</p>\n<ul>\n<li><strong>将数组转换为参数序列</strong></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function add(x, y) &#123;\n  return x + y;\n&#125;\nconst numbers &#x3D; [1, 2];\nadd(...numbers) &#x2F;&#x2F; 3\n复制代码</code></pre>\n\n<ul>\n<li><strong>复制数组</strong></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const arr1 &#x3D; [1, 2];\nconst arr2 &#x3D; [...arr1];\n复制代码</code></pre>\n\n<p>要记住：<strong>扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong>，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p>\n<ul>\n<li><strong>合并数组</strong></li>\n</ul>\n<p>如果想在数组内合并数组，可以这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const arr1 &#x3D; [&#39;two&#39;, &#39;three&#39;];const arr2 &#x3D; [&#39;one&#39;, ...arr1, &#39;four&#39;, &#39;five&#39;];&#x2F;&#x2F; [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;]\n复制代码</code></pre>\n\n<ul>\n<li><strong>扩展运算符与解构赋值结合起来，用于生成数组</strong></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const [first, ...rest] &#x3D; [1, 2, 3, 4, 5];first &#x2F;&#x2F; 1rest  &#x2F;&#x2F; [2, 3, 4, 5]\n复制代码</code></pre>\n\n<p>需要注意：<strong>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const [...rest, last] &#x3D; [1, 2, 3, 4, 5];         &#x2F;&#x2F; 报错const [first, ...rest, last] &#x3D; [1, 2, 3, 4, 5];  &#x2F;&#x2F; 报错\n复制代码</code></pre>\n\n<ul>\n<li><strong>将字符串转为真正的数组</strong></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[...&#39;hello&#39;]    &#x2F;&#x2F; [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]\n复制代码</code></pre>\n\n<ul>\n<li><strong>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</strong></li>\n</ul>\n<p>比较常见的应用是可以将某些数据结构转为数组：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; arguments对象\nfunction foo() &#123;\n  const args &#x3D; [...arguments];\n&#125;\n复制代码</code></pre>\n\n<p>用于替换<code>es5</code>中的<code>Array.prototype.slice.call(arguments)</code>写法。</p>\n<ul>\n<li><strong>使用</strong><code>Math</code><strong>函数获取数组中特定的值</strong></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const numbers &#x3D; [9, 4, 7, 1];\nMath.min(...numbers); &#x2F;&#x2F; 1\nMath.max(...numbers); &#x2F;&#x2F; 9\n复制代码</code></pre>\n\n<h3 id=\"8-对对象与数组的解构的理解\"><a href=\"#8-对对象与数组的解构的理解\" class=\"headerlink\" title=\"8. 对对象与数组的解构的理解\"></a>8. 对对象与数组的解构的理解</h3><p>解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 <strong>1）数组的解构</strong> 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const [a, b, c] &#x3D; [1, 2, 3]\n复制代码</code></pre>\n\n<p>最终，a、b、c分别被赋予了数组第0、1、2个索引位的值： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4d736e253dd4e65b91f286e58fca852~tplv-k3u1fbpfcp-zoom-1.image\"> 数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const [a,,c] &#x3D; [1,2,3]\n复制代码</code></pre>\n\n<p>通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cdeac34bdba64c23a8031ce88637c44c~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p><strong>2）对象的解构</strong> 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const stu &#x3D; &#123;\n  name: &#39;Bob&#39;,\n  age: 24\n&#125;\n复制代码</code></pre>\n\n<p>假如想要解构它的两个自有属性，可以这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; name, age &#125; &#x3D; stu\n复制代码</code></pre>\n\n<p>这样就得到了 name 和 age 两个和 stu 平级的变量： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbf21ede550a4356a6c610cff81a8283~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; age, name &#125; &#x3D; stu\n复制代码</code></pre>\n\n<h3 id=\"9-如何提取高度嵌套的对象里的指定属性？\"><a href=\"#9-如何提取高度嵌套的对象里的指定属性？\" class=\"headerlink\" title=\"9. 如何提取高度嵌套的对象里的指定属性？\"></a>9. <strong>如何提取高度嵌套的对象里的指定属性？</strong></h3><p>有时会遇到一些嵌套程度非常深的对象：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const school &#x3D; &#123;\n   classes: &#123;\n      stu: &#123;\n         name: &#39;Bob&#39;,\n         age: 24,\n      &#125;\n   &#125;\n&#125;\n复制代码</code></pre>\n\n<p>像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; name &#125; &#x3D; school\n复制代码</code></pre>\n\n<p>显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; classes &#125; &#x3D; school\nconst &#123; stu &#125; &#x3D; classes\nconst &#123; name &#125; &#x3D; stu\nname &#x2F;&#x2F; &#39;Bob&#39;\n复制代码</code></pre>\n\n<p>但是还有一种更标准的做法，可以用一行代码来解决这个问题：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; classes: &#123; stu: &#123; name &#125; &#125;&#125; &#x3D; school\n       \nconsole.log(name)  &#x2F;&#x2F; &#39;Bob&#39;\n复制代码</code></pre>\n\n<p>可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。</p>\n<h3 id=\"10-对-rest-参数的理解\"><a href=\"#10-对-rest-参数的理解\" class=\"headerlink\" title=\"10. 对 rest 参数的理解\"></a>10. 对 rest 参数的理解</h3><p>扩展运算符被用在函数形参上时，<strong>它还可以把一个分离的参数序列整合成一个数组</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function mutiple(...args) &#123;\n  let result &#x3D; 1;\n  for (var val of args) &#123;\n    result *&#x3D; val;\n  &#125;\n  return result;\n&#125;\nmutiple(1, 2, 3, 4) &#x2F;&#x2F; 24\n复制代码</code></pre>\n\n<p>这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function mutiple(...args) &#123;\n  console.log(args)\n&#125;\nmutiple(1, 2, 3, 4) &#x2F;&#x2F; [1, 2, 3, 4]\n复制代码</code></pre>\n\n<p>这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点<strong>经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。</strong></p>\n<h3 id=\"11-ES6中模板语法与字符串处理\"><a href=\"#11-ES6中模板语法与字符串处理\" class=\"headerlink\" title=\"11. ES6中模板语法与字符串处理\"></a>11. ES6中模板语法与字符串处理</h3><p>ES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var name &#x3D; &#39;css&#39;   \nvar career &#x3D; &#39;coder&#39; \nvar hobby &#x3D; [&#39;coding&#39;, &#39;writing&#39;]\nvar finalString &#x3D; &#39;my name is &#39; + name + &#39;, I work as a &#39; + career + &#39;, I love &#39; + hobby[0] + &#39; and &#39; + hobby[1]\n复制代码</code></pre>\n\n<p>仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var name &#x3D; &#39;css&#39;   \nvar career &#x3D; &#39;coder&#39; \nvar hobby &#x3D; [&#39;coding&#39;, &#39;writing&#39;]\nvar finalString &#x3D; &#96;my name is $&#123;name&#125;, I work as a $&#123;career&#125; I love $&#123;hobby[0]&#125; and $&#123;hobby[1]&#125;&#96;\n复制代码</code></pre>\n\n<p>字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：</p>\n<ul>\n<li>在模板字符串中，空格、缩进、换行都会被保留</li>\n<li>模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算</li>\n</ul>\n<p>基于第一点，可以在模板字符串里无障碍地直接写 html 代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let list &#x3D; &#96;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;列表项1&lt;&#x2F;li&gt;\n\t\t&lt;li&gt;列表项2&lt;&#x2F;li&gt;\n\t&lt;&#x2F;ul&gt;\n&#96;;\nconsole.log(message); &#x2F;&#x2F; 正确输出，不存在报错\n复制代码</code></pre>\n\n<p>基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function add(a, b) &#123;\n  const finalString &#x3D; &#96;$&#123;a&#125; + $&#123;b&#125; &#x3D; $&#123;a+b&#125;&#96;\n  console.log(finalString)\n&#125;\nadd(1, 2) &#x2F;&#x2F; 输出 &#39;1 + 2 &#x3D; 3&#39;\n复制代码</code></pre>\n\n<p>除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：</p>\n<p>（1）<strong>存在性判定</strong>：在过去，当判断一个字符&#x2F;字符串是否在某字符串中时，只能用 indexOf &gt; -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。</p>\n<ul>\n<li><strong>includes</strong>：判断字符串与子串的包含关系：</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const son &#x3D; &#39;haha&#39; \nconst father &#x3D; &#39;xixi haha hehe&#39;\nfather.includes(son) &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<ul>\n<li><strong>startsWith</strong>：判断字符串是否以某个&#x2F;某串字符开头：</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const father &#x3D; &#39;xixi haha hehe&#39;\nfather.startsWith(&#39;haha&#39;) &#x2F;&#x2F; false\nfather.startsWith(&#39;xixi&#39;) &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<ul>\n<li><strong>endsWith</strong>：判断字符串是否以某个&#x2F;某串字符结尾：</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const father &#x3D; &#39;xixi haha hehe&#39;\n  father.endsWith(&#39;hehe&#39;) &#x2F;&#x2F; true\n复制代码</code></pre>\n\n<p>（2）<strong>自动重复</strong>：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const sourceCode &#x3D; &#39;repeat for 3 times;&#39;\nconst repeated &#x3D; sourceCode.repeat(3) \nconsole.log(repeated) &#x2F;&#x2F; repeat for 3 times;repeat for 3 times;repeat for 3 times;\n复制代码</code></pre>\n\n<h2 id=\"三、JavaScript基础\"><a href=\"#三、JavaScript基础\" class=\"headerlink\" title=\"三、JavaScript基础\"></a>三、JavaScript基础</h2><h3 id=\"1-new操作符的实现原理\"><a href=\"#1-new操作符的实现原理\" class=\"headerlink\" title=\"1. new操作符的实现原理\"></a>1. new操作符的实现原理</h3><p><strong>new操作符的执行过程：</strong></p>\n<p>（1）首先创建了一个新的空对象</p>\n<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>\n<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\n<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\n<p>具体实现：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function objectFactory() &#123;\n  let newObject &#x3D; null;\n  let constructor &#x3D; Array.prototype.shift.call(arguments);\n  let result &#x3D; null;\n  &#x2F;&#x2F; 判断参数是否是一个函数\n  if (typeof constructor !&#x3D;&#x3D; &quot;function&quot;) &#123;\n    console.error(&quot;type error&quot;);\n    return;\n  &#125;\n  &#x2F;&#x2F; 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject &#x3D; Object.create(constructor.prototype);\n  &#x2F;&#x2F; 将 this 指向新建对象，并执行函数\n  result &#x3D; constructor.apply(newObject, arguments);\n  &#x2F;&#x2F; 判断返回对象\n  let flag &#x3D; result &amp;&amp; (typeof result &#x3D;&#x3D;&#x3D; &quot;object&quot; || typeof result &#x3D;&#x3D;&#x3D; &quot;function&quot;);\n  &#x2F;&#x2F; 判断返回结果\n  return flag ? result : newObject;\n&#125;\n&#x2F;&#x2F; 使用方法\nobjectFactory(构造函数, 初始化参数);\n复制代码</code></pre>\n\n<h3 id=\"2-map和Object的区别\"><a href=\"#2-map和Object的区别\" class=\"headerlink\" title=\"2. map和Object的区别\"></a>2. map和Object的区别</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>Map</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>意外的键</td>\n<td>Map默认情况不包含任何键，只包含显式插入的键。</td>\n<td>Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。</td>\n</tr>\n<tr>\n<td>键的类型</td>\n<td>Map的键可以是任意值，包括函数、对象或任意基本类型。</td>\n<td>Object 的键必须是 String 或是Symbol。</td>\n</tr>\n<tr>\n<td>键的顺序</td>\n<td>Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。</td>\n<td>Object 的键是无序的</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Map 的键值对个数可以轻易地通过size 属性获取</td>\n<td>Object 的键值对个数只能手动计算</td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>Map 是 iterable 的，所以可以直接被迭代。</td>\n<td>迭代Object需要以某种方式获取它的键然后才能迭代。</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>在频繁增删键值对的场景下表现更好。</td>\n<td>在频繁添加和删除键值对的场景下未作出优化。</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-map和weakMap的区别\"><a href=\"#3-map和weakMap的区别\" class=\"headerlink\" title=\"3. map和weakMap的区别\"></a>3. map和weakMap的区别</h3><p><strong>（1）Map</strong> map本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</p>\n<p>实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const map &#x3D; [\n     [&quot;name&quot;,&quot;张三&quot;],\n     [&quot;age&quot;,18],\n]\n复制代码</code></pre>\n\n<p>Map数据结构有以下操作方法：</p>\n<ul>\n<li><strong>size</strong>： <code>map.size</code> 返回Map结构的成员总数。</li>\n<li><strong>set(key,value)</strong> ：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</li>\n<li><strong>get(key)</strong> ：该方法读取key对应的键值，如果找不到key，返回undefined。</li>\n<li><strong>has(key)</strong> ：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</li>\n<li><strong>delete(key)</strong> ：该方法删除某个键，返回true，如果删除失败，返回false。</li>\n<li><strong>clear()</strong> ：map.clear()清除所有成员，没有返回值。</li>\n</ul>\n<p>Map结构原生提供是三个遍历器生成函数和一个遍历方法</p>\n<ul>\n<li>keys()：返回键名的遍历器。</li>\n<li>values()：返回键值的遍历器。</li>\n<li>entries()：返回所有成员的遍历器。</li>\n<li>forEach()：遍历Map的所有成员。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const map &#x3D; new Map([\n     [&quot;foo&quot;,1],\n     [&quot;bar&quot;,2],\n])\nfor(let key of map.keys())&#123;\n    console.log(key);  &#x2F;&#x2F; foo bar\n&#125;\nfor(let value of map.values())&#123;\n     console.log(value); &#x2F;&#x2F; 1 2\n&#125;\nfor(let items of map.entries())&#123;\n    console.log(items);  &#x2F;&#x2F; [&quot;foo&quot;,1]  [&quot;bar&quot;,2]\n&#125;\nmap.forEach( (value,key,map) &#x3D;&gt; &#123;\n     console.log(key,value); &#x2F;&#x2F; foo 1    bar 2\n&#125;)\n复制代码</code></pre>\n\n<p><strong>（2）WeakMap</strong> WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。<strong>其键必须是对象</strong>，原始数据类型不能作为key值，而值可以是任意的。</p>\n<p>该对象也有以下几种方法：</p>\n<ul>\n<li><strong>set(key,value)</strong> ：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</li>\n<li><strong>get(key)</strong> ：该方法读取key对应的键值，如果找不到key，返回undefined。</li>\n<li><strong>has(key)</strong> ：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</li>\n<li><strong>delete(key)</strong> ：该方法删除某个键，返回true，如果删除失败，返回false。</li>\n</ul>\n<p>其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。</p>\n<p>WeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p>\n<p>而WeakMap的<strong>键名所引用的对象都是弱引用</strong>，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的<strong>键名对象和所对应的键值对会自动消失，不用手动删除引用</strong>。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>\n<li>WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</li>\n</ul>\n<h3 id=\"4-JavaScript有哪些内置对象\"><a href=\"#4-JavaScript有哪些内置对象\" class=\"headerlink\" title=\"4. JavaScript有哪些内置对象\"></a>4. JavaScript有哪些内置对象</h3><p>全局的对象（ global objects ）或称标准内置对象，不要和 “全局对象（global object）” 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</p>\n<p><strong>标准内置对象的分类：</strong></p>\n<p>（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量</p>\n<p>（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等</p>\n<p>（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等</p>\n<p>（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date</p>\n<p>（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp</p>\n<p>（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array</p>\n<p>（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet</p>\n<p>（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等</p>\n<p>（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等</p>\n<p>（10）控制抽象对象 例如 Promise、Generator 等</p>\n<p>（11）反射。例如 Reflect、Proxy</p>\n<p>（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等</p>\n<p>（13）WebAssembly</p>\n<p>（14）其他。例如 arguments</p>\n<p><strong>总结：</strong> js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。</p>\n<h3 id=\"5-常用的正则表达式有哪些？\"><a href=\"#5-常用的正则表达式有哪些？\" class=\"headerlink\" title=\"5. 常用的正则表达式有哪些？\"></a>5. 常用的正则表达式有哪些？</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; （1）匹配 16 进制颜色值\nvar regex &#x3D; &#x2F;#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)&#x2F;g;\n\n&#x2F;&#x2F; （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex &#x3D; &#x2F;^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$&#x2F;;\n\n&#x2F;&#x2F; （3）匹配 qq 号\nvar regex &#x3D; &#x2F;^[1-9][0-9]&#123;4,10&#125;$&#x2F;g;\n\n&#x2F;&#x2F; （4）手机号码正则\nvar regex &#x3D; &#x2F;^1[34578]\\d&#123;9&#125;$&#x2F;g;\n\n&#x2F;&#x2F; （5）用户名正则\nvar regex &#x3D; &#x2F;^[a-zA-Z$][a-zA-Z0-9_$]&#123;4,16&#125;$&#x2F;;\n复制代码</code></pre>\n\n<h3 id=\"6-对JSON的理解\"><a href=\"#6-对JSON的理解\" class=\"headerlink\" title=\"6. 对JSON的理解\"></a>6. 对JSON的理解</h3><p>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。</p>\n<p>在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。</p>\n<p>因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。</p>\n<p>在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，</p>\n<ul>\n<li>JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。</li>\n<li>JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。</li>\n</ul>\n<h3 id=\"7-JavaScript脚本延迟加载的方式有哪些？\"><a href=\"#7-JavaScript脚本延迟加载的方式有哪些？\" class=\"headerlink\" title=\"7. JavaScript脚本延迟加载的方式有哪些？\"></a>7. JavaScript脚本延迟加载的方式有哪些？</h3><p>延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。</p>\n<p>一般有以下几种方式：</p>\n<ul>\n<li><strong>defer 属性：</strong> 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。</li>\n<li><strong>async 属性：</strong> 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。</li>\n<li><strong>动态创建 DOM 方式：</strong> 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。</li>\n<li><strong>使用 setTimeout 延迟方法：</strong> 设置一个定时器来延迟加载js脚本文件</li>\n<li><strong>让 JS 最后加载：</strong> 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。</li>\n</ul>\n<h3 id=\"8-JavaScript-类数组对象的定义？\"><a href=\"#8-JavaScript-类数组对象的定义？\" class=\"headerlink\" title=\"8. JavaScript 类数组对象的定义？\"></a>8. JavaScript 类数组对象的定义？</h3><p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<p>（1）通过 call 调用数组的 slice 方法来实现转换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.prototype.slice.call(arrayLike);\n复制代码</code></pre>\n\n<p>（2）通过 call 调用数组的 splice 方法来实现转换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.prototype.splice.call(arrayLike, 0);\n复制代码</code></pre>\n\n<p>（3）通过 apply 调用数组的 concat 方法来实现转换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.prototype.concat.apply([], arrayLike);\n复制代码</code></pre>\n\n<p>（4）通过 Array.from 方法来实现转换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.from(arrayLike);\n复制代码</code></pre>\n\n<h3 id=\"9-数组有哪些原生方法？\"><a href=\"#9-数组有哪些原生方法？\" class=\"headerlink\" title=\"9. 数组有哪些原生方法？\"></a>9. 数组有哪些原生方法？</h3><ul>\n<li>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。</li>\n<li>数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。</li>\n<li>数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li>\n<li>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</li>\n<li>数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。</li>\n<li>数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法</li>\n<li>数组归并方法 reduce() 和 reduceRight() 方法</li>\n</ul>\n<h3 id=\"10-Unicode、UTF-8、UTF-16、UTF-32的区别？\"><a href=\"#10-Unicode、UTF-8、UTF-16、UTF-32的区别？\" class=\"headerlink\" title=\"10. Unicode、UTF-8、UTF-16、UTF-32的区别？\"></a>10. <strong>Unicode、UTF-8、UTF-16、UTF-32的区别？</strong></h3><h4 id=\"（1）Unicode\"><a href=\"#（1）Unicode\" class=\"headerlink\" title=\"（1）Unicode\"></a>（1）Unicode</h4><p>在说<code>Unicode</code>之前需要先了解一下<code>ASCII</code>码：ASCII 码（<code>American Standard Code for Information Interchange</code>）称为美国标准信息交换码。</p>\n<ul>\n<li>它是基于拉丁字母的一套电脑编码系统。</li>\n<li>它定义了一个用于代表常见字符的字典。</li>\n<li>它包含了”A-Z”(包含大小写)，数据”0-9” 以及一些常见的符号。</li>\n<li>它是专门为英语而设计的，有128个编码，对其他语言无能为力</li>\n</ul>\n<p><code>ASCII</code>码可以表示的编码有限，要想表示其他语言的编码，还是要使用<code>Unicode</code>来表示，可以说<code>Unicode</code>是<code>ASCII</code> 的超集。</p>\n<p><code>Unicode</code>全称 <code>Unicode Translation Format</code>，又叫做统一码、万国码、单一码。<code>Unicode</code> 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>\n<p><code>Unicode</code>的实现方式（也就是编码方式）有很多种，常见的是<strong>UTF-8</strong>、<strong>UTF-16</strong>、<strong>UTF-32</strong>和<strong>USC-2</strong>。</p>\n<h4 id=\"（2）UTF-8\"><a href=\"#（2）UTF-8\" class=\"headerlink\" title=\"（2）UTF-8\"></a>（2）UTF-8</h4><p><code>UTF-8</code>是使用最广泛的<code>Unicode</code>编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容<code>ASCII</code>码的128个字符。</p>\n<p><strong>注意：</strong> <code>UTF-8</code> 是一种编码方式，<code>Unicode</code>是一个字符集合。</p>\n<p><code>UTF-8</code>的编码规则：</p>\n<ul>\n<li>对于<strong>单字节</strong>的符号，字节的第一位为0，后面的7位为这个字符的<code>Unicode</code>编码，因此对于英文字母，它的<code>Unicode</code>编码和<code>ACSII</code>编码一样。</li>\n<li>对于<strong>n字节</strong>的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的<code>Unicode</code>码 。</li>\n</ul>\n<p>来看一下具体的<code>Unicode</code>编号范围与对应的<code>UTF-8</code>二进制格式 ：</p>\n<table>\n<thead>\n<tr>\n<th>编码范围（编号对应的十进制数）</th>\n<th>二进制格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x00—0x7F （0-127）</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>0x80—0x7FF （128-2047）</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x800—0xFFFF  （2048-65535）</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x10000—0x10FFFF  （65536以上）</td>\n<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody></table>\n<p>那该如何通过具体的<code>Unicode</code>编码，进行具体的<code>UTF-8</code>编码呢？<strong>步骤如下：</strong></p>\n<ul>\n<li>找到该<code>Unicode</code>编码的所在的编号范围，进而找到与之对应的二进制格式</li>\n<li>将<code>Unicode</code>编码转换为二进制数（去掉最高位的0）</li>\n<li>将二进制数从右往左一次填入二进制格式的<code>X</code>中，如果有<code>X</code>未填，就设为0</li>\n</ul>\n<p>来看一个实际的例子： “<strong>马</strong>” 字的<code>Unicode</code>编码是：<code>0x9A6C</code>，整数编号是<code>39532</code> （1）首选确定了该字符在第三个范围内，它的格式是 <code>1110xxxx 10xxxxxx 10xxxxxx</code> （2）39532对应的二进制数为<code>1001 1010 0110 1100</code> （3）将二进制数填入X中，结果是：<code>11101001 10101001 10101100</code></p>\n<h4 id=\"（3）UTF-16\"><a href=\"#（3）UTF-16\" class=\"headerlink\" title=\"（3）UTF-16\"></a>（3）UTF-16</h4><p><strong>1. 平面的概念</strong></p>\n<p>在了解<code>UTF-16</code>之前，先看一下<strong>平面</strong>的概念： <code>Unicode</code>编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放<strong>65536</strong>（216）个字符，这称为一个<strong>平面</strong>，目前总共有17 个平面。</p>\n<p>最前面的一个平面称为<strong>基本平面</strong>，它的码点从<strong>0 — 216-1</strong>，写成16进制就是<code>U+0000 — U+FFFF</code>，那剩下的16个平面就是<strong>辅助平面</strong>，码点范围是 <code>U+10000—U+10FFFF</code>。</p>\n<p><strong>2. UTF-16 概念：</strong></p>\n<p><code>UTF-16</code>也是<code>Unicode</code>编码集的一种编码形式，把<code>Unicode</code>字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。<code>Unicode</code>字符的码位需要1个或者2个16位长的码元来表示，因此<code>UTF-16</code>也是用变长字节表示的。</p>\n<p><strong>3. UTF-16 编码规则：</strong></p>\n<ul>\n<li>编号在 <code>U+0000—U+FFFF</code> 的字符（常用字符集），直接用两个字节表示。</li>\n<li>编号在 <code>U+10000—U+10FFFF</code> 之间的字符，需要用四个字节表示。</li>\n</ul>\n<p><strong>4. 编码识别</strong></p>\n<p>那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？</p>\n<p><code>UTF-16</code> 编码肯定也考虑到了这个问题，在基本平面内，从 <code>U+D800 — U+DFFF</code> 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。</p>\n<p>辅助平面共有 <strong>220</strong> 个字符位，因此表示这些字符至少需要 20 个二进制位。<code>UTF-16</code> 将这 20 个二进制位分成两半，前 10 位映射在 <code>U+D800 — U+DBFF</code>，称为<strong>高位</strong>（H），后 10 位映射在 <code>U+DC00 — U+DFFF</code>，称为<strong>低位</strong>（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。</p>\n<p>因此，当遇到两个字节时，发现它的码点在 <code>U+D800 —U+DBFF</code>之间，就可以知道，它后面的两个字节的码点应该在 <code>U+DC00 — U+DFFF</code> 之间，这四个字节必须放在一起进行解读。</p>\n<p><strong>5. 举例说明</strong></p>\n<p>以 “<strong>𡠀</strong>“ 字为例，它的 <code>Unicode</code> 码点为 <code>0x21800</code>，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：</p>\n<ul>\n<li>首先计算超出部分的结果：<code>0x21800 - 0x10000</code></li>\n<li>将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：<code>0001000110 0000000000</code></li>\n<li>将得到的两个10位二进制数分别对应到两个区间中</li>\n<li><code>U+D800</code> 对应的二进制数为 <code>1101100000000000</code>， 将<code>0001000110</code>填充在它的后10 个二进制位，得到 <code>1101100001000110</code>，转成 16 进制数为 <code>0xD846</code>。同理，低位为 <code>0xDC00</code>，所以这个字的<code>UTF-16</code> 编码为 <code>0xD846 0xDC00</code></li>\n</ul>\n<h4 id=\"（4）-UTF-32\"><a href=\"#（4）-UTF-32\" class=\"headerlink\" title=\"（4） UTF-32\"></a>（4） UTF-32</h4><p><code>UTF-32</code> 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。</p>\n<p>比如“<strong>马</strong>” 字的Unicode编号是：<code>U+9A6C</code>，整数编号是<code>39532</code>，直接转化为二进制：<code>1001 1010 0110 1100</code>，这就是它的UTF-32编码。</p>\n<h4 id=\"（5）总结\"><a href=\"#（5）总结\" class=\"headerlink\" title=\"（5）总结\"></a>（5）总结</h4><p><strong>Unicode、UTF-8、UTF-16、UTF-32有什么区别？</strong></p>\n<ul>\n<li><code>Unicode</code> 是编码字符集（字符集），而<code>UTF-8</code>、<code>UTF-16</code>、<code>UTF-32</code>是字符集编码（编码规则）；</li>\n<li><code>UTF-16</code> 使用变长码元序列的编码方式，相较于定长码元序列的<code>UTF-32</code>算法更复杂，甚至比同样是变长码元序列的<code>UTF-8</code>也更为复杂，因为其引入了独特的<strong>代理对</strong>这样的代理机制；</li>\n<li><code>UTF-8</code>需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而<code>UTF-16</code>不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；</li>\n<li>如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用<code>UTF-8</code>就比<code>UTF-16</code>节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么<code>UTF-16</code>就占优势了，可以节省很多空间；</li>\n</ul>\n<h3 id=\"11-常见的位运算符有哪些？其计算规则是什么？\"><a href=\"#11-常见的位运算符有哪些？其计算规则是什么？\" class=\"headerlink\" title=\"11. 常见的位运算符有哪些？其计算规则是什么？\"></a>11. 常见的位运算符有哪些？其计算规则是什么？</h3><p>现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</p>\n<p>常见的位运算有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>运算规则</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;</code></td>\n<td>与</td>\n<td>两个位都为1时，结果才为1</td>\n<td></td>\n</tr>\n<tr>\n<td>&#96;</td>\n<td>&#96;</td>\n<td>或</td>\n<td>两个位都为0时，结果才为0</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>异或</td>\n<td>两个位相同为0，相异为1</td>\n<td></td>\n</tr>\n<tr>\n<td><code>~</code></td>\n<td>取反</td>\n<td>0变1，1变0</td>\n<td></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>左移</td>\n<td>各二进制位全部左移若干位，高位丢弃，低位补0</td>\n<td></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>右移</td>\n<td>各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"1-按位与运算符（-amp-）\"><a href=\"#1-按位与运算符（-amp-）\" class=\"headerlink\" title=\"1. 按位与运算符（&amp;）\"></a>1. 按位与运算符（&amp;）</h4><p><strong>定义：</strong> 参加运算的两个数据<strong>按二进制位</strong>进行“与”运算。 <strong>运算规则：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &amp; 0 &#x3D; 0  \n0 &amp; 1 &#x3D; 0  \n1 &amp; 0 &#x3D; 0  \n1 &amp; 1 &#x3D; 1\n复制代码</code></pre>\n\n<p>总结：两位同时为1，结果才为1，否则结果为0。 例如：3&amp;5 即：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0000 0011 \n   0000 0101 \n &#x3D; 0000 0001\n复制代码</code></pre>\n\n<p>因此 3&amp;5 的值为1。 注意：负数按补码形式参加按位与运算。</p>\n<p><strong>用途：</strong></p>\n<p><strong>（1）判断奇偶</strong></p>\n<p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用<code>if ((i &amp; 1) == 0)</code>代替<code>if (i % 2 == 0)</code>来判断a是不是偶数。</p>\n<p><strong>（2）清零</strong></p>\n<p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p>\n<h4 id=\"2-按位或运算符（-）\"><a href=\"#2-按位或运算符（-）\" class=\"headerlink\" title=\"2. 按位或运算符（|）\"></a>2. 按位或运算符（|）</h4><p><strong>定义：</strong> 参加运算的两个对象按二进制位进行“或”运算。</p>\n<p><strong>运算规则：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 | 0 &#x3D; 0\n0 | 1 &#x3D; 1  \n1 | 0 &#x3D; 1  \n1 | 1 &#x3D; 1\n复制代码</code></pre>\n\n<p>总结：参加运算的两个对象只要有一个为1，其值为1。 例如：3|5即：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0000 0011\n  0000 0101 \n&#x3D; 0000 0111\n复制代码</code></pre>\n\n<p>因此，3|5的值为7。 注意：负数按补码形式参加按位或运算。</p>\n<h4 id=\"3-异或运算符（-）\"><a href=\"#3-异或运算符（-）\" class=\"headerlink\" title=\"3. 异或运算符（^）\"></a>3. 异或运算符（^）</h4><p><strong>定义：</strong> 参加运算的两个数据按二进制位进行“异或”运算。</p>\n<p><strong>运算规则：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 ^ 0 &#x3D; 0  \n0 ^ 1 &#x3D; 1  \n1 ^ 0 &#x3D; 1  \n1 ^ 1 &#x3D; 0\n复制代码</code></pre>\n\n<p>总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。 例如：3|5即：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0000 0011\n  0000 0101 \n&#x3D; 0000 0110\n复制代码</code></pre>\n\n<p>因此，3^5的值为6。 异或运算的性质:</p>\n<ul>\n<li>交换律：<code>(a^b)^c == a^(b^c)</code></li>\n<li>结合律：<code>(a + b)^c == a^b + b^c</code></li>\n<li>对于任何数x，都有 <code>x^x=0，x^0=x</code></li>\n<li>自反性: <code>a^b^b=a^0=a</code>;</li>\n</ul>\n<h4 id=\"4-取反运算符\"><a href=\"#4-取反运算符\" class=\"headerlink\" title=\"4. 取反运算符 (~)\"></a>4. 取反运算符 (~)</h4><p><strong>定义：</strong> 参加运算的一个数据按二进制进行“取反”运算。</p>\n<p><strong>运算规则：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~ 1 &#x3D; 0~ 0 &#x3D; 1\n复制代码</code></pre>\n\n<p>总结：对一个二进制数按位取反，即将0变1，1变0。 例如：~6 即：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0000 0110&#x3D; 1111 1001\n复制代码</code></pre>\n\n<p>在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就<strong>直接取其补码</strong>，变为十进制：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0000 0110   &#x3D; 1111 1001反码：1000 0110补码：1000 0111\n复制代码</code></pre>\n\n<p>因此，~6的值为-7。</p>\n<h4 id=\"5-左移运算符（-lt-lt-）\"><a href=\"#5-左移运算符（-lt-lt-）\" class=\"headerlink\" title=\"5. 左移运算符（&lt;&lt;）\"></a>5. 左移运算符（&lt;&lt;）</h4><p><strong>定义：</strong> 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。 设 a&#x3D;1010 1110，a &#x3D; a&lt;&lt; 2 将a的二进制位左移2位、右补0，即得a&#x3D;1011 1000。 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p>\n<h4 id=\"6-右移运算符（-gt-gt-）\"><a href=\"#6-右移运算符（-gt-gt-）\" class=\"headerlink\" title=\"6. 右移运算符（&gt;&gt;）\"></a>6. 右移运算符（&gt;&gt;）</h4><p><strong>定义：</strong> 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 例如：a&#x3D;a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。 操作数每右移一位，相当于该数除以2。</p>\n<h4 id=\"7-原码、补码、反码\"><a href=\"#7-原码、补码、反码\" class=\"headerlink\" title=\"7. 原码、补码、反码\"></a>7. 原码、补码、反码</h4><p>上面提到了补码、反码等知识，这里就补充一下。 计算机中的<strong>有符号数</strong>有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。</p>\n<p><strong>（1）原码</strong></p>\n<p>原码就是一个数的二进制数。例如：10的原码为0000 1010</p>\n<p><strong>（2）反码</strong></p>\n<ul>\n<li>正数的反码与原码相同，如：10 反码为 0000 1010</li>\n<li>负数的反码为除符号位，按位取反，即0变1，1变0。</li>\n</ul>\n<p>例如：-10</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">原码：1000 1010\n反码：1111 0101\n复制代码</code></pre>\n\n<p><strong>（3）补码</strong></p>\n<ul>\n<li>正数的补码与原码相同，如：10 补码为 0000 1010</li>\n<li>负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。</li>\n</ul>\n<p>例如：-10</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">原码：1000 1010\n反码：1111 0101\n补码：1111 0110\n复制代码</code></pre>\n\n<h3 id=\"12-为什么函数的-arguments-参数是类数组而不是数组？如何遍历类数组\"><a href=\"#12-为什么函数的-arguments-参数是类数组而不是数组？如何遍历类数组\" class=\"headerlink\" title=\"12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?\"></a>12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?</h3><p><code>arguments</code>是一个对象，它的属性是从 0 开始依次递增的数字，还有<code>callee</code>和<code>length</code>等属性，与数组相似；但是它却没有数组常见的方法属性，如<code>forEach</code>, <code>reduce</code>等，所以叫它们类数组。</p>\n<p>要遍历类数组，有三个方法：</p>\n<p>（1）将数组的方法应用到类数组上，这时候就可以使用<code>call</code>和<code>apply</code>方法，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function foo()&#123; \n  Array.prototype.forEach.call(arguments, a &#x3D;&gt; console.log(a))\n&#125;\n复制代码</code></pre>\n\n<p>（2）使用Array.from方法将类数组转化成数组：‌</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function foo()&#123; \n  const arrArgs &#x3D; Array.from(arguments) \n  arrArgs.forEach(a &#x3D;&gt; console.log(a))\n&#125;\n复制代码</code></pre>\n\n<p>（3）使用展开运算符将类数组转化成数组</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function foo()&#123; \n    const arrArgs &#x3D; [...arguments] \n    arrArgs.forEach(a &#x3D;&gt; console.log(a)) \n&#125;\n复制代码</code></pre>\n\n<h3 id=\"13-什么是-DOM-和-BOM？\"><a href=\"#13-什么是-DOM-和-BOM？\" class=\"headerlink\" title=\"13. 什么是 DOM 和 BOM？\"></a>13. 什么是 DOM 和 BOM？</h3><ul>\n<li>DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。</li>\n<li>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</li>\n</ul>\n<h3 id=\"14-对类数组对象的理解，如何转化为数组\"><a href=\"#14-对类数组对象的理解，如何转化为数组\" class=\"headerlink\" title=\"14. 对类数组对象的理解，如何转化为数组\"></a>14. 对类数组对象的理解，如何转化为数组</h3><p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<ul>\n<li>通过 call 调用数组的 slice 方法来实现转换</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.prototype.slice.call(arrayLike);\n复制代码</code></pre>\n\n<ul>\n<li>通过 call 调用数组的 splice 方法来实现转换</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.prototype.splice.call(arrayLike, 0);\n复制代码</code></pre>\n\n<ul>\n<li>通过 apply 调用数组的 concat 方法来实现转换</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.prototype.concat.apply([], arrayLike);\n复制代码</code></pre>\n\n<ul>\n<li>通过 Array.from 方法来实现转换</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array.from(arrayLike);\n复制代码</code></pre>\n\n<h3 id=\"15-escape、encodeURI、encodeURIComponent-的区别\"><a href=\"#15-escape、encodeURI、encodeURIComponent-的区别\" class=\"headerlink\" title=\"15. escape、encodeURI、encodeURIComponent 的区别\"></a>15. escape、encodeURI、encodeURIComponent 的区别</h3><ul>\n<li>encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。</li>\n<li>encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。</li>\n<li>escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。</li>\n</ul>\n<h3 id=\"16-对AJAX的理解，实现一个AJAX请求\"><a href=\"#16-对AJAX的理解，实现一个AJAX请求\" class=\"headerlink\" title=\"16. 对AJAX的理解，实现一个AJAX请求\"></a>16. 对AJAX的理解，实现一个AJAX请求</h3><p>AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>创建AJAX请求的步骤：</p>\n<ul>\n<li><strong>创建一个 XMLHttpRequest 对象。</strong></li>\n<li>在这个对象上<strong>使用 open 方法创建一个 HTTP 请求</strong>，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>\n<li>在发起请求前，可以为这个对象<strong>添加一些信息和监听函数</strong>。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>\n<li>当对象的属性和监听函数设置完成后，最后调<strong>用 sent 方法来向服务器发起请求</strong>，可以传入参数作为发送的数据体。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const SERVER_URL &#x3D; &quot;&#x2F;server&quot;;\nlet xhr &#x3D; new XMLHttpRequest();\n&#x2F;&#x2F; 创建 Http 请求\nxhr.open(&quot;GET&quot;, url, true);\n&#x2F;&#x2F; 设置状态监听函数\nxhr.onreadystatechange &#x3D; function() &#123;\n  if (this.readyState !&#x3D;&#x3D; 4) return;\n  &#x2F;&#x2F; 当请求成功时\n  if (this.status &#x3D;&#x3D;&#x3D; 200) &#123;\n    handle(this.response);\n  &#125; else &#123;\n    console.error(this.statusText);\n  &#125;\n&#125;;\n&#x2F;&#x2F; 设置请求失败时的监听函数\nxhr.onerror &#x3D; function() &#123;\n  console.error(this.statusText);\n&#125;;\n&#x2F;&#x2F; 设置请求头信息\nxhr.responseType &#x3D; &quot;json&quot;;\nxhr.setRequestHeader(&quot;Accept&quot;, &quot;application&#x2F;json&quot;);\n&#x2F;&#x2F; 发送 Http 请求\nxhr.send(null);\n复制代码</code></pre>\n\n<p>使用Promise封装AJAX：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; promise 封装实现：\nfunction getJSON(url) &#123;\n  &#x2F;&#x2F; 创建一个 promise 对象\n  let promise &#x3D; new Promise(function(resolve, reject) &#123;\n    let xhr &#x3D; new XMLHttpRequest();\n    &#x2F;&#x2F; 新建一个 http 请求\n    xhr.open(&quot;GET&quot;, url, true);\n    &#x2F;&#x2F; 设置状态的监听函数\n    xhr.onreadystatechange &#x3D; function() &#123;\n      if (this.readyState !&#x3D;&#x3D; 4) return;\n      &#x2F;&#x2F; 当请求成功或失败时，改变 promise 的状态\n      if (this.status &#x3D;&#x3D;&#x3D; 200) &#123;\n        resolve(this.response);\n      &#125; else &#123;\n        reject(new Error(this.statusText));\n      &#125;\n    &#125;;\n    &#x2F;&#x2F; 设置错误监听函数\n    xhr.onerror &#x3D; function() &#123;\n      reject(new Error(this.statusText));\n    &#125;;\n    &#x2F;&#x2F; 设置响应的数据类型\n    xhr.responseType &#x3D; &quot;json&quot;;\n    &#x2F;&#x2F; 设置请求头信息\n    xhr.setRequestHeader(&quot;Accept&quot;, &quot;application&#x2F;json&quot;);\n    &#x2F;&#x2F; 发送 http 请求\n    xhr.send(null);\n  &#125;);\n  return promise;\n&#125;\n复制代码</code></pre>\n\n<h3 id=\"17-JavaScript为什么要进行变量提升，它导致了什么问题？\"><a href=\"#17-JavaScript为什么要进行变量提升，它导致了什么问题？\" class=\"headerlink\" title=\"17. JavaScript为什么要进行变量提升，它导致了什么问题？\"></a>17. JavaScript为什么要进行变量提升，它导致了什么问题？</h3><p>变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。</p>\n<p>造成变量声明提升的<strong>本质原因</strong>是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。</p>\n<p>首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。</p>\n<ul>\n<li><p><strong>在解析阶段</strong>，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，this，arguments</li>\n</ul>\n</li>\n<li><p><strong>在执行阶段</strong>，就是按照代码的顺序依次执行。</p>\n</li>\n</ul>\n<p>那为什么会进行变量提升呢？主要有以下两个原因：</p>\n<ul>\n<li>提高性能</li>\n<li>容错性更好</li>\n</ul>\n<p><strong>（1）提高性能</strong> 在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。</p>\n<p>在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</p>\n<p><strong>（2）容错性更好</strong></p>\n<p>变量提升可以在一定程度上提高JS的容错性，看下面的代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a &#x3D; 1;var a;console.log(a);\n复制代码</code></pre>\n\n<p>如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</p>\n<p>虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</li>\n<li>声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行</li>\n</ul>\n<p>变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var tmp &#x3D; new Date();\n\nfunction fn()&#123;\n\tconsole.log(tmp);\n\tif(false)&#123;\n\t\tvar tmp &#x3D; &#39;hello world&#39;;\n\t&#125;\n&#125;\n\nfn();  &#x2F;&#x2F; undefined\n复制代码</code></pre>\n\n<p>在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var tmp &#x3D; &#39;hello world&#39;;\n\nfor (var i &#x3D; 0; i &lt; tmp.length; i++) &#123;\n\tconsole.log(tmp[i]);\n&#125;\n\nconsole.log(i); &#x2F;&#x2F; 11\n复制代码</code></pre>\n\n<p>由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。</p>\n<h3 id=\"18-什么是尾调用，使用尾调用有什么好处？\"><a href=\"#18-什么是尾调用，使用尾调用有什么好处？\" class=\"headerlink\" title=\"18. 什么是尾调用，使用尾调用有什么好处？\"></a>18. 什么是尾调用，使用尾调用有什么好处？</h3><p>尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>\n<h3 id=\"19-ES6模块与CommonJS模块有什么异同？\"><a href=\"#19-ES6模块与CommonJS模块有什么异同？\" class=\"headerlink\" title=\"19. ES6模块与CommonJS模块有什么异同？\"></a>19. <strong>ES6</strong>模块与<strong>CommonJS</strong>模块有什么异同？</h3><p>ES6 Module和CommonJS模块的区别：</p>\n<ul>\n<li>CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；</li>\n<li>import的接⼝是read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。</li>\n</ul>\n<p>ES6 Module和CommonJS模块的共同点：</p>\n<ul>\n<li>CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。</li>\n</ul>\n<h3 id=\"20-常见的DOM操作有哪些\"><a href=\"#20-常见的DOM操作有哪些\" class=\"headerlink\" title=\"20. 常见的DOM操作有哪些\"></a>20. 常见的DOM操作有哪些</h3><h4 id=\"1）DOM-节点的获取\"><a href=\"#1）DOM-节点的获取\" class=\"headerlink\" title=\"1）DOM 节点的获取\"></a>1）DOM 节点的获取</h4><p>DOM 节点的获取的API及使用：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">getElementById &#x2F;&#x2F; 按照 id 查询\ngetElementsByTagName &#x2F;&#x2F; 按照标签名查询\ngetElementsByClassName &#x2F;&#x2F; 按照类名查询\nquerySelectorAll &#x2F;&#x2F; 按照 css 选择器查询\n\n&#x2F;&#x2F; 按照 id 查询\nvar imooc &#x3D; document.getElementById(&#39;imooc&#39;) &#x2F;&#x2F; 查询到 id 为 imooc 的元素\n&#x2F;&#x2F; 按照标签名查询\nvar pList &#x3D; document.getElementsByTagName(&#39;p&#39;)  &#x2F;&#x2F; 查询到标签为 p 的集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n&#x2F;&#x2F; 按照类名查询\nvar moocList &#x3D; document.getElementsByClassName(&#39;mooc&#39;) &#x2F;&#x2F; 查询到类名为 mooc 的集合\n&#x2F;&#x2F; 按照 css 选择器查询\nvar pList &#x3D; document.querySelectorAll(&#39;.mooc&#39;) &#x2F;&#x2F; 查询到类名为 mooc 的集合\n复制代码</code></pre>\n\n<h4 id=\"2）DOM-节点的创建\"><a href=\"#2）DOM-节点的创建\" class=\"headerlink\" title=\"2）DOM 节点的创建\"></a>2）DOM 节点的创建</h4><p><strong>创建一个新节点，并把它添加到指定节点的后面。</strong> 已知的 HTML 结构如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;DEMO&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;container&quot;&gt; \n      &lt;h1 id&#x3D;&quot;title&quot;&gt;我是标题&lt;&#x2F;h1&gt;\n    &lt;&#x2F;div&gt;   \n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n复制代码</code></pre>\n\n<p>要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 首先获取父节点\nvar container &#x3D; document.getElementById(&#39;container&#39;)\n&#x2F;&#x2F; 创建新节点\nvar targetSpan &#x3D; document.createElement(&#39;span&#39;)\n&#x2F;&#x2F; 设置 span 节点的内容\ntargetSpan.innerHTML &#x3D; &#39;hello world&#39;\n&#x2F;&#x2F; 把新创建的元素塞进父节点里去\ncontainer.appendChild(targetSpan)\n复制代码</code></pre>\n\n<h4 id=\"3）DOM-节点的删除\"><a href=\"#3）DOM-节点的删除\" class=\"headerlink\" title=\"3）DOM 节点的删除\"></a>3）DOM 节点的删除</h4><p><strong>删除指定的 DOM 节点，</strong> 已知的 HTML 结构如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;DEMO&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;container&quot;&gt; \n      &lt;h1 id&#x3D;&quot;title&quot;&gt;我是标题&lt;&#x2F;h1&gt;\n    &lt;&#x2F;div&gt;   \n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n复制代码</code></pre>\n\n<p>需要删除 id 为 title 的元素，做法是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 获取目标元素的父元素\nvar container &#x3D; document.getElementById(&#39;container&#39;)\n&#x2F;&#x2F; 获取目标元素\nvar targetNode &#x3D; document.getElementById(&#39;title&#39;)\n&#x2F;&#x2F; 删除目标元素\ncontainer.removeChild(targetNode)\n复制代码</code></pre>\n\n<p>或者通过子节点数组来完成删除：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 获取目标元素的父元素var container &#x3D; document.getElementById(&#39;container&#39;)&#x2F;&#x2F; 获取目标元素var targetNode &#x3D; container.childNodes[1]&#x2F;&#x2F; 删除目标元素container.removeChild(targetNode)\n复制代码</code></pre>\n\n<h4 id=\"4）修改-DOM-元素\"><a href=\"#4）修改-DOM-元素\" class=\"headerlink\" title=\"4）修改 DOM 元素\"></a>4）修改 DOM 元素</h4><p>修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。</p>\n<p><strong>将指定的两个 DOM 元素交换位置，</strong> 已知的 HTML 结构如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;DEMO&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;container&quot;&gt; \n      &lt;h1 id&#x3D;&quot;title&quot;&gt;我是标题&lt;&#x2F;h1&gt;\n      &lt;p id&#x3D;&quot;content&quot;&gt;我是内容&lt;&#x2F;p&gt;\n    &lt;&#x2F;div&gt;   \n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n复制代码</code></pre>\n\n<p>现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 获取父元素\nvar container &#x3D; document.getElementById(&#39;container&#39;)   \n \n&#x2F;&#x2F; 获取两个需要被交换的元素\nvar title &#x3D; document.getElementById(&#39;title&#39;)\nvar content &#x3D; document.getElementById(&#39;content&#39;)\n&#x2F;&#x2F; 交换两个元素，把 content 置于 title 前面\ncontainer.insertBefore(content, title)\n复制代码</code></pre>\n\n<h3 id=\"21-use-strict是什么意思-使用它区别是什么？\"><a href=\"#21-use-strict是什么意思-使用它区别是什么？\" class=\"headerlink\" title=\"21. use strict是什么意思 ? 使用它区别是什么？\"></a>21. use strict是什么意思 ? 使用它区别是什么？</h3><p>use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：</p>\n<ul>\n<li>消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;</li>\n<li>消除代码运行的不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>禁止使用 with 语句。</li>\n<li>禁止 this 关键字指向全局对象。</li>\n<li>对象不能有重名的属性。</li>\n</ul>\n<h3 id=\"22-如何判断一个对象是否属于某个类？\"><a href=\"#22-如何判断一个对象是否属于某个类？\" class=\"headerlink\" title=\"22. 如何判断一个对象是否属于某个类？\"></a>22. 如何判断一个对象是否属于某个类？</h3><ul>\n<li>第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</li>\n<li>第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。</li>\n<li>第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。</li>\n</ul>\n<h3 id=\"23-强类型语言和弱类型语言的区别\"><a href=\"#23-强类型语言和弱类型语言的区别\" class=\"headerlink\" title=\"23. 强类型语言和弱类型语言的区别\"></a>23. 强类型语言和弱类型语言的区别</h3><ul>\n<li><strong>强类型语言</strong>：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。</li>\n<li><strong>弱类型语言</strong>：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串’12’和整数3进行连接得到字符串’123’，在相加的时候会进行强制类型转换。</li>\n</ul>\n<p>两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。</p>\n<h3 id=\"24-解释性语言和编译型语言的区别\"><a href=\"#24-解释性语言和编译型语言的区别\" class=\"headerlink\" title=\"24. 解释性语言和编译型语言的区别\"></a>24. 解释性语言和编译型语言的区别</h3><p>（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下</p>\n<ul>\n<li>解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；</li>\n<li>只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；</li>\n<li>JavaScript、Python等属于解释型语言。</li>\n</ul>\n<p>（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：</p>\n<ul>\n<li>一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；</li>\n<li>与特定平台相关，一般无法移植到其他平台；</li>\n<li>C、C++等属于编译型语言。</li>\n</ul>\n<p><strong>两者主要区别在于：</strong> 前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。</p>\n<h3 id=\"25-for…in和for…of的区别\"><a href=\"#25-for…in和for…of的区别\" class=\"headerlink\" title=\"25. for…in和for…of的区别\"></a>25. for…in和for…of的区别</h3><p>for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下</p>\n<ul>\n<li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li>\n<li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li>\n<li>对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</li>\n</ul>\n<p><strong>总结：</strong> for…in 循环主要是为了遍历对象而生，不适用于遍历数组；for…of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p>\n<h3 id=\"26-如何使用for…of遍历对象\"><a href=\"#26-如何使用for…of遍历对象\" class=\"headerlink\" title=\"26. 如何使用for…of遍历对象\"></a>26. 如何使用for…of遍历对象</h3><p>for…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。</p>\n<p>如果需要遍历的对象是类数组对象，用Array.from转成数组即可。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var obj &#x3D; &#123;\n    0:&#39;one&#39;,\n    1:&#39;two&#39;,\n    length: 2\n&#125;;\nobj &#x3D; Array.from(obj);\nfor(var k of obj)&#123;\n    console.log(k)\n&#125;\n复制代码</code></pre>\n\n<p>如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;方法一：\nvar obj &#x3D; &#123;\n    a:1,\n    b:2,\n    c:3\n&#125;;\n\nobj[Symbol.iterator] &#x3D; function()&#123;\n\tvar keys &#x3D; Object.keys(this);\n\tvar count &#x3D; 0;\n\treturn &#123;\n\t\tnext()&#123;\n\t\t\tif(count&lt;keys.length)&#123;\n\t\t\t\treturn &#123;value: obj[keys[count++]],done:false&#125;;\n\t\t\t&#125;else&#123;\n\t\t\t\treturn &#123;value:undefined,done:true&#125;;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;;\n\nfor(var k of obj)&#123;\n\tconsole.log(k);\n&#125;\n\n\n&#x2F;&#x2F; 方法二\nvar obj &#x3D; &#123;\n    a:1,\n    b:2,\n    c:3\n&#125;;\nobj[Symbol.iterator] &#x3D; function*()&#123;\n    var keys &#x3D; Object.keys(obj);\n    for(var k of keys)&#123;\n        yield [k,obj[k]]\n    &#125;\n&#125;;\n\nfor(var [k,v] of obj)&#123;\n    console.log(k,v);\n&#125;\n\n复制代码</code></pre>\n\n<h3 id=\"27-ajax、axios、fetch的区别\"><a href=\"#27-ajax、axios、fetch的区别\" class=\"headerlink\" title=\"27. ajax、axios、fetch的区别\"></a>27. ajax、axios、fetch的区别</h3><p><strong>（1）AJAX</strong> Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：</p>\n<ul>\n<li>本身是针对MVC编程，不符合前端MVVM的浪潮</li>\n<li>基于原生XHR开发，XHR本身的架构不清晰</li>\n<li>不符合关注分离（Separation of Concerns）的原则</li>\n<li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li>\n</ul>\n<p><strong>（2）Fetch</strong> fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。<strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</p>\n<p>fetch的优点：</p>\n<ul>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async&#x2F;await</li>\n<li>更加底层，提供的API丰富（request, response）</li>\n<li>脱离了XHR，是ES规范里新的实现方式</li>\n</ul>\n<p>fetch的缺点：</p>\n<ul>\n<li>fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>\n<li>fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})</li>\n<li>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li>\n<li>fetch没有办法原生监测请求的进度，而XHR可以</li>\n</ul>\n<p><strong>（3）Axios</strong> Axios 是一种基于Promise封装的HTTP客户端，其特点如下：</p>\n<ul>\n<li>浏览器端发起XMLHttpRequests请求</li>\n<li>node端发起http请求</li>\n<li>支持Promise API</li>\n<li>监听请求和返回</li>\n<li>对请求和返回进行转化</li>\n<li>取消请求</li>\n<li>自动转换json数据</li>\n<li>客户端支持抵御XSRF攻击</li>\n</ul>\n<h3 id=\"28-数组的遍历方法有哪些\"><a href=\"#28-数组的遍历方法有哪些\" class=\"headerlink\" title=\"28. 数组的遍历方法有哪些\"></a>28. 数组的遍历方法有哪些</h3><table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>是否改变原数组</strong></th>\n<th><strong>特点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>forEach()</td>\n<td>否</td>\n<td>数组方法，不改变原数组，没有返回值</td>\n</tr>\n<tr>\n<td>map()</td>\n<td>否</td>\n<td>数组方法，不改变原数组，有返回值，可链式调用</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td>否</td>\n<td>数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用</td>\n</tr>\n<tr>\n<td>for…of</td>\n<td>否</td>\n<td>for…of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环</td>\n</tr>\n<tr>\n<td>every() 和 some()</td>\n<td>否</td>\n<td>数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</td>\n</tr>\n<tr>\n<td>find() 和 findIndex()</td>\n<td>否</td>\n<td>数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td>\n</tr>\n<tr>\n<td>reduce() 和 reduceRight()</td>\n<td>否</td>\n<td>数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作</td>\n</tr>\n</tbody></table>\n<p>遍历方法的详细解释：<a href=\"https://link.juejin.cn/?target=https://cuggz.blog.csdn.net/article/details/107649549\" title=\"https://cuggz.blog.csdn.net/article/details/107649549\">《细数JavaScript中那些遍历和循环》</a></p>\n<h3 id=\"29-forEach和map方法有什么区别\"><a href=\"#29-forEach和map方法有什么区别\" class=\"headerlink\" title=\"29. forEach和map方法有什么区别\"></a>29. forEach和map方法有什么区别</h3><p>这方法都是用来遍历数组的，两者区别如下：</p>\n<ul>\n<li>forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；</li>\n<li>map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；</li>\n</ul>\n<h2 id=\"四、原型与原型链\"><a href=\"#四、原型与原型链\" class=\"headerlink\" title=\"四、原型与原型链\"></a>四、原型与原型链</h2><h3 id=\"1-对原型、原型链的理解\"><a href=\"#1-对原型、原型链的理解\" class=\"headerlink\" title=\"1. 对原型、原型链的理解\"></a>1. 对原型、原型链的理解</h3><p>在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 <strong>proto</strong> 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。</p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。</p>\n<p><strong>特点：</strong> JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fec3a0dade6f4118826b947a0b1a5931~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<h3 id=\"2-原型修改、重写\"><a href=\"#2-原型修改、重写\" class=\"headerlink\" title=\"2. 原型修改、重写\"></a>2. 原型修改、重写</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">function Person(name) &#123;\n    this.name &#x3D; name\n&#125;\n&#x2F;&#x2F; 修改原型\nPerson.prototype.getName &#x3D; function() &#123;&#125;\nvar p &#x3D; new Person(&#39;hello&#39;)\nconsole.log(p.__proto__ &#x3D;&#x3D;&#x3D; Person.prototype) &#x2F;&#x2F; true\nconsole.log(p.__proto__ &#x3D;&#x3D;&#x3D; p.constructor.prototype) &#x2F;&#x2F; true\n&#x2F;&#x2F; 重写原型\nPerson.prototype &#x3D; &#123;\n    getName: function() &#123;&#125;\n&#125;\nvar p &#x3D; new Person(&#39;hello&#39;)\nconsole.log(p.__proto__ &#x3D;&#x3D;&#x3D; Person.prototype)        &#x2F;&#x2F; true\nconsole.log(p.__proto__ &#x3D;&#x3D;&#x3D; p.constructor.prototype) &#x2F;&#x2F; false\n复制代码</code></pre>\n\n<p>可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候<code>p.constructor === Object</code> ，而不是<code>p.constructor === Person</code>。要想成立，就要用constructor指回来：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Person.prototype &#x3D; &#123;\n    getName: function() &#123;&#125;\n&#125;\nvar p &#x3D; new Person(&#39;hello&#39;)\np.constructor &#x3D; Person\nconsole.log(p.__proto__ &#x3D;&#x3D;&#x3D; Person.prototype)        &#x2F;&#x2F; true\nconsole.log(p.__proto__ &#x3D;&#x3D;&#x3D; p.constructor.prototype) &#x2F;&#x2F; true\n\n复制代码</code></pre>\n\n<h3 id=\"3-原型链指向\"><a href=\"#3-原型链指向\" class=\"headerlink\" title=\"3. 原型链指向\"></a>3. 原型链指向</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">p.__proto__  &#x2F;&#x2F; Person.prototype\nPerson.prototype.__proto__  &#x2F;&#x2F; Object.prototype\np.__proto__.__proto__ &#x2F;&#x2F;Object.prototype\np.__proto__.constructor.prototype.__proto__ &#x2F;&#x2F; Object.prototype\nPerson.prototype.constructor.prototype.__proto__ &#x2F;&#x2F; Object.prototype\np1.__proto__.constructor &#x2F;&#x2F; Person\nPerson.prototype.constructor  &#x2F;&#x2F; Person\n复制代码</code></pre>\n\n<h3 id=\"4-原型链的终点是什么？如何打印出原型链的终点？\"><a href=\"#4-原型链的终点是什么？如何打印出原型链的终点？\" class=\"headerlink\" title=\"4. 原型链的终点是什么？如何打印出原型链的终点？\"></a>4. 原型链的终点是什么？如何打印出原型链的终点？</h3><p>由于<code>Object</code>是构造函数，原型链终点是<code>Object.prototype.__proto__</code>，而<code>Object.prototype.__proto__=== null // true</code>，所以，原型链的终点是<code>null</code>。原型链上的所有原型都是对象，所有的对象最终都是由<code>Object</code>构造的，而<code>Object.prototype</code>的下一级是<code>Object.prototype.__proto__</code>。 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/686639a4cf66400d81e00a260b9e0050~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<h3 id=\"5-如何获得对象非原型链上的属性？\"><a href=\"#5-如何获得对象非原型链上的属性？\" class=\"headerlink\" title=\"5. 如何获得对象非原型链上的属性？\"></a>5. 如何获得对象非原型链上的属性？</h3><p>使用后<code>hasOwnProperty()</code>方法来判断属性是否属于原型链的属性：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function iterate(obj)&#123;\n   var res&#x3D;[];\n   for(var key in obj)&#123;\n        if(obj.hasOwnProperty(key))\n           res.push(key+&#39;: &#39;+obj[key]);\n   &#125;\n   return res;\n&#125; \n复制代码</code></pre>\n\n<h2 id=\"五、执行上下文-x2F-作用域链-x2F-闭包\"><a href=\"#五、执行上下文-x2F-作用域链-x2F-闭包\" class=\"headerlink\" title=\"五、执行上下文&#x2F;作用域链&#x2F;闭包\"></a>五、执行上下文&#x2F;作用域链&#x2F;闭包</h2><h3 id=\"1-对闭包的理解\"><a href=\"#1-对闭包的理解\" class=\"headerlink\" title=\"1. 对闭包的理解\"></a>1. 对闭包的理解</h3><p><strong>闭包是指有权访问另一个函数作用域中变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p>\n<p>闭包有两个常用的用途；</p>\n<ul>\n<li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li>\n<li>闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li>\n</ul>\n<p>比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function A() &#123;\n  let a &#x3D; 1\n  window.B &#x3D; function () &#123;\n      console.log(a)\n  &#125;\n&#125;\nA()\nB() &#x2F;&#x2F; 1\n复制代码</code></pre>\n\n<p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for (var i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;\n  setTimeout(function timer() &#123;\n    console.log(i)\n  &#125;, i * 1000)\n&#125;\n复制代码</code></pre>\n\n<p>首先因为 <code>setTimeout</code> 是个异步函数，所以会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。解决办法有三种：</p>\n<ul>\n<li>第一种是使用闭包的方式</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for (var i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;  ;(function(j) &#123;    setTimeout(function timer() &#123;      console.log(j)    &#125;, j * 1000)  &#125;)(i)&#125;\n复制代码</code></pre>\n\n<p>在上述代码中，首先使用了立即执行函数将 <code>i</code> 传入函数内部，这个时候值就被固定在了参数 <code>j</code> 上面不会改变，当下次执行 <code>timer</code> 这个闭包的时候，就可以使用外部函数的变量 <code>j</code>，从而达到目的。</p>\n<ul>\n<li>第二种就是使用 <code>setTimeout</code> 的第三个参数，这个参数会被当成 <code>timer</code> 函数的参数传入。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for (var i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;\n  setTimeout(\n    function timer(j) &#123;\n      console.log(j)\n    &#125;,\n    i * 1000,\n    i\n  )\n&#125;\n复制代码</code></pre>\n\n<ul>\n<li>第三种就是使用 <code>let</code> 定义 <code>i</code> 了来解决问题了，这个也是最为推荐的方式</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for (let i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;\n  setTimeout(function timer() &#123;\n    console.log(i)\n  &#125;, i * 1000)\n&#125;\n复制代码</code></pre>\n\n<h3 id=\"2-对作用域、作用域链的理解\"><a href=\"#2-对作用域、作用域链的理解\" class=\"headerlink\" title=\"2. 对作用域、作用域链的理解\"></a>2. 对作用域、作用域链的理解</h3><h5 id=\"1）全局作用域和函数作用域\"><a href=\"#1）全局作用域和函数作用域\" class=\"headerlink\" title=\"1）全局作用域和函数作用域\"></a>1）全局作用域和函数作用域</h5><p>（1）全局作用域</p>\n<ul>\n<li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li>\n<li>所有未定义直接赋值的变量自动声明为全局作用域</li>\n<li>所有window对象的属性拥有全局作用域</li>\n<li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li>\n</ul>\n<p>（2）函数作用域</p>\n<ul>\n<li>函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到</li>\n<li>作用域是分层的，内层作用域可以访问外层作用域，反之不行</li>\n</ul>\n<h5 id=\"2）块级作用域\"><a href=\"#2）块级作用域\" class=\"headerlink\" title=\"2）块级作用域\"></a>2）块级作用域</h5><ul>\n<li>使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由<code>&#123; &#125;</code>包裹的代码片段）</li>\n<li>let和const声明的变量不会有变量提升，也不可以重复声明</li>\n<li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</li>\n</ul>\n<p><strong>作用域链：</strong> 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。</p>\n<p>作用域链的作用是<strong>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</strong></p>\n<p>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p>\n<p>当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。</p>\n<h3 id=\"3-对执行上下文的理解\"><a href=\"#3-对执行上下文的理解\" class=\"headerlink\" title=\"3. 对执行上下文的理解\"></a>3. 对执行上下文的理解</h3><h5 id=\"1-执行上下文类型\"><a href=\"#1-执行上下文类型\" class=\"headerlink\" title=\"1. 执行上下文类型\"></a>1. 执行上下文类型</h5><p><strong>（1）全局执行上下文</strong></p>\n<p>任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。</p>\n<p><strong>（2）函数执行上下文</strong></p>\n<p>当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</p>\n<p><strong>（3）</strong> <code>eval</code><strong>函数执行上下文</strong></p>\n<p>执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。</p>\n<h5 id=\"2-执行上下文栈\"><a href=\"#2-执行上下文栈\" class=\"headerlink\" title=\"2. 执行上下文栈\"></a>2. 执行上下文栈</h5><ul>\n<li>JavaScript引擎使用执行上下文栈来管理执行上下文</li>\n<li>当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let a &#x3D; &#39;Hello World!&#39;;\nfunction first() &#123;\n  console.log(&#39;Inside first function&#39;);\n  second();\n  console.log(&#39;Again inside first function&#39;);\n&#125;\nfunction second() &#123;\n  console.log(&#39;Inside second function&#39;);\n&#125;\nfirst();\n&#x2F;&#x2F;执行顺序\n&#x2F;&#x2F;先执行second(),在执行first()\n复制代码</code></pre>\n\n<h5 id=\"3-创建执行上下文\"><a href=\"#3-创建执行上下文\" class=\"headerlink\" title=\"3. 创建执行上下文\"></a>3. 创建执行上下文</h5><p>创建执行上下文有两个阶段：<strong>创建阶段</strong>和<strong>执行阶段</strong></p>\n<p><strong>1）创建阶段</strong></p>\n<p>（1）this绑定</p>\n<ul>\n<li>在全局执行上下文中，this指向全局对象（window对象）</li>\n<li>在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li>\n</ul>\n<p>（2）创建词法环境组件</p>\n<ul>\n<li>词法环境是一种有<strong>标识符——变量映射</strong>的数据结构，标识符是指变量&#x2F;函数名，变量是对实际对象或原始数据的引用。</li>\n<li>词法环境的内部有两个组件：<strong>加粗样式</strong>：环境记录器:用来储存变量个函数声明的实际位置<strong>外部环境的引用</strong>：可以访问父级作用域</li>\n</ul>\n<p>（3）创建变量环境组件</p>\n<ul>\n<li>变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li>\n</ul>\n<p><strong>2）执行阶段</strong> 此阶段会完成对变量的分配，最后执行完代码。</p>\n<p><strong>简单来说执行上下文就是指：</strong></p>\n<p>在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</p>\n<p>在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，<code>this</code>，<code>arguments</code></li>\n</ul>\n","text":" 一、数据类型1. JavaScript有哪些数据类型，它们的区别？JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。 其中 Symbol 和 BigInt 是ES6 ...","link":"","photos":[],"count_time":{"symbolsCount":"57k","symbolsTime":"51 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">一、数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-JavaScript%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%AE%83%E4%BB%AC%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">1. JavaScript有哪些数据类型，它们的区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">2. 数据类型检测的方式有哪些</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">3. 判断数组的方式有哪些</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-null%E5%92%8Cundefined%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4. null和undefined区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-typeof-null-%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">5. typeof null 的结果是什么，为什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-intanceof-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">6. intanceof 操作符的实现原理及实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%B8%BA%E4%BB%80%E4%B9%880-1-0-2-x3D-x3D-0-3%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%A9%E5%85%B6%E7%9B%B8%E7%AD%89\"><span class=\"toc-text\">7. 为什么0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%AE%89%E5%85%A8%E7%9A%84-undefined-%E5%80%BC%EF%BC%9F\"><span class=\"toc-text\">8. 如何获取安全的 undefined 值？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-typeof-NaN-%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">9. typeof NaN 的结果是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-isNaN-%E5%92%8C-Number-isNaN-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">10. isNaN 和 Number.isNaN 函数的区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E5%85%B6%E4%BB%96%E5%80%BC%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99%EF%BC%9F\"><span class=\"toc-text\">12. 其他值到字符串的转换规则？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E5%85%B6%E4%BB%96%E5%80%BC%E5%88%B0%E6%95%B0%E5%AD%97%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99%EF%BC%9F\"><span class=\"toc-text\">13. 其他值到数字值的转换规则？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E5%85%B6%E4%BB%96%E5%80%BC%E5%88%B0%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99%EF%BC%9F\"><span class=\"toc-text\">14. 其他值到布尔类型的值的转换规则？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E5%92%8C-amp-amp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%9F\"><span class=\"toc-text\">15. || 和 &amp;&amp; 操作符的返回值？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-Object-is-%E4%B8%8E%E6%AF%94%E8%BE%83%E6%93%8D%E4%BD%9C%E7%AC%A6-%E2%80%9C-x3D-x3D-x3D-%E2%80%9D%E3%80%81%E2%80%9C-x3D-x3D-%E2%80%9D-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">16. Object.is() 与比较操作符 “&#x3D;&#x3D;&#x3D;”、“&#x3D;&#x3D;” 的区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-%E4%BB%80%E4%B9%88%E6%98%AF-JavaScript-%E4%B8%AD%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">17. 什么是 JavaScript 中的包装类型？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-JavaScript-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9F\"><span class=\"toc-text\">18. JavaScript 中如何进行隐式类型转换？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19-%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5%EF%BC%9F\"><span class=\"toc-text\">19. + 操作符什么时候用于字符串的拼接？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89BigInt%E7%9A%84%E6%8F%90%E6%A1%88%EF%BC%9F\"><span class=\"toc-text\">20. 为什么会有BigInt的提案？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-object-assign%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E6%B3%95%E6%98%AF%E6%B7%B1%E6%8B%B7%E8%B4%9D%E8%BF%98%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%8C%E4%B8%A4%E8%80%85%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81ES6\"><span class=\"toc-text\">二、ES6</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1. let、const、var的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-const%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E5%90%97\"><span class=\"toc-text\">2. const对象的属性可以修改吗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%A6%82%E6%9E%9Cnew%E4%B8%80%E4%B8%AA%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7\"><span class=\"toc-text\">3. 如果new一个箭头函数的会怎么样</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4. 箭头函数与普通函数的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91%E5%93%AA%E2%BE%A5%EF%BC%9F\"><span class=\"toc-text\">5. 箭头函数的this指向哪⾥？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">6. 扩展运算符的作用及使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E5%AF%B9%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E8%A7%A3%E6%9E%84%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">8. 对对象与数组的解构的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96%E9%AB%98%E5%BA%A6%E5%B5%8C%E5%A5%97%E7%9A%84%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E6%8C%87%E5%AE%9A%E5%B1%9E%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\">9. 如何提取高度嵌套的对象里的指定属性？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E5%AF%B9-rest-%E5%8F%82%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">10. 对 rest 参数的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-ES6%E4%B8%AD%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86\"><span class=\"toc-text\">11. ES6中模板语法与字符串处理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81JavaScript%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">三、JavaScript基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-new%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1. new操作符的实现原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-map%E5%92%8CObject%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">2. map和Object的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-map%E5%92%8CweakMap%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3. map和weakMap的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-JavaScript%E6%9C%89%E5%93%AA%E4%BA%9B%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4. JavaScript有哪些内置对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">5. 常用的正则表达式有哪些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%AF%B9JSON%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">6. 对JSON的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-JavaScript%E8%84%9A%E6%9C%AC%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">7. JavaScript脚本延迟加载的方式有哪些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-JavaScript-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%9F\"><span class=\"toc-text\">8. JavaScript 类数组对象的定义？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E6%95%B0%E7%BB%84%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">9. 数组有哪些原生方法？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-Unicode%E3%80%81UTF-8%E3%80%81UTF-16%E3%80%81UTF-32%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">10. Unicode、UTF-8、UTF-16、UTF-32的区别？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89Unicode\"><span class=\"toc-text\">（1）Unicode</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89UTF-8\"><span class=\"toc-text\">（2）UTF-8</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89UTF-16\"><span class=\"toc-text\">（3）UTF-16</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89-UTF-32\"><span class=\"toc-text\">（4） UTF-32</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%885%EF%BC%89%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">（5）总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%85%B6%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">11. 常见的位运算符有哪些？其计算规则是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8C%89%E4%BD%8D%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-amp-%EF%BC%89\"><span class=\"toc-text\">1. 按位与运算符（&amp;）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%8C%89%E4%BD%8D%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%EF%BC%89\"><span class=\"toc-text\">2. 按位或运算符（|）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%EF%BC%89\"><span class=\"toc-text\">3. 异或运算符（^）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%8F%96%E5%8F%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">4. 取反运算符 (~)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E5%B7%A6%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-lt-lt-%EF%BC%89\"><span class=\"toc-text\">5. 左移运算符（&lt;&lt;）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E5%8F%B3%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-gt-gt-%EF%BC%89\"><span class=\"toc-text\">6. 右移运算符（&gt;&gt;）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E5%8E%9F%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81\"><span class=\"toc-text\">7. 原码、补码、反码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BD%E6%95%B0%E7%9A%84-arguments-%E5%8F%82%E6%95%B0%E6%98%AF%E7%B1%BB%E6%95%B0%E7%BB%84%E8%80%8C%E4%B8%8D%E6%98%AF%E6%95%B0%E7%BB%84%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86%E7%B1%BB%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E4%BB%80%E4%B9%88%E6%98%AF-DOM-%E5%92%8C-BOM%EF%BC%9F\"><span class=\"toc-text\">13. 什么是 DOM 和 BOM？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E5%AF%B9%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%A6%82%E4%BD%95%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">14. 对类数组对象的理解，如何转化为数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-escape%E3%80%81encodeURI%E3%80%81encodeURIComponent-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">15. escape、encodeURI、encodeURIComponent 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-%E5%AF%B9AJAX%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAAJAX%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">16. 对AJAX的理解，实现一个AJAX请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-JavaScript%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%EF%BC%8C%E5%AE%83%E5%AF%BC%E8%87%B4%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\">17. JavaScript为什么要进行变量提升，它导致了什么问题？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-%E4%BB%80%E4%B9%88%E6%98%AF%E5%B0%BE%E8%B0%83%E7%94%A8%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%B0%BE%E8%B0%83%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F\"><span class=\"toc-text\">18. 什么是尾调用，使用尾调用有什么好处？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19-ES6%E6%A8%A1%E5%9D%97%E4%B8%8ECommonJS%E6%A8%A1%E5%9D%97%E6%9C%89%E4%BB%80%E4%B9%88%E5%BC%82%E5%90%8C%EF%BC%9F\"><span class=\"toc-text\">19. ES6模块与CommonJS模块有什么异同？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20-%E5%B8%B8%E8%A7%81%E7%9A%84DOM%E6%93%8D%E4%BD%9C%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">20. 常见的DOM操作有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%EF%BC%89DOM-%E8%8A%82%E7%82%B9%E7%9A%84%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">1）DOM 节点的获取</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%EF%BC%89DOM-%E8%8A%82%E7%82%B9%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">2）DOM 节点的创建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%EF%BC%89DOM-%E8%8A%82%E7%82%B9%E7%9A%84%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">3）DOM 节点的删除</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%EF%BC%89%E4%BF%AE%E6%94%B9-DOM-%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">4）修改 DOM 元素</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-use-strict%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">21. use strict是什么意思 ? 使用它区别是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E6%9F%90%E4%B8%AA%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">22. 如何判断一个对象是否属于某个类？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-%E5%BC%BA%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E5%BC%B1%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">23. 强类型语言和弱类型语言的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-%E8%A7%A3%E9%87%8A%E6%80%A7%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">24. 解释性语言和编译型语言的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-for%E2%80%A6in%E5%92%8Cfor%E2%80%A6of%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">25. for…in和for…of的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8for%E2%80%A6of%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">26. 如何使用for…of遍历对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#27-ajax%E3%80%81axios%E3%80%81fetch%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">27. ajax、axios、fetch的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#28-%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">28. 数组的遍历方法有哪些</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-forEach%E5%92%8Cmap%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">29. forEach和map方法有什么区别</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">四、原型与原型链</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AF%B9%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">1. 对原型、原型链的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8E%9F%E5%9E%8B%E4%BF%AE%E6%94%B9%E3%80%81%E9%87%8D%E5%86%99\"><span class=\"toc-text\">2. 原型修改、重写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%8C%87%E5%90%91\"><span class=\"toc-text\">3. 原型链指向</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%88%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E6%89%93%E5%8D%B0%E5%87%BA%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%88%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\">4. 原型链的终点是什么？如何打印出原型链的终点？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E5%AF%B9%E8%B1%A1%E9%9D%9E%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8A%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\">5. 如何获得对象非原型链上的属性？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87-x2F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE-x2F-%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">五、执行上下文&#x2F;作用域链&#x2F;闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">1. 对闭包的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">2. 对作用域、作用域链的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">1）全局作用域和函数作用域</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">2）块级作用域</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AF%B9%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">3. 对执行上下文的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1. 执行上下文类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88\"><span class=\"toc-text\">2. 执行上下文栈</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BA%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">3. 创建执行上下文</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"面试题笔记——JS篇(下)","uid":"2fdea5cb1f84778b4d76cd27c9ba53f7","slug":"面试题笔记——JS篇(下)","date":"2021-06-21T13:57:16.000Z","updated":"2023-04-21T08:28:10.595Z","comments":true,"path":"api/articles/面试题笔记——JS篇(下).json","keywords":null,"cover":[],"text":"六、this&#x2F;call&#x2F;apply&#x2F;bind1. 对this对象的理解this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。 第一种是函数调用模式，当一个函数不是一个对象的属性...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[],"tags":[],"author":{"name":"Beastrong","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}